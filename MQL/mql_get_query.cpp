/* Generated by re2c 0.14.3 on Fri Jun  8 17:22:23 2018 */
#line 1 "./mql_gq.re"
/*
 * mql_gq.cpp
 *
 * MQL "Get Query from stream" scanner
 *
 * Ulrik Petersen
 * Created: 6/23-2007
 * Last update: 4/29-2013
 *
 */
/************************************************************************
 *
 *   Emdros - the database engine for analyzed or annotated text
 *   Copyright (C) 2001-2013  Ulrik Sandborg-Petersen
 *
 *   This program is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU General Public License as
 *   published by the Free Software Foundation, license version 2.  
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *   02111-1307 USA
 *
 *
 *   Special exception
 *   =================
 * 
 *   In addition, as a special exception, Ulrik Petersen, the
 *   copyright holder of Emdros, gives permission to link Emdros, in
 *   whole or in part, with the libraries which are normally
 *   distributed with:
 *   
 *   a) Sun's Java platform,
 *   b) Python, 
 *   c) Jython,
 *   d) Ruby, and/or 
 *   e) Perl 
 *   f) PostgreSQL
 *   g) OpenSSL
 *
 *   (or with modified versions of these), and to distribute linked
 *   combinations including both Emdros, in whole or in part, and one
 *   or more of the libraries normally distributed with (a)-(g) above.
 *
 *   Please note: This gives you special rights concerning the
 *   libraries which normally accompany the above pieces of software.
 *   It gives you no special rights concerning software that you write
 *   yourself.  You must obey the GNU General Public License in all
 *   respects for all of the code used other than the libraries
 *   normally distributed with (a)-(g) above.
 *
 *   If you modify this file, you may extend this exception to your
 *   version of the file, but you are not obligated to do so. If you
 *   do not wish to do so, delete this exception statement from your
 *   version.
 *
 *
 *   Other licensing forms
 *   =====================
 *
 *   If you wish to negotiate commercial licensing, please contact
 *   Ulrik Petersen at ulrikp[at]users.sourceforge.net.
 *
 *   Licensing can also be negotiated if your organization is an
 *   educational, non-profit, charity, missionary or similar
 *   organization.
 *
 *
 *   Website
 *   =======
 *
 *   Emdros has a website here:
 *
 *   http://emdros.org
 *
 *
 *
 **************************************************************************/

/**@file mql_gq.re
 *@brief Implementation of MQLGQScanner (re-based) (MQL layer)
 */


#include <mql_gq.h>

#ifdef BSIZE
#undef BSIZE
#endif

#define BSIZE (1024*16)

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER


#define YYCTYPE         unsigned char
#define YYCURSOR        cursor
#define YYLIMIT         lim
#define YYMARKER        ptr
#define YYFILL(n)       {cursor = fill(cursor);}

#line 121 "./mql_gq.re"



MQLGQScanner::MQLGQScanner(std::istream *pIstr)
{
	pIn = pIstr;
	pBigstring = 0;
	bot = tok = ptr = cur = pos = lim = top = eof = 0;
	bufbase1 = new char[BSIZE*2];
	bufbase2 = new char[BSIZE*2];
	bCurIsBufbase1 = false;
}

MQLGQScanner::~MQLGQScanner()
{
	delete pBigstring;
	delete [] bufbase1;
	delete [] bufbase2;
}

void MQLGQScanner::addToken(void)
{
        /* Don't add "+ 1" because cur points 
           one beyond the end of the token. */
	pBigstring->addChars((const char*) tok, cur - tok);
/*
	char *p;
	for (p = tok;
	     p != cur;
	     ++p) {
		pBigstring->addChar(*p);
	}
*/
}

char *MQLGQScanner::fill(char *cursor)
{
        if(!eof)
        {
                unsigned int cnt = tok - bot;
	        if(cnt)
                {
                        memcpy(bot, tok, lim - tok);
                        tok = bot;
                        ptr -= cnt;
                        cursor -= cnt;
                        pos -= cnt;
                        lim -= cnt;
                }
                if((top - lim) < BSIZE)
                {
                        char *buf = (bCurIsBufbase1) ? (bufbase2) : (bufbase1);
			bCurIsBufbase1 = !bCurIsBufbase1;

			if (tok != 0) {
                           	memcpy(buf, tok, lim - tok);
                        }
                        tok = buf;
                        ptr = &buf[ptr - bot];
                        cursor = &buf[cursor - bot];
                        pos = &buf[pos - bot];
                        lim = &buf[lim - bot];
                        top = &lim[BSIZE];
                        bot = buf;
                }
                pIn->read(lim, BSIZE);
                if ((cnt = pIn->gcount()) != BSIZE )
                {
                        eof = &lim[cnt]; *eof++ = '\0';
                }
                lim += cnt;
        }
        return cursor;
}


Bigstring *MQLGQScanner::scan(void)
{
	pBigstring = new Bigstring();
	char *cursor = cur;

 scan:	
	tok = cursor;


#line 200 "./mql_get_query.cpp"
{
	YYCTYPE yych;

	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 'G') {
		if (yych <= '&') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy12;
				if (yych <= '\t') goto yy16;
				goto yy14;
			} else {
				if (yych == '"') goto yy8;
				goto yy16;
			}
		} else {
			if (yych <= '/') {
				if (yych <= '\'') goto yy10;
				if (yych <= '.') goto yy16;
				goto yy6;
			} else {
				if (yych <= '@') goto yy16;
				if (yych <= 'F') goto yy5;
				goto yy4;
			}
		}
	} else {
		if (yych <= '`') {
			if (yych <= 'Z') {
				if (yych != 'Q') goto yy5;
			} else {
				if (yych == '_') goto yy5;
				goto yy16;
			}
		} else {
			if (yych <= 'p') {
				if (yych == 'g') goto yy4;
				goto yy5;
			} else {
				if (yych <= 'q') goto yy2;
				if (yych <= 'z') goto yy5;
				goto yy16;
			}
		}
	}
yy2:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == 'U') goto yy25;
	if (yych == 'u') goto yy25;
	goto yy22;
yy3:
#line 208 "./mql_gq.re"
	{ cur = cursor; addToken(); goto scan; }
#line 254 "./mql_get_query.cpp"
yy4:
	yych = *++YYCURSOR;
	if (yych == 'O') goto yy23;
	if (yych == 'o') goto yy23;
	goto yy22;
yy5:
	yych = *++YYCURSOR;
	goto yy22;
yy6:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '*') goto yy19;
	if (yych == '/') goto yy17;
yy7:
#line 221 "./mql_gq.re"
	{ pBigstring->addChar(*tok); goto scan; }
#line 270 "./mql_get_query.cpp"
yy8:
	++YYCURSOR;
#line 211 "./mql_gq.re"
	{ pBigstring->addChar('\"');
	    cur = cursor;
	    goto stringdq;
          }
#line 278 "./mql_get_query.cpp"
yy10:
	++YYCURSOR;
#line 215 "./mql_gq.re"
	{ pBigstring->addChar('\'');
	    cur = cursor;
	    goto stringsq;
          }
#line 286 "./mql_get_query.cpp"
yy12:
	++YYCURSOR;
#line 219 "./mql_gq.re"
	{ if (cursor == eof) { cur = cursor; goto end; } }
#line 291 "./mql_get_query.cpp"
yy14:
	++YYCURSOR;
#line 220 "./mql_gq.re"
	{ pBigstring->addChar('\n'); goto scan; }
#line 296 "./mql_get_query.cpp"
yy16:
	yych = *++YYCURSOR;
	goto yy7;
yy17:
	++YYCURSOR;
#line 210 "./mql_gq.re"
	{ goto cppcomment; }
#line 304 "./mql_get_query.cpp"
yy19:
	++YYCURSOR;
#line 209 "./mql_gq.re"
	{ goto comment; }
#line 309 "./mql_get_query.cpp"
yy21:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy22:
	if (yych <= 'Z') {
		if (yych <= '/') goto yy3;
		if (yych <= '9') goto yy21;
		if (yych <= '@') goto yy3;
		goto yy21;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy3;
			goto yy21;
		} else {
			if (yych <= '`') goto yy3;
			if (yych <= 'z') goto yy21;
			goto yy3;
		}
	}
yy23:
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= 'Z') {
		if (yych <= '/') goto yy24;
		if (yych <= '9') goto yy21;
		if (yych >= 'A') goto yy21;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy21;
		} else {
			if (yych <= '`') goto yy24;
			if (yych <= 'z') goto yy21;
		}
	}
yy24:
#line 207 "./mql_gq.re"
	{ cur = cursor; /* addToken(); */ tok = cur; goto end; }
#line 347 "./mql_get_query.cpp"
yy25:
	yych = *++YYCURSOR;
	if (yych == 'I') goto yy26;
	if (yych != 'i') goto yy22;
yy26:
	yych = *++YYCURSOR;
	if (yych == 'T') goto yy27;
	if (yych != 't') goto yy22;
yy27:
	++YYCURSOR;
	if ((yych = *YYCURSOR) <= 'Z') {
		if (yych <= '/') goto yy28;
		if (yych <= '9') goto yy21;
		if (yych >= 'A') goto yy21;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy21;
		} else {
			if (yych <= '`') goto yy28;
			if (yych <= 'z') goto yy21;
		}
	}
yy28:
#line 206 "./mql_gq.re"
	{ cur = cursor; addToken(); pBigstring->addChars(" GO", 3); tok = cur; goto end; }
#line 373 "./mql_get_query.cpp"
}
#line 222 "./mql_gq.re"


 comment:
        tok = cursor;

#line 381 "./mql_get_query.cpp"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy35;
		if (yych <= '\t') goto yy37;
		goto yy33;
	} else {
		if (yych != '*') goto yy37;
	}
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy38;
yy32:
#line 230 "./mql_gq.re"
	{ tok = cur; goto comment; }
#line 398 "./mql_get_query.cpp"
yy33:
	++YYCURSOR;
#line 228 "./mql_gq.re"
	{ pBigstring->addChar('\n'); goto comment; }
#line 403 "./mql_get_query.cpp"
yy35:
	++YYCURSOR;
#line 229 "./mql_gq.re"
	{ if (cursor == eof) { goto end; } }
#line 408 "./mql_get_query.cpp"
yy37:
	yych = *++YYCURSOR;
	goto yy32;
yy38:
	++YYCURSOR;
#line 227 "./mql_gq.re"
	{  goto scan; }
#line 416 "./mql_get_query.cpp"
}
#line 231 "./mql_gq.re"


 cppcomment:
        tok = cursor;

#line 424 "./mql_get_query.cpp"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x00) goto yy44;
	if (yych != '\n') goto yy46;
	++YYCURSOR;
#line 236 "./mql_gq.re"
	{ pBigstring->addChar('\n'); goto scan; }
#line 434 "./mql_get_query.cpp"
yy44:
	++YYCURSOR;
#line 237 "./mql_gq.re"
	{ if (cursor == eof) { goto end; } }
#line 439 "./mql_get_query.cpp"
yy46:
	++YYCURSOR;
#line 238 "./mql_gq.re"
	{ tok = cur; goto cppcomment; }
#line 444 "./mql_get_query.cpp"
}
#line 239 "./mql_gq.re"


stringdq:
	tok = cursor;

#line 452 "./mql_get_query.cpp"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 4) YYFILL(4);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy56;
		if (yych == '\n') goto yy54;
		goto yy58;
	} else {
		if (yych <= '"') goto yy50;
		if (yych == '\\') goto yy52;
		goto yy58;
	}
yy50:
	++YYCURSOR;
#line 244 "./mql_gq.re"
	{ pBigstring->addChar(*tok);
  	        cur = cursor;
	        goto scan;
              }
#line 473 "./mql_get_query.cpp"
yy52:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 'b') {
		if (yych <= '3') {
			if (yych <= '&') {
				if (yych == '"') goto yy62;
			} else {
				if (yych <= '\'') goto yy62;
				if (yych >= '0') goto yy61;
			}
		} else {
			if (yych <= '[') {
				if (yych == '?') goto yy62;
			} else {
				if (yych <= '\\') goto yy62;
				if (yych >= 'a') goto yy62;
			}
		}
	} else {
		if (yych <= 'r') {
			if (yych <= 'm') {
				if (yych == 'f') goto yy62;
			} else {
				if (yych <= 'n') goto yy62;
				if (yych >= 'r') goto yy62;
			}
		} else {
			if (yych <= 'u') {
				if (yych == 't') goto yy62;
			} else {
				if (yych <= 'v') goto yy62;
				if (yych == 'x') goto yy59;
			}
		}
	}
yy53:
#line 262 "./mql_gq.re"
	{ pBigstring->addChar(*tok); cur = cursor; goto stringdq; }
#line 512 "./mql_get_query.cpp"
yy54:
	++YYCURSOR;
#line 260 "./mql_gq.re"
	{ pBigstring->addChar('\n'); cur = cursor; goto stringdq; }
#line 517 "./mql_get_query.cpp"
yy56:
	++YYCURSOR;
#line 261 "./mql_gq.re"
	{ if (cursor == eof) { goto end; } }
#line 522 "./mql_get_query.cpp"
yy58:
	yych = *++YYCURSOR;
	goto yy53;
yy59:
	yych = *++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy60;
		if (yych <= '9') goto yy67;
	} else {
		if (yych <= 'F') goto yy67;
		if (yych <= '`') goto yy60;
		if (yych <= 'f') goto yy67;
	}
yy60:
	YYCURSOR = YYMARKER;
	goto yy53;
yy61:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy60;
	if (yych <= '7') goto yy64;
	goto yy60;
yy62:
	++YYCURSOR;
#line 248 "./mql_gq.re"
	{ cur = cursor; 
		        pBigstring->addChars(tok, 2);
		      goto stringdq;
                    }
#line 551 "./mql_get_query.cpp"
yy64:
	yych = *++YYCURSOR;
	if (yych <= '/') goto yy60;
	if (yych >= '8') goto yy60;
	++YYCURSOR;
#line 252 "./mql_gq.re"
	{ cur = cursor; 
		      pBigstring->addChars(tok, 4);
		    goto stringdq; 
                  }
#line 562 "./mql_get_query.cpp"
yy67:
	yych = *++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy60;
		if (yych >= ':') goto yy60;
	} else {
		if (yych <= 'F') goto yy68;
		if (yych <= '`') goto yy60;
		if (yych >= 'g') goto yy60;
	}
yy68:
	++YYCURSOR;
#line 256 "./mql_gq.re"
	{ cur = cursor;
		      		   pBigstring->addChars(tok, 4);
			       goto stringdq;
                             }
#line 580 "./mql_get_query.cpp"
}
#line 263 "./mql_gq.re"


stringsq:
	tok = cursor;

#line 588 "./mql_get_query.cpp"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy76;
		if (yych <= '\t') goto yy78;
		goto yy74;
	} else {
		if (yych != '\'') goto yy78;
	}
	++YYCURSOR;
#line 268 "./mql_gq.re"
	{ pBigstring->addChar('\'');
  	        cur = cursor;
	        goto scan;
              }
#line 606 "./mql_get_query.cpp"
yy74:
	++YYCURSOR;
#line 272 "./mql_gq.re"
	{ pBigstring->addChar('\n'); cur = cursor; goto stringsq; }
#line 611 "./mql_get_query.cpp"
yy76:
	++YYCURSOR;
#line 273 "./mql_gq.re"
	{ if (cursor == eof) { goto end; } }
#line 616 "./mql_get_query.cpp"
yy78:
	++YYCURSOR;
#line 274 "./mql_gq.re"
	{ pBigstring->addChar(*tok); cur = cursor; goto stringsq; }
#line 621 "./mql_get_query.cpp"
}
#line 275 "./mql_gq.re"



	
 end:
        Bigstring *result = pBigstring;
        pBigstring = 0;
	return result;
}



/*
int main(int argc, char *argv[])
{
      MQLGQScanner sc(&std::cin);
      while (!sc.noMoreInput()) {
           Bigstring *pBigstring = sc.scan();
           std::string result;
           pBigstring->toString(result);
           std::cerr << "UP200: '" << result << "'" << std::endl;
           delete pBigstring;
      }
}

*/
