//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class BookcaseHarvester : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BookcaseHarvester(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BookcaseHarvester obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BookcaseHarvester() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_BookcaseHarvester(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BookcaseHarvester(EmdrosEnv pEnv, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list) : this(csemdrosPINVOKE.new_BookcaseHarvester(EmdrosEnv.getCPtr(pEnv), bookcase_OTN, indexed_OTN, indexed_feature_name_list), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void process(SetOfMonads substrate, StringList token_list, SWIGTYPE_p_int_fast64_t largest_proximity, bool bReduceToSingleHitsWithinBookcases, BookcaseHitList result) {
    csemdrosPINVOKE.BookcaseHarvester_process(swigCPtr, SetOfMonads.getCPtr(substrate), StringList.getCPtr(token_list), SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), bReduceToSingleHitsWithinBookcases, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
