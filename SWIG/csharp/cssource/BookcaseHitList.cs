//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class BookcaseHitList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BookcaseHitList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BookcaseHitList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BookcaseHitList() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_BookcaseHitList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BookcaseHitList() : this(csemdrosPINVOKE.new_BookcaseHitList__SWIG_0(), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public BookcaseHitList(BookcaseHitList other) : this(csemdrosPINVOKE.new_BookcaseHitList__SWIG_1(BookcaseHitList.getCPtr(other)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaxHitsPerPage(int max_hits_per_page) {
    csemdrosPINVOKE.BookcaseHitList_setMaxHitsPerPage(swigCPtr, max_hits_per_page);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getPageCount() {
    int ret = csemdrosPINVOKE.BookcaseHitList_getPageCount(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getHitCount() {
    int ret = csemdrosPINVOKE.BookcaseHitList_getHitCount(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getBookcaseCount() {
    int ret = csemdrosPINVOKE.BookcaseHitList_getBookcaseCount(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BookcaseHitListConstIterator const_iterator(int page_number) {
    BookcaseHitListConstIterator ret = new BookcaseHitListConstIterator(csemdrosPINVOKE.BookcaseHitList_const_iterator__SWIG_0(swigCPtr, page_number), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BookcaseHitListConstIterator const_iterator() {
    BookcaseHitListConstIterator ret = new BookcaseHitListConstIterator(csemdrosPINVOKE.BookcaseHitList_const_iterator__SWIG_1(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addHit(SWIGTYPE_p_int_fast64_t bookcase_fm, SWIGTYPE_p_int_fast64_t bookcase_lm, SWIGTYPE_p_int_fast64_t hit_fm) {
    csemdrosPINVOKE.BookcaseHitList_addHit(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(bookcase_fm), SWIGTYPE_p_int_fast64_t.getCPtr(bookcase_lm), SWIGTYPE_p_int_fast64_t.getCPtr(hit_fm));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public BookcaseHitList removeThoseNotPresentInOther(BookcaseHitList other, SWIGTYPE_p_int_fast64_t proximity_length_backward, SWIGTYPE_p_int_fast64_t proximity_length_forward) {
    BookcaseHitList ret = new BookcaseHitList(csemdrosPINVOKE.BookcaseHitList_removeThoseNotPresentInOther(swigCPtr, BookcaseHitList.getCPtr(other), SWIGTYPE_p_int_fast64_t.getCPtr(proximity_length_backward), SWIGTYPE_p_int_fast64_t.getCPtr(proximity_length_forward)), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasHit(SWIGTYPE_p_int_fast64_t bookcase_fm, SWIGTYPE_p_int_fast64_t bookcase_lm, SWIGTYPE_p_int_fast64_t hit_fm, SWIGTYPE_p_int_fast64_t proximity_length) {
    bool ret = csemdrosPINVOKE.BookcaseHitList_hasHit(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(bookcase_fm), SWIGTYPE_p_int_fast64_t.getCPtr(bookcase_lm), SWIGTYPE_p_int_fast64_t.getCPtr(hit_fm), SWIGTYPE_p_int_fast64_t.getCPtr(proximity_length));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BookcaseHitList removeAllButFirstHitInEachBookcase() {
    BookcaseHitList ret = new BookcaseHitList(csemdrosPINVOKE.BookcaseHitList_removeAllButFirstHitInEachBookcase(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool harvestHits(EmdrosEnv pEnv, string bookcase_OTN, string bookcase_title_OTN, string bookcase_title_feature_name, string token_OTN, string token_feature_name, SWIGTYPE_p_int_fast64_t monads_before_hit_word, SWIGTYPE_p_int_fast64_t monads_after_hit_word, string query, EmdrosFTSStringFilter pStringFilterList, int page_no) {
    bool ret = csemdrosPINVOKE.BookcaseHitList_harvestHits__SWIG_0(swigCPtr, EmdrosEnv.getCPtr(pEnv), bookcase_OTN, bookcase_title_OTN, bookcase_title_feature_name, token_OTN, token_feature_name, SWIGTYPE_p_int_fast64_t.getCPtr(monads_before_hit_word), SWIGTYPE_p_int_fast64_t.getCPtr(monads_after_hit_word), query, EmdrosFTSStringFilter.getCPtr(pStringFilterList), page_no);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool harvestHits(EmdrosEnv pEnv, string bookcase_OTN, string bookcase_title_OTN, string bookcase_title_feature_name, string token_OTN, string token_feature_name, SWIGTYPE_p_int_fast64_t monads_before_hit_word, SWIGTYPE_p_int_fast64_t monads_after_hit_word, string query, EmdrosFTSStringFilter pStringFilterList) {
    bool ret = csemdrosPINVOKE.BookcaseHitList_harvestHits__SWIG_1(swigCPtr, EmdrosEnv.getCPtr(pEnv), bookcase_OTN, bookcase_title_OTN, bookcase_title_feature_name, token_OTN, token_feature_name, SWIGTYPE_p_int_fast64_t.getCPtr(monads_before_hit_word), SWIGTYPE_p_int_fast64_t.getCPtr(monads_after_hit_word), query, EmdrosFTSStringFilter.getCPtr(pStringFilterList));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool harvestHits(EmdrosEnv pEnv, string bookcase_OTN, string bookcase_title_OTN, string bookcase_title_feature_name, string token_OTN, string token_feature_name, SWIGTYPE_p_int_fast64_t monads_before_hit_word, SWIGTYPE_p_int_fast64_t monads_after_hit_word, string query) {
    bool ret = csemdrosPINVOKE.BookcaseHitList_harvestHits__SWIG_2(swigCPtr, EmdrosEnv.getCPtr(pEnv), bookcase_OTN, bookcase_title_OTN, bookcase_title_feature_name, token_OTN, token_feature_name, SWIGTYPE_p_int_fast64_t.getCPtr(monads_before_hit_word), SWIGTYPE_p_int_fast64_t.getCPtr(monads_after_hit_word), query);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool harvestHits(EmdrosEnv pEnv, string bookcase_OTN, string bookcase_title_OTN, string bookcase_title_feature_name, string token_OTN, string token_feature_name, SWIGTYPE_p_int_fast64_t monads_before_hit_word, SWIGTYPE_p_int_fast64_t monads_after_hit_word) {
    bool ret = csemdrosPINVOKE.BookcaseHitList_harvestHits__SWIG_3(swigCPtr, EmdrosEnv.getCPtr(pEnv), bookcase_OTN, bookcase_title_OTN, bookcase_title_feature_name, token_OTN, token_feature_name, SWIGTYPE_p_int_fast64_t.getCPtr(monads_before_hit_word), SWIGTYPE_p_int_fast64_t.getCPtr(monads_after_hit_word));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getSnippet(BookcaseHit hit, string hit_token_prefix, string hit_token_suffix, string hit_token_infix, bool bStripToken, string snippet, string snippet_title) {
    csemdrosPINVOKE.BookcaseHitList_getSnippet(swigCPtr, BookcaseHit.getCPtr(hit), hit_token_prefix, hit_token_suffix, hit_token_infix, bStripToken, snippet, snippet_title);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearHitMap() {
    csemdrosPINVOKE.BookcaseHitList_clearHitMap(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool empty() {
    bool ret = csemdrosPINVOKE.BookcaseHitList_empty(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void merge(BookcaseHitList other) {
    csemdrosPINVOKE.BookcaseHitList_merge(swigCPtr, BookcaseHitList.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void merge_range(BookcaseHitList other, SWIGTYPE_p_int_fast64_t token_range, bool bDirectionMatters) {
    csemdrosPINVOKE.BookcaseHitList_merge_range(swigCPtr, BookcaseHitList.getCPtr(other), SWIGTYPE_p_int_fast64_t.getCPtr(token_range), bDirectionMatters);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void filter_both(BookcaseHitList other) {
    csemdrosPINVOKE.BookcaseHitList_filter_both(swigCPtr, BookcaseHitList.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void filter(BookcaseHitList hl1, BookcaseHitList hl2) {
    csemdrosPINVOKE.BookcaseHitList_filter(BookcaseHitList.getCPtr(hl1), BookcaseHitList.getCPtr(hl2));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
