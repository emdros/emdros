//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class EMdFDB : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EMdFDB(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EMdFDB obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EMdFDB() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_EMdFDB(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public EMdFDB(eBackendKind backend_kind) : this(csemdrosPINVOKE.new_EMdFDB((int)backend_kind), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getBackendName() {
    string ret = csemdrosPINVOKE.EMdFDB_getBackendName(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public eBackendKind getBackendKind() {
    eBackendKind ret = (eBackendKind)csemdrosPINVOKE.EMdFDB_getBackendKind(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool useDatabase(string db_name, string key, bool bIsInitializingOrCreating) {
    bool ret = csemdrosPINVOKE.EMdFDB_useDatabase__SWIG_0(swigCPtr, db_name, key, bIsInitializingOrCreating);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool useDatabase(string db_name, string key) {
    bool ret = csemdrosPINVOKE.EMdFDB_useDatabase__SWIG_1(swigCPtr, db_name, key);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool dbIsInitialized(ref bool bIsInitialized) {
    bool ret = csemdrosPINVOKE.EMdFDB_dbIsInitialized(swigCPtr, ref bIsInitialized);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getMin_m(SWIGTYPE_p_int_fast64_t min_m) {
    bool ret = csemdrosPINVOKE.EMdFDB_getMin_m(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(min_m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getMax_m(SWIGTYPE_p_int_fast64_t max_m) {
    bool ret = csemdrosPINVOKE.EMdFDB_getMax_m(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(max_m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool getAll_m_1(SetOfMonads all_m_1) {
    bool ret = csemdrosPINVOKE.EMdFDB_getAll_m_1(swigCPtr, SetOfMonads.getCPtr(all_m_1));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createIndicesOnDatabase(string database_name, string key) {
    bool ret = csemdrosPINVOKE.EMdFDB_createIndicesOnDatabase(swigCPtr, database_name, key);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool dropIndicesOnDatabase(string database_name, string key) {
    bool ret = csemdrosPINVOKE.EMdFDB_dropIndicesOnDatabase(swigCPtr, database_name, key);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createIndicesOnObjectType(string object_type_name) {
    bool ret = csemdrosPINVOKE.EMdFDB_createIndicesOnObjectType__SWIG_0(swigCPtr, object_type_name);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool dropIndicesOnObjectType(string object_type_name) {
    bool ret = csemdrosPINVOKE.EMdFDB_dropIndicesOnObjectType__SWIG_0(swigCPtr, object_type_name);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool createIndicesOnObjectType(string database_name, string key, string object_type_name) {
    bool ret = csemdrosPINVOKE.EMdFDB_createIndicesOnObjectType__SWIG_1(swigCPtr, database_name, key, object_type_name);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool dropIndicesOnObjectType(string database_name, string key, string object_type_name) {
    bool ret = csemdrosPINVOKE.EMdFDB_dropIndicesOnObjectType__SWIG_1(swigCPtr, database_name, key, object_type_name);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool vacuum(bool bAnalyze) {
    bool ret = csemdrosPINVOKE.EMdFDB_vacuum(swigCPtr, bAnalyze);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool insertMonadRange(SWIGTYPE_p_int_fast64_t first, SWIGTYPE_p_int_fast64_t last) {
    bool ret = csemdrosPINVOKE.EMdFDB_insertMonadRange(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(first), SWIGTYPE_p_int_fast64_t.getCPtr(last));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool insertMonadRangeOT(string object_type_name, SWIGTYPE_p_int_fast64_t first, SWIGTYPE_p_int_fast64_t last) {
    bool ret = csemdrosPINVOKE.EMdFDB_insertMonadRangeOT(swigCPtr, object_type_name, SWIGTYPE_p_int_fast64_t.getCPtr(first), SWIGTYPE_p_int_fast64_t.getCPtr(last));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool beginTransaction() {
    bool ret = csemdrosPINVOKE.EMdFDB_beginTransaction(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool commitTransaction() {
    bool ret = csemdrosPINVOKE.EMdFDB_commitTransaction(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool abortTransaction() {
    bool ret = csemdrosPINVOKE.EMdFDB_abortTransaction(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string errorMessage() {
    string ret = csemdrosPINVOKE.EMdFDB_errorMessage(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool connectionOk() {
    bool ret = csemdrosPINVOKE.EMdFDB_connectionOk(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearLocalError() {
    csemdrosPINVOKE.EMdFDB_clearLocalError(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getLocalError() {
    string ret = csemdrosPINVOKE.EMdFDB_getLocalError(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
