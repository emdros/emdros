//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class EmdrosEnv : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EmdrosEnv(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EmdrosEnv obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EmdrosEnv() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_EmdrosEnv(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public EmdrosEnv(SWIGTYPE_p_std__ostream output_stream, eOutputKind output_kind, eCharsets charset, string hostname, string user, string password, string initial_db, eBackendKind backend) : this(csemdrosPINVOKE.new_EmdrosEnv__SWIG_0(SWIGTYPE_p_std__ostream.getCPtr(output_stream), (int)output_kind, (int)charset, hostname, user, password, initial_db, (int)backend), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public EmdrosEnv(SWIGTYPE_p_std__ostream output_stream, eOutputKind output_kind, eCharsets charset, string hostname, string user, string password, string initial_db) : this(csemdrosPINVOKE.new_EmdrosEnv__SWIG_1(SWIGTYPE_p_std__ostream.getCPtr(output_stream), (int)output_kind, (int)charset, hostname, user, password, initial_db), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public EmdrosEnv(eOutputKind output_kind, eCharsets charset, string hostname, string user, string password, string initial_db, eBackendKind backend) : this(csemdrosPINVOKE.new_EmdrosEnv__SWIG_2((int)output_kind, (int)charset, hostname, user, password, initial_db, (int)backend), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public EmdrosEnv(eOutputKind output_kind, eCharsets charset, string hostname, string user, string password, string initial_db) : this(csemdrosPINVOKE.new_EmdrosEnv__SWIG_3((int)output_kind, (int)charset, hostname, user, password, initial_db), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getBackendName() {
    string ret = csemdrosPINVOKE.EmdrosEnv_getBackendName(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool executeString(string input, ref bool bResult, bool bPrintResult, bool bReportError) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_executeString__SWIG_0(swigCPtr, input, ref bResult, bPrintResult, bReportError);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool executeString(string input, ref bool bResult, bool bPrintResult, bool bReportError, MQLResultCallback pCallback) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_executeString__SWIG_1(swigCPtr, input, ref bResult, bPrintResult, bReportError, MQLResultCallback.getCPtr(pCallback));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool executeFile(string filename, ref bool bResult, bool bPrintResult, bool bReportError, MQLResultCallback pCallback) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_executeFile__SWIG_0(swigCPtr, filename, ref bResult, bPrintResult, bReportError, MQLResultCallback.getCPtr(pCallback));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool executeFile(string filename, ref bool bResult, bool bPrintResult, bool bReportError) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_executeFile__SWIG_1(swigCPtr, filename, ref bResult, bPrintResult, bReportError);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool executeStream(SWIGTYPE_p_std__istream strin, ref bool bResult, bool bPrintResult, bool bReportError, MQLResultCallback pCallback) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_executeStream__SWIG_0(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(strin), ref bResult, bPrintResult, bReportError, MQLResultCallback.getCPtr(pCallback));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool executeStream(SWIGTYPE_p_std__istream strin, ref bool bResult, bool bPrintResult, bool bReportError) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_executeStream__SWIG_1(swigCPtr, SWIGTYPE_p_std__istream.getCPtr(strin), ref bResult, bPrintResult, bReportError);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clean() {
    csemdrosPINVOKE.EmdrosEnv_clean(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool connectionOk() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_connectionOk(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool vacuum(bool bAnalyze) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_vacuum(swigCPtr, bAnalyze);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getMin_m(SWIGTYPE_p_int_fast64_t min_m) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_getMin_m(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(min_m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getMax_m(SWIGTYPE_p_int_fast64_t max_m) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_getMax_m(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(max_m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getAll_m_1(SetOfMonads all_m_1) {
    bool ret = csemdrosPINVOKE.EmdrosEnv_getAll_m_1(swigCPtr, SetOfMonads.getCPtr(all_m_1));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getEnumConstNameFromValue(SWIGTYPE_p_int_fast64_t value, string enum_name, ref bool bDBOK) {
    string ret = csemdrosPINVOKE.EmdrosEnv_getEnumConstNameFromValue(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(value), enum_name, ref bDBOK);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool beginTransaction() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_beginTransaction(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool commitTransaction() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_commitTransaction(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool abortTransaction() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_abortTransaction(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isSheaf() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_isSheaf(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isFlatSheaf() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_isFlatSheaf(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTable() {
    bool ret = csemdrosPINVOKE.EmdrosEnv_isTable(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MQLResult getResult() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_getResult(swigCPtr);
    MQLResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new MQLResult(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sheaf getSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_getSheaf(swigCPtr);
    Sheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new Sheaf(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlatSheaf getFlatSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_getFlatSheaf(swigCPtr);
    FlatSheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new FlatSheaf(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Table getTable() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_getTable(swigCPtr);
    Table ret = (cPtr == global::System.IntPtr.Zero) ? null : new Table(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Statement getStatement() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_getStatement(swigCPtr);
    Statement ret = (cPtr == global::System.IntPtr.Zero) ? null : new Statement(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MQLResult takeOverResult() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_takeOverResult(swigCPtr);
    MQLResult ret = (cPtr == global::System.IntPtr.Zero) ? null : new MQLResult(cPtr, true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sheaf takeOverSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_takeOverSheaf(swigCPtr);
    Sheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new Sheaf(cPtr, true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlatSheaf takeOverFlatSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_takeOverFlatSheaf(swigCPtr);
    FlatSheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new FlatSheaf(cPtr, true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Table takeOverTable() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_takeOverTable(swigCPtr);
    Table ret = (cPtr == global::System.IntPtr.Zero) ? null : new Table(cPtr, true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Statement takeOverStatement() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_takeOverStatement(swigCPtr);
    Statement ret = (cPtr == global::System.IntPtr.Zero) ? null : new Statement(cPtr, true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getDBError() {
    string ret = csemdrosPINVOKE.EmdrosEnv_getDBError(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getCompilerError() {
    string ret = csemdrosPINVOKE.EmdrosEnv_getCompilerError(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getLastCompilerStage() {
    int ret = csemdrosPINVOKE.EmdrosEnv_getLastCompilerStage(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearErrors() {
    csemdrosPINVOKE.EmdrosEnv_clearErrors(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void csout(string str) {
    csemdrosPINVOKE.EmdrosEnv_csout__SWIG_0(swigCPtr, str);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void csout(MQLResult pResult) {
    csemdrosPINVOKE.EmdrosEnv_csout__SWIG_1(swigCPtr, MQLResult.getCPtr(pResult));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void csout(Sheaf pSheaf) {
    csemdrosPINVOKE.EmdrosEnv_csout__SWIG_2(swigCPtr, Sheaf.getCPtr(pSheaf));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void csout(FlatSheaf pFlatSheaf) {
    csemdrosPINVOKE.EmdrosEnv_csout__SWIG_3(swigCPtr, FlatSheaf.getCPtr(pFlatSheaf));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void csout(Table pTable) {
    csemdrosPINVOKE.EmdrosEnv_csout__SWIG_4(swigCPtr, Table.getCPtr(pTable));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void csout(SetOfMonads pMonads) {
    csemdrosPINVOKE.EmdrosEnv_csout__SWIG_5(swigCPtr, SetOfMonads.getCPtr(pMonads));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXMLDecl() {
    csemdrosPINVOKE.EmdrosEnv_printXMLDecl(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printDTDStart(string root_element) {
    csemdrosPINVOKE.EmdrosEnv_printDTDStart(swigCPtr, root_element);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printDTDEnd() {
    csemdrosPINVOKE.EmdrosEnv_printDTDEnd(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printDTDMQLResult() {
    csemdrosPINVOKE.EmdrosEnv_printDTDMQLResult(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printDTDTable() {
    csemdrosPINVOKE.EmdrosEnv_printDTDTable(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printDTDSheaf() {
    csemdrosPINVOKE.EmdrosEnv_printDTDSheaf(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printDTDFlatSheaf() {
    csemdrosPINVOKE.EmdrosEnv_printDTDFlatSheaf(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public MQLExecEnv getMQLEE() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.EmdrosEnv_getMQLEE(swigCPtr);
    MQLExecEnv ret = (cPtr == global::System.IntPtr.Zero) ? null : new MQLExecEnv(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
