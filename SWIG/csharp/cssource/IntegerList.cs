//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class IntegerList : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntegerList(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IntegerList obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IntegerList() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_IntegerList(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public IntegerList() : this(csemdrosPINVOKE.new_IntegerList__SWIG_0(), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntegerList(IntegerList other) : this(csemdrosPINVOKE.new_IntegerList__SWIG_1(IntegerList.getCPtr(other)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntegerList(string str, string delimiter) : this(csemdrosPINVOKE.new_IntegerList__SWIG_2(str, delimiter), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public IntegerListConstIterator const_iterator() {
    IntegerListConstIterator ret = new IntegerListConstIterator(csemdrosPINVOKE.IntegerList_const_iterator(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addIntegerFront(SWIGTYPE_p_int_fast64_t l) {
    csemdrosPINVOKE.IntegerList_addIntegerFront(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(l));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addIntegerBack(SWIGTYPE_p_int_fast64_t l) {
    csemdrosPINVOKE.IntegerList_addIntegerBack(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(l));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isEmpty() {
    bool ret = csemdrosPINVOKE.IntegerList_isEmpty(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_int_fast64_t_t getAsVector() {
    SWIGTYPE_p_std__vectorT_int_fast64_t_t ret = new SWIGTYPE_p_std__vectorT_int_fast64_t_t(csemdrosPINVOKE.IntegerList_getAsVector(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
