//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class ListOfStraws : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ListOfStraws(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ListOfStraws obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ListOfStraws() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_ListOfStraws(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ListOfStraws(ListOfStraws other) : this(csemdrosPINVOKE.new_ListOfStraws(ListOfStraws.getCPtr(other)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SheafIterator iterator() {
    SheafIterator ret = new SheafIterator(csemdrosPINVOKE.ListOfStraws_iterator(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SheafConstIterator const_iterator() {
    SheafConstIterator ret = new SheafConstIterator(csemdrosPINVOKE.ListOfStraws_const_iterator(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEmpty() {
    bool ret = csemdrosPINVOKE.ListOfStraws_isEmpty(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t size() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.ListOfStraws_size(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void printLOSStartConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.ListOfStraws_printLOSStartConsole(EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void printLOSEndConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.ListOfStraws_printLOSEndConsole(EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printConsole(EMdFOutput pOut, bool bPrintStartAndEnd) {
    csemdrosPINVOKE.ListOfStraws_printConsole__SWIG_0(swigCPtr, EMdFOutput.getCPtr(pOut), bPrintStartAndEnd);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.ListOfStraws_printConsole__SWIG_1(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXML(EMdFOutput pOut) {
    csemdrosPINVOKE.ListOfStraws_printXML(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printJSON(EMdFOutput pOut) {
    csemdrosPINVOKE.ListOfStraws_printJSON(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
