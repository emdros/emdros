//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class MQLExecEnv : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MQLExecEnv(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MQLExecEnv obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MQLExecEnv() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_MQLExecEnv(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool m_bContinueExecution {
    set {
      csemdrosPINVOKE.MQLExecEnv_m_bContinueExecution_set(swigCPtr, value);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = csemdrosPINVOKE.MQLExecEnv_m_bContinueExecution_get(swigCPtr);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MQLResultCallback pCallback {
    set {
      csemdrosPINVOKE.MQLExecEnv_pCallback_set(swigCPtr, MQLResultCallback.getCPtr(value));
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = csemdrosPINVOKE.MQLExecEnv_pCallback_get(swigCPtr);
      MQLResultCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new MQLResultCallback(cPtr, false);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Statement pStatement {
    set {
      csemdrosPINVOKE.MQLExecEnv_pStatement_set(swigCPtr, Statement.getCPtr(value));
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = csemdrosPINVOKE.MQLExecEnv_pStatement_get(swigCPtr);
      Statement ret = (cPtr == global::System.IntPtr.Zero) ? null : new Statement(cPtr, false);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static Sheaf m_EmptySheaf {
    set {
      csemdrosPINVOKE.MQLExecEnv_m_EmptySheaf_set(Sheaf.getCPtr(value));
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = csemdrosPINVOKE.MQLExecEnv_m_EmptySheaf_get();
      Sheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new Sheaf(cPtr, false);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EMdFDB pDB {
    set {
      csemdrosPINVOKE.MQLExecEnv_pDB_set(swigCPtr, EMdFDB.getCPtr(value));
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = csemdrosPINVOKE.MQLExecEnv_pDB_get(swigCPtr);
      EMdFDB ret = (cPtr == global::System.IntPtr.Zero) ? null : new EMdFDB(cPtr, false);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EMdFOutput pOut {
    set {
      csemdrosPINVOKE.MQLExecEnv_pOut_set(swigCPtr, EMdFOutput.getCPtr(value));
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = csemdrosPINVOKE.MQLExecEnv_pOut_get(swigCPtr);
      EMdFOutput ret = (cPtr == global::System.IntPtr.Zero) ? null : new EMdFOutput(cPtr, false);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MQLError pError {
    set {
      csemdrosPINVOKE.MQLExecEnv_pError_set(swigCPtr, MQLError.getCPtr(value));
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = csemdrosPINVOKE.MQLExecEnv_pError_get(swigCPtr);
      MQLError ret = (cPtr == global::System.IntPtr.Zero) ? null : new MQLError(cPtr, false);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MQLExecEnv(EMdFDB pMyDB, EMdFOutput pMyOut) : this(csemdrosPINVOKE.new_MQLExecEnv(EMdFDB.getCPtr(pMyDB), EMdFOutput.getCPtr(pMyOut)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public int nCompilerStage {
    set {
      csemdrosPINVOKE.MQLExecEnv_nCompilerStage_set(swigCPtr, value);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = csemdrosPINVOKE.MQLExecEnv_nCompilerStage_get(swigCPtr);
      if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void clean() {
    csemdrosPINVOKE.MQLExecEnv_clean(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
