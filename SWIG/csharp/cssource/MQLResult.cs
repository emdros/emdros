//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class MQLResult : Table {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MQLResult(global::System.IntPtr cPtr, bool cMemoryOwn) : base(csemdrosPINVOKE.MQLResult_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MQLResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MQLResult() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_MQLResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public bool isSheaf() {
    bool ret = csemdrosPINVOKE.MQLResult_isSheaf(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isFlatSheaf() {
    bool ret = csemdrosPINVOKE.MQLResult_isFlatSheaf(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTable() {
    bool ret = csemdrosPINVOKE.MQLResult_isTable(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sheaf getSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.MQLResult_getSheaf(swigCPtr);
    Sheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new Sheaf(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FlatSheaf getFlatSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.MQLResult_getFlatSheaf(swigCPtr);
    FlatSheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new FlatSheaf(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Table getTable() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.MQLResult_getTable(swigCPtr);
    Table ret = (cPtr == global::System.IntPtr.Zero) ? null : new Table(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void csout(EMdFOutput pOut) {
    csemdrosPINVOKE.MQLResult_csout(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public new static void printDTD(EMdFOutput pOut) {
    csemdrosPINVOKE.MQLResult_printDTD(EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool flatten() {
    bool ret = csemdrosPINVOKE.MQLResult_flatten__SWIG_0(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool flatten(StringList pObjectTypeNames, EMdFDB pDB) {
    bool ret = csemdrosPINVOKE.MQLResult_flatten__SWIG_1(swigCPtr, StringList.getCPtr(pObjectTypeNames), EMdFDB.getCPtr(pDB));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MQLResult() : this(csemdrosPINVOKE.new_MQLResult(), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
