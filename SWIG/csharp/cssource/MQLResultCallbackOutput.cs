//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class MQLResultCallbackOutput : MQLResultCallback {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MQLResultCallbackOutput(global::System.IntPtr cPtr, bool cMemoryOwn) : base(csemdrosPINVOKE.MQLResultCallbackOutput_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MQLResultCallbackOutput obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MQLResultCallbackOutput() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_MQLResultCallbackOutput(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MQLResultCallbackOutput(MQLExecEnv pEE, bool bFlushAfterEveryResult) : this(csemdrosPINVOKE.new_MQLResultCallbackOutput(MQLExecEnv.getCPtr(pEE), bFlushAfterEveryResult), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool startSheaf(ref bool bStoreSheafInMemory) {
    bool ret = csemdrosPINVOKE.MQLResultCallbackOutput_startSheaf(swigCPtr, ref bStoreSheafInMemory);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void endSheaf(bool bSheafWasFailed) {
    csemdrosPINVOKE.MQLResultCallbackOutput_endSheaf(swigCPtr, bSheafWasFailed);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool nextLOS(ListOfStraws pLOS) {
    bool ret = csemdrosPINVOKE.MQLResultCallbackOutput_nextLOS(swigCPtr, ListOfStraws.getCPtr(pLOS));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool useResultAfterwards() {
    bool ret = csemdrosPINVOKE.MQLResultCallbackOutput_useResultAfterwards(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void clean() {
    csemdrosPINVOKE.MQLResultCallbackOutput_clean(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
