//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class MatchedObject : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MatchedObject(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MatchedObject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MatchedObject() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_MatchedObject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MatchedObject(SWIGTYPE_p_int_fast64_t SmMinus1) : this(csemdrosPINVOKE.new_MatchedObject__SWIG_0(SWIGTYPE_p_int_fast64_t.getCPtr(SmMinus1)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public MatchedObject(MatchedObject other) : this(csemdrosPINVOKE.new_MatchedObject__SWIG_1(MatchedObject.getCPtr(other)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads getMonads() {
    SetOfMonads ret = new SetOfMonads(csemdrosPINVOKE.MatchedObject_getMonads(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t getID_D() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MatchedObject_getID_D(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Sheaf getSheaf() {
    global::System.IntPtr cPtr = csemdrosPINVOKE.MatchedObject_getSheaf(swigCPtr);
    Sheaf ret = (cPtr == global::System.IntPtr.Zero) ? null : new Sheaf(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool sheafIsEmpty() {
    bool ret = csemdrosPINVOKE.MatchedObject_sheafIsEmpty(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public eMOKind getKind() {
    eMOKind ret = (eMOKind)csemdrosPINVOKE.MatchedObject_getKind(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isID_M() {
    bool ret = csemdrosPINVOKE.MatchedObject_isID_M(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isInstObject() {
    bool ret = csemdrosPINVOKE.MatchedObject_isInstObject(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isID_D() {
    bool ret = csemdrosPINVOKE.MatchedObject_isID_D(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEMPTY_mo() {
    bool ret = csemdrosPINVOKE.MatchedObject_isEMPTY_mo(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getFocus() {
    bool ret = csemdrosPINVOKE.MatchedObject_getFocus(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getMarksString() {
    string ret = csemdrosPINVOKE.MatchedObject_getMarksString(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getRetrieve() {
    bool ret = csemdrosPINVOKE.MatchedObject_getRetrieve(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t countObjects(bool bUseOnlyFocusObjects) {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MatchedObject_countObjects(swigCPtr, bUseOnlyFocusObjects), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t countObjectsFromObjectType(string object_type_name, bool bUseOnlyFocusObjects) {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MatchedObject_countObjectsFromObjectType(swigCPtr, object_type_name, bUseOnlyFocusObjects), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t countStraws() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MatchedObject_countStraws(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getSOM(SetOfMonads som, bool bUseOnlyFocusObjects) {
    csemdrosPINVOKE.MatchedObject_getSOM(swigCPtr, SetOfMonads.getCPtr(som), bUseOnlyFocusObjects);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void harvestMarks(SWIGTYPE_p_String2SOMMap result, bool bUseSingleMarks) {
    csemdrosPINVOKE.MatchedObject_harvestMarks(swigCPtr, SWIGTYPE_p_String2SOMMap.getCPtr(result), bUseSingleMarks);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getFeatureAsString(int index) {
    string ret = csemdrosPINVOKE.MatchedObject_getFeatureAsString(swigCPtr, index);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t getFeatureAsLong(int index) {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MatchedObject_getFeatureAsLong(swigCPtr, index), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EMdFValue getEMdFValue(int index) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.MatchedObject_getEMdFValue__SWIG_0(swigCPtr, index);
    EMdFValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new EMdFValue(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public EMdFValue getEMdFValue(string feature_name) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.MatchedObject_getEMdFValue__SWIG_1(swigCPtr, feature_name);
    EMdFValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new EMdFValue(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getEMdFValueIndex(string feature_name) {
    int ret = csemdrosPINVOKE.MatchedObject_getEMdFValueIndex(swigCPtr, feature_name);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StringList getFeatureList() {
    StringList ret = new StringList(csemdrosPINVOKE.MatchedObject_getFeatureList(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getNoOfEMdFValues() {
    uint ret = csemdrosPINVOKE.MatchedObject_getNoOfEMdFValues(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getEnumLabel(int index) {
    string ret = csemdrosPINVOKE.MatchedObject_getEnumLabel(swigCPtr, index);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getObjectTypeName() {
    string ret = csemdrosPINVOKE.MatchedObject_getObjectTypeName(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t getObjectTypeId() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MatchedObject_getObjectTypeId(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void printConsole(EMdFOutput pOut, bool bIsForFullSheaf) {
    csemdrosPINVOKE.MatchedObject_printConsole(swigCPtr, EMdFOutput.getCPtr(pOut), bIsForFullSheaf);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXML(EMdFOutput pOut, bool bIsForFullSheaf) {
    csemdrosPINVOKE.MatchedObject_printXML(swigCPtr, EMdFOutput.getCPtr(pOut), bIsForFullSheaf);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printJSON(EMdFOutput pOut, bool bIsForFullSheaf) {
    csemdrosPINVOKE.MatchedObject_printJSON(swigCPtr, EMdFOutput.getCPtr(pOut), bIsForFullSheaf);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
