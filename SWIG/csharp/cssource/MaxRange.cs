//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class MaxRange : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MaxRange(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaxRange obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MaxRange() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_MaxRange(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MaxRange(SWIGTYPE_p_int_fast64_t max_range) : this(csemdrosPINVOKE.new_MaxRange__SWIG_0(SWIGTYPE_p_int_fast64_t.getCPtr(max_range)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public MaxRange(SWIGTYPE_p_std__string pOTN, SWIGTYPE_p_std__string pSOMFeatureName) : this(csemdrosPINVOKE.new_MaxRange__SWIG_1(SWIGTYPE_p_std__string.getCPtr(pOTN), SWIGTYPE_p_std__string.getCPtr(pSOMFeatureName)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_int_fast64_t getMaxRange() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MaxRange_getMaxRange(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void weed(MQLExecEnv pEE, ref bool bResult) {
    csemdrosPINVOKE.MaxRange_weed(swigCPtr, MQLExecEnv.getCPtr(pEE), ref bResult);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool symbol(MQLExecEnv pEE, ref bool bResult) {
    bool ret = csemdrosPINVOKE.MaxRange_symbol(swigCPtr, MQLExecEnv.getCPtr(pEE), ref bResult);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool type(MQLExecEnv pEE, ref bool bResult) {
    bool ret = csemdrosPINVOKE.MaxRange_type(swigCPtr, MQLExecEnv.getCPtr(pEE), ref bResult);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool monads(MQLExecEnv pEE, ref bool bResult) {
    bool ret = csemdrosPINVOKE.MaxRange_monads(swigCPtr, MQLExecEnv.getCPtr(pEE), ref bResult);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool exec(MQLExecEnv pEE) {
    bool ret = csemdrosPINVOKE.MaxRange_exec(swigCPtr, MQLExecEnv.getCPtr(pEE));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
