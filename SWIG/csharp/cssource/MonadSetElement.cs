//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class MonadSetElement : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MonadSetElement(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MonadSetElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MonadSetElement() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_MonadSetElement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MonadSetElement(SWIGTYPE_p_int_fast64_t first, SWIGTYPE_p_int_fast64_t last) : this(csemdrosPINVOKE.new_MonadSetElement__SWIG_0(SWIGTYPE_p_int_fast64_t.getCPtr(first), SWIGTYPE_p_int_fast64_t.getCPtr(last)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public MonadSetElement(SWIGTYPE_p_int_fast64_t monad) : this(csemdrosPINVOKE.new_MonadSetElement__SWIG_1(SWIGTYPE_p_int_fast64_t.getCPtr(monad)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool subsumes(MonadSetElement other) {
    bool ret = csemdrosPINVOKE.MonadSetElement_subsumes(swigCPtr, MonadSetElement.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equals(MonadSetElement b) {
    bool ret = csemdrosPINVOKE.MonadSetElement_equals(swigCPtr, MonadSetElement.getCPtr(b));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t first() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MonadSetElement_first(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t last() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.MonadSetElement_last(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void offset(SWIGTYPE_p_int_fast64_t m) {
    csemdrosPINVOKE.MonadSetElement_offset(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.MonadSetElement_printConsole(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXML(EMdFOutput pOut) {
    csemdrosPINVOKE.MonadSetElement_printXML(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printJSON(EMdFOutput pOut) {
    csemdrosPINVOKE.MonadSetElement_printJSON(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isBefore(MonadSetElement other) {
    bool ret = csemdrosPINVOKE.MonadSetElement_isBefore__SWIG_0(swigCPtr, MonadSetElement.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isBefore(SWIGTYPE_p_int_fast64_t m) {
    bool ret = csemdrosPINVOKE.MonadSetElement_isBefore__SWIG_1(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
