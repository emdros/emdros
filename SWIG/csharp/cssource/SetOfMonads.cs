//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class SetOfMonads : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SetOfMonads(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SetOfMonads obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SetOfMonads() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_SetOfMonads(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_int_fast64_t first() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.SetOfMonads_first(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t last() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.SetOfMonads_last(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SOMConstIterator const_iterator() {
    SOMConstIterator ret = new SOMConstIterator(csemdrosPINVOKE.SetOfMonads_const_iterator(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__ostream putme(SWIGTYPE_p_std__ostream s) {
    SWIGTYPE_p_std__ostream ret = new SWIGTYPE_p_std__ostream(csemdrosPINVOKE.SetOfMonads_putme(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(s)), false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string toString() {
    string ret = csemdrosPINVOKE.SetOfMonads_toString(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void fromString(string instr) {
    csemdrosPINVOKE.SetOfMonads_fromString(swigCPtr, instr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.SetOfMonads_printConsole(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXML(EMdFOutput pOut) {
    csemdrosPINVOKE.SetOfMonads_printXML(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printJSON(EMdFOutput pOut) {
    csemdrosPINVOKE.SetOfMonads_printJSON(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads() : this(csemdrosPINVOKE.new_SetOfMonads__SWIG_0(), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads(SetOfMonads other) : this(csemdrosPINVOKE.new_SetOfMonads__SWIG_1(SetOfMonads.getCPtr(other)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads(string compactString) : this(csemdrosPINVOKE.new_SetOfMonads__SWIG_2(compactString), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads(string compactString, SWIGTYPE_p_int_fast64_t first_monad) : this(csemdrosPINVOKE.new_SetOfMonads__SWIG_3(compactString, SWIGTYPE_p_int_fast64_t.getCPtr(first_monad)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads(SWIGTYPE_p_int_fast64_t m) : this(csemdrosPINVOKE.new_SetOfMonads__SWIG_4(SWIGTYPE_p_int_fast64_t.getCPtr(m)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads(SWIGTYPE_p_int_fast64_t first, SWIGTYPE_p_int_fast64_t last) : this(csemdrosPINVOKE.new_SetOfMonads__SWIG_5(SWIGTYPE_p_int_fast64_t.getCPtr(first), SWIGTYPE_p_int_fast64_t.getCPtr(last)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool part_of(SetOfMonads other) {
    bool ret = csemdrosPINVOKE.SetOfMonads_part_of(swigCPtr, SetOfMonads.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool starts_in(SetOfMonads other) {
    bool ret = csemdrosPINVOKE.SetOfMonads_starts_in(swigCPtr, SetOfMonads.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void unionWith(SetOfMonads other) {
    csemdrosPINVOKE.SetOfMonads_unionWith(swigCPtr, SetOfMonads.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void difference(SetOfMonads other) {
    csemdrosPINVOKE.SetOfMonads_difference(swigCPtr, SetOfMonads.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SetOfMonads intersect(SetOfMonads Aset, SetOfMonads Bset) {
    SetOfMonads ret = new SetOfMonads(csemdrosPINVOKE.SetOfMonads_intersect(SetOfMonads.getCPtr(Aset), SetOfMonads.getCPtr(Bset)), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool overlap(SetOfMonads Aset, SetOfMonads Bset) {
    bool ret = csemdrosPINVOKE.SetOfMonads_overlap(SetOfMonads.getCPtr(Aset), SetOfMonads.getCPtr(Bset));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addMSE(MonadSetElement mse) {
    csemdrosPINVOKE.SetOfMonads_addMSE(swigCPtr, MonadSetElement.getCPtr(mse));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(SWIGTYPE_p_int_fast64_t monad) {
    csemdrosPINVOKE.SetOfMonads_add__SWIG_0(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(monad));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void add(SWIGTYPE_p_int_fast64_t first, SWIGTYPE_p_int_fast64_t last) {
    csemdrosPINVOKE.SetOfMonads_add__SWIG_1(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(first), SWIGTYPE_p_int_fast64_t.getCPtr(last));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool equals(SetOfMonads other) {
    bool ret = csemdrosPINVOKE.SetOfMonads_equals(swigCPtr, SetOfMonads.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t getCardinality() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.SetOfMonads_getCardinality(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isMemberOf(SWIGTYPE_p_int_fast64_t m) {
    bool ret = csemdrosPINVOKE.SetOfMonads_isMemberOf__SWIG_0(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isMemberOf(SWIGTYPE_p_int_fast64_t m, SOMConstIterator hint_it) {
    bool ret = csemdrosPINVOKE.SetOfMonads_isMemberOf__SWIG_1(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(m), SOMConstIterator.getCPtr(hint_it));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasMonadsInRange(SWIGTYPE_p_int_fast64_t first_m, SWIGTYPE_p_int_fast64_t last_m) {
    bool ret = csemdrosPINVOKE.SetOfMonads_hasMonadsInRange(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(first_m), SWIGTYPE_p_int_fast64_t.getCPtr(last_m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasLargerGap(SWIGTYPE_p_int_fast64_t than_this) {
    bool ret = csemdrosPINVOKE.SetOfMonads_hasLargerGap(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(than_this));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEmpty() {
    bool ret = csemdrosPINVOKE.SetOfMonads_isEmpty(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeMSE(MonadSetElement mse) {
    csemdrosPINVOKE.SetOfMonads_removeMSE(swigCPtr, MonadSetElement.getCPtr(mse));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool gapExists(SWIGTYPE_p_int_fast64_t Sm, SWIGTYPE_p_int_fast64_t m) {
    bool ret = csemdrosPINVOKE.SetOfMonads_gapExists(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(Sm), SWIGTYPE_p_int_fast64_t.getCPtr(m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void offset(SWIGTYPE_p_int_fast64_t m) {
    csemdrosPINVOKE.SetOfMonads_offset(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(m));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    csemdrosPINVOKE.SetOfMonads_clear(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SetOfMonads fillInsertRange(SWIGTYPE_p_int_fast64_t first, SWIGTYPE_p_int_fast64_t last) {
    SetOfMonads ret = new SetOfMonads(csemdrosPINVOKE.SetOfMonads_fillInsertRange(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(first), SWIGTYPE_p_int_fast64_t.getCPtr(last)), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string toCompactString() {
    string ret = csemdrosPINVOKE.SetOfMonads_toCompactString(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void fromCompactString(string inStr) {
    csemdrosPINVOKE.SetOfMonads_fromCompactString(swigCPtr, inStr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public string toCompactStringFM() {
    string ret = csemdrosPINVOKE.SetOfMonads_toCompactStringFM(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void fromCompactStringFM(string inStr, SWIGTYPE_p_int_fast64_t first_monad) {
    csemdrosPINVOKE.SetOfMonads_fromCompactStringFM(swigCPtr, inStr, SWIGTYPE_p_int_fast64_t.getCPtr(first_monad));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasOnlyOneMSE() {
    bool ret = csemdrosPINVOKE.SetOfMonads_hasOnlyOneMSE(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SetOfMonads fillGaps(SWIGTYPE_p_int_fast64_t min_gap) {
    SetOfMonads ret = new SetOfMonads(csemdrosPINVOKE.SetOfMonads_fillGaps(swigCPtr, SWIGTYPE_p_int_fast64_t.getCPtr(min_gap)), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
