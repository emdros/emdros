//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class Straw : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Straw(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Straw obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Straw() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_Straw(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Straw(Straw other) : this(csemdrosPINVOKE.new_Straw(Straw.getCPtr(other)), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public StrawConstIterator const_iterator() {
    StrawConstIterator ret = new StrawConstIterator(csemdrosPINVOKE.Straw_const_iterator(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t getLast() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.Straw_getLast(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void printConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.Straw_printConsole(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXML(EMdFOutput pOut) {
    csemdrosPINVOKE.Straw_printXML(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printJSON(EMdFOutput pOut) {
    csemdrosPINVOKE.Straw_printJSON(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_int_fast64_t countObjects(bool bUseOnlyFocusObjects) {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.Straw_countObjects(swigCPtr, bUseOnlyFocusObjects), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t countObjectsFromObjectType(string object_type_name, bool bUseOnlyFocusObjects) {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.Straw_countObjectsFromObjectType(swigCPtr, object_type_name, bUseOnlyFocusObjects), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_int_fast64_t countStraws() {
    SWIGTYPE_p_int_fast64_t ret = new SWIGTYPE_p_int_fast64_t(csemdrosPINVOKE.Straw_countStraws(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getSOM(SetOfMonads som, bool bUseOnlyFocusObjects) {
    csemdrosPINVOKE.Straw_getSOM(swigCPtr, SetOfMonads.getCPtr(som), bUseOnlyFocusObjects);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void harvestMarks(SWIGTYPE_p_String2SOMMap result, bool bUseSingleMarks) {
    csemdrosPINVOKE.Straw_harvestMarks(swigCPtr, SWIGTYPE_p_String2SOMMap.getCPtr(result), bUseSingleMarks);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
