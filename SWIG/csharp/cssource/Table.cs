//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class Table : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Table(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Table obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Table() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csemdrosPINVOKE.delete_Table(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Table() : this(csemdrosPINVOKE.new_Table(), true) {
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void append(string str) {
    csemdrosPINVOKE.Table_append(swigCPtr, str);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void newline() {
    csemdrosPINVOKE.Table_newline(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void appendHeader(string header_name, TableColumnType tc_type, string enum_type) {
    csemdrosPINVOKE.Table_appendHeader__SWIG_0(swigCPtr, header_name, (int)tc_type, enum_type);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void appendHeader(string header_name, TableColumnType tc_type) {
    csemdrosPINVOKE.Table_appendHeader__SWIG_1(swigCPtr, header_name, (int)tc_type);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateRow(TableIterator i, string new_value, int column_index) {
    csemdrosPINVOKE.Table_updateRow(swigCPtr, TableIterator.getCPtr(i), new_value, column_index);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void startNewRow() {
    csemdrosPINVOKE.Table_startNewRow(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public TableIterator iterator() {
    TableIterator ret = new TableIterator(csemdrosPINVOKE.Table_iterator(swigCPtr), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TableIterator find(string str, int column_index, bool bCompareCaseInsensitively) {
    TableIterator ret = new TableIterator(csemdrosPINVOKE.Table_find__SWIG_0(swigCPtr, str, column_index, bCompareCaseInsensitively), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TableIterator find(string str, int column_index) {
    TableIterator ret = new TableIterator(csemdrosPINVOKE.Table_find__SWIG_1(swigCPtr, str, column_index), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TableIterator find(string str1, int column_index1, string str2, int column_index2, bool bCompareCaseInsensitively) {
    TableIterator ret = new TableIterator(csemdrosPINVOKE.Table_find__SWIG_2(swigCPtr, str1, column_index1, str2, column_index2, bCompareCaseInsensitively), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public TableIterator find(string str1, int column_index1, string str2, int column_index2) {
    TableIterator ret = new TableIterator(csemdrosPINVOKE.Table_find__SWIG_3(swigCPtr, str1, column_index1, str2, column_index2), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void erase(TableIterator d) {
    csemdrosPINVOKE.Table_erase(swigCPtr, TableIterator.getCPtr(d));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear() {
    csemdrosPINVOKE.Table_clear(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getColumn(TableIterator i, int column_index) {
    string ret = csemdrosPINVOKE.Table_getColumn(swigCPtr, TableIterator.getCPtr(i), column_index);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void printConsole(EMdFOutput pOut) {
    csemdrosPINVOKE.Table_printConsole(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printXML(EMdFOutput pOut) {
    csemdrosPINVOKE.Table_printXML(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public void printJSON(EMdFOutput pOut) {
    csemdrosPINVOKE.Table_printJSON(swigCPtr, EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void printDTD(EMdFOutput pOut) {
    csemdrosPINVOKE.Table_printDTD(EMdFOutput.getCPtr(pOut));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public int size() {
    int ret = csemdrosPINVOKE.Table_size(swigCPtr);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equals(Table other) {
    bool ret = csemdrosPINVOKE.Table_equals(swigCPtr, Table.getCPtr(other));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
