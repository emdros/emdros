//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Emdros {

public class csemdros {
  public static int hash_djb2(string instr, int hashtable_size) {
    int ret = csemdrosPINVOKE.hash_djb2(instr, hashtable_size);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string getStringFromeComparisonOp(eComparisonOp op) {
    string ret = csemdrosPINVOKE.getStringFromeComparisonOp((int)op);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool mqlExecuteFile(MQLExecEnv pEE, string filename, ref bool bResult, bool bPrintResult, bool bReportError, MQLResultCallback pCallback) {
    bool ret = csemdrosPINVOKE.mqlExecuteFile__SWIG_0(MQLExecEnv.getCPtr(pEE), filename, ref bResult, bPrintResult, bReportError, MQLResultCallback.getCPtr(pCallback));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool mqlExecuteFile(MQLExecEnv pEE, string filename, ref bool bResult, bool bPrintResult, bool bReportError) {
    bool ret = csemdrosPINVOKE.mqlExecuteFile__SWIG_1(MQLExecEnv.getCPtr(pEE), filename, ref bResult, bPrintResult, bReportError);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool mqlExecuteString(MQLExecEnv pEE, string input, ref bool bResult, bool bPrintResult, bool bReportError, MQLResultCallback pCallback) {
    bool ret = csemdrosPINVOKE.mqlExecuteString__SWIG_0(MQLExecEnv.getCPtr(pEE), input, ref bResult, bPrintResult, bReportError, MQLResultCallback.getCPtr(pCallback));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool mqlExecuteString(MQLExecEnv pEE, string input, ref bool bResult, bool bPrintResult, bool bReportError) {
    bool ret = csemdrosPINVOKE.mqlExecuteString__SWIG_1(MQLExecEnv.getCPtr(pEE), input, ref bResult, bPrintResult, bReportError);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string render_objects(EmdrosEnv pEnv, string db_name, SWIGTYPE_p_JSONValue pFetchInfo, string stylesheet, SWIGTYPE_p_int_fast64_t first_monad, SWIGTYPE_p_int_fast64_t last_monad, ref bool bResult) {
    string ret = csemdrosPINVOKE.render_objects__SWIG_0(EmdrosEnv.getCPtr(pEnv), db_name, SWIGTYPE_p_JSONValue.getCPtr(pFetchInfo), stylesheet, SWIGTYPE_p_int_fast64_t.getCPtr(first_monad), SWIGTYPE_p_int_fast64_t.getCPtr(last_monad), ref bResult);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string render_objects(EmdrosEnv pEnv, string db_name, string JSON_stylesheet, string stylesheet, SWIGTYPE_p_int_fast64_t first_monad, SWIGTYPE_p_int_fast64_t last_monad, ref bool bResult) {
    string ret = csemdrosPINVOKE.render_objects__SWIG_1(EmdrosEnv.getCPtr(pEnv), db_name, JSON_stylesheet, stylesheet, SWIGTYPE_p_int_fast64_t.getCPtr(first_monad), SWIGTYPE_p_int_fast64_t.getCPtr(last_monad), ref bResult);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RenderXML(string xml, SWIGTYPE_p_JSONValue pTopStyleSheet, string render_stylesheet, ref bool bProcessOK, string strError) {
    string ret = csemdrosPINVOKE.RenderXML(xml, SWIGTYPE_p_JSONValue.getCPtr(pTopStyleSheet), render_stylesheet, ref bProcessOK, strError);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string utf8ToEntity(string inHTML) {
    string ret = csemdrosPINVOKE.utf8ToEntity(inHTML);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void process_comma_separated_string_list(string comma_separated_string, SWIGTYPE_p_std__listT_std__string_t string_list) {
    csemdrosPINVOKE.process_comma_separated_string_list(comma_separated_string, SWIGTYPE_p_std__listT_std__string_t.getCPtr(string_list));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SetOfMonads fill_with_largest_proximity(SetOfMonads SOM, SWIGTYPE_p_int_fast64_t largest_proximity, SWIGTYPE_p_int_fast64_t first_monad, SWIGTYPE_p_int_fast64_t last_monad) {
    SetOfMonads ret = new SetOfMonads(csemdrosPINVOKE.fill_with_largest_proximity(SetOfMonads.getCPtr(SOM), SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), SWIGTYPE_p_int_fast64_t.getCPtr(first_monad), SWIGTYPE_p_int_fast64_t.getCPtr(last_monad)), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string make_string_feature_comparison(string feature_name, string feature_value) {
    string ret = csemdrosPINVOKE.make_string_feature_comparison(feature_name, feature_value);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactory(StringList filter_names_and_parameters) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactory(StringList.getCPtr(filter_names_and_parameters));
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactoryJSONValue(SWIGTYPE_p_JSONValue pJSONObject, ref bool bResult, string error_message, string filter_name) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactoryJSONValue__SWIG_0(SWIGTYPE_p_JSONValue.getCPtr(pJSONObject), ref bResult, error_message, filter_name);
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactoryJSONValue(SWIGTYPE_p_JSONValue pJSONObject, ref bool bResult, string error_message) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactoryJSONValue__SWIG_1(SWIGTYPE_p_JSONValue.getCPtr(pJSONObject), ref bResult, error_message);
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactoryJSONString(string JSON_string, ref bool bResult, string error_message, string filter_name) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactoryJSONString__SWIG_0(JSON_string, ref bResult, error_message, filter_name);
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactoryJSONString(string JSON_string, ref bool bResult, string error_message) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactoryJSONString__SWIG_1(JSON_string, ref bResult, error_message);
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactoryJSONFileName(string JSON_filename, ref bool bResult, string error_message, string filter_name) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactoryJSONFileName__SWIG_0(JSON_filename, ref bResult, error_message, filter_name);
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static EmdrosFTSStringFilter stringFilterFactoryJSONFileName(string JSON_filename, ref bool bResult, string error_message) {
    global::System.IntPtr cPtr = csemdrosPINVOKE.stringFilterFactoryJSONFileName__SWIG_1(JSON_filename, ref bResult, error_message);
    EmdrosFTSStringFilter ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmdrosFTSStringFilter(cPtr, false);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool harvestFTS(EmdrosEnv pEnv, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list, SetOfMonads substrate, StringList token_list, SWIGTYPE_p_int_fast64_t largest_proximity, bool bReduceToSingleHitsWithinBookcases, string error_message, BookcaseHitList result) {
    bool ret = csemdrosPINVOKE.harvestFTS(EmdrosEnv.getCPtr(pEnv), bookcase_OTN, indexed_OTN, indexed_feature_name_list, SetOfMonads.getCPtr(substrate), StringList.getCPtr(token_list), SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), bReduceToSingleHitsWithinBookcases, error_message, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool harvestFTS_with_version(EmdrosEnv pEnv, int fts_engine_version, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list, SetOfMonads substrate, StringList token_list, SWIGTYPE_p_int_fast64_t largest_proximity, bool bReduceToSingleHitsWithinBookcases, string error_message, BookcaseHitList result) {
    bool ret = csemdrosPINVOKE.harvestFTS_with_version(EmdrosEnv.getCPtr(pEnv), fts_engine_version, bookcase_OTN, indexed_OTN, indexed_feature_name_list, SetOfMonads.getCPtr(substrate), StringList.getCPtr(token_list), SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), bReduceToSingleHitsWithinBookcases, error_message, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool harvestFTSNonGoogle(EmdrosEnv pEnv, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list, SetOfMonads substrate, string query, SWIGTYPE_p_int_fast64_t largest_proximity, EmdrosFTSStringFilter pStringFilterList, bool bReduceToSingleHitsWithinBookcases, string error_message, BookcaseHitList result) {
    bool ret = csemdrosPINVOKE.harvestFTSNonGoogle(EmdrosEnv.getCPtr(pEnv), bookcase_OTN, indexed_OTN, indexed_feature_name_list, SetOfMonads.getCPtr(substrate), query, SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), EmdrosFTSStringFilter.getCPtr(pStringFilterList), bReduceToSingleHitsWithinBookcases, error_message, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool harvestFTSNonGoogle_with_version(EmdrosEnv pEnv, int fts_engine_version, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list, SetOfMonads substrate, string query, SWIGTYPE_p_int_fast64_t largest_proximity, EmdrosFTSStringFilter pStringFilterList, bool bReduceToSingleHitsWithinBookcases, string error_message, BookcaseHitList result) {
    bool ret = csemdrosPINVOKE.harvestFTSNonGoogle_with_version(EmdrosEnv.getCPtr(pEnv), fts_engine_version, bookcase_OTN, indexed_OTN, indexed_feature_name_list, SetOfMonads.getCPtr(substrate), query, SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), EmdrosFTSStringFilter.getCPtr(pStringFilterList), bReduceToSingleHitsWithinBookcases, error_message, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool harvestFTSGoogle(EmdrosEnv pEnv, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list, SetOfMonads substrate, string query, SWIGTYPE_p_int_fast64_t largest_proximity, EmdrosFTSStringFilter pStringFilterList, bool bReduceToSingleHitsWithinBookcases, string error_message, BookcaseHitList result) {
    bool ret = csemdrosPINVOKE.harvestFTSGoogle(EmdrosEnv.getCPtr(pEnv), bookcase_OTN, indexed_OTN, indexed_feature_name_list, SetOfMonads.getCPtr(substrate), query, SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), EmdrosFTSStringFilter.getCPtr(pStringFilterList), bReduceToSingleHitsWithinBookcases, error_message, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool harvestFTSGoogle_with_version(EmdrosEnv pEnv, int fts_engine_version, string bookcase_OTN, string indexed_OTN, string indexed_feature_name_list, SetOfMonads substrate, string query, SWIGTYPE_p_int_fast64_t largest_proximity, EmdrosFTSStringFilter pStringFilterList, bool bReduceToSingleHitsWithinBookcases, string error_message, BookcaseHitList result) {
    bool ret = csemdrosPINVOKE.harvestFTSGoogle_with_version(EmdrosEnv.getCPtr(pEnv), fts_engine_version, bookcase_OTN, indexed_OTN, indexed_feature_name_list, SetOfMonads.getCPtr(substrate), query, SWIGTYPE_p_int_fast64_t.getCPtr(largest_proximity), EmdrosFTSStringFilter.getCPtr(pStringFilterList), bReduceToSingleHitsWithinBookcases, error_message, BookcaseHitList.getCPtr(result));
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static StringList harvestFTSTokenize(string input_string, EmdrosFTSStringFilter pStringFilterList) {
    StringList ret = new StringList(csemdrosPINVOKE.harvestFTSTokenize(input_string, EmdrosFTSStringFilter.getCPtr(pStringFilterList)), true);
    if (csemdrosPINVOKE.SWIGPendingException.Pending) throw csemdrosPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int HAVE_CXX11 = csemdrosPINVOKE.HAVE_CXX11_get();
  public static readonly int USE_POSTGRESQL = csemdrosPINVOKE.USE_POSTGRESQL_get();
  public static readonly int USE_MYSQL = csemdrosPINVOKE.USE_MYSQL_get();
  public static readonly int USE_SQLITE3 = csemdrosPINVOKE.USE_SQLITE3_get();
  public static readonly int USE_BPT = csemdrosPINVOKE.USE_BPT_get();
  public static readonly int USE_BPT2 = csemdrosPINVOKE.USE_BPT2_get();
  public static readonly int LINUX = csemdrosPINVOKE.LINUX_get();
  public static readonly int SUN = csemdrosPINVOKE.SUN_get();
  public static readonly int USE_SYSTEM_SQLITE3 = csemdrosPINVOKE.USE_SYSTEM_SQLITE3_get();
  public static readonly int USE_SYSTEM_ZLIB = csemdrosPINVOKE.USE_SYSTEM_ZLIB_get();
  public static readonly int USE_SYSTEM_PCRE2 = csemdrosPINVOKE.USE_SYSTEM_PCRE2_get();
  public static readonly int SEQUENCE_OBJECT_ID_DS = csemdrosPINVOKE.SEQUENCE_OBJECT_ID_DS_get();
  public static readonly int SEQUENCE_TYPE_IDS = csemdrosPINVOKE.SEQUENCE_TYPE_IDS_get();
  public static readonly int SEQUENCE_OTHER_IDS = csemdrosPINVOKE.SEQUENCE_OTHER_IDS_get();
  public static readonly int SEQUENCE_START_UNPARENTHESIZED = csemdrosPINVOKE.SEQUENCE_START_UNPARENTHESIZED_get();
  public static readonly int SEQUENCE_START = csemdrosPINVOKE.SEQUENCE_START_get();
  public static readonly int SEQUENCE_TYPE_IDS_FREE_LOWER_BITS_UNPARENTHESIZED = csemdrosPINVOKE.SEQUENCE_TYPE_IDS_FREE_LOWER_BITS_UNPARENTHESIZED_get();
  public static readonly int SEQUENCE_TYPE_IDS_FREE_LOWER_BITS = csemdrosPINVOKE.SEQUENCE_TYPE_IDS_FREE_LOWER_BITS_get();
  public static readonly int MIN_ENUM_TYPE_ID = csemdrosPINVOKE.MIN_ENUM_TYPE_ID_get();
  public static readonly int MAX_DBNAME_CHARS = csemdrosPINVOKE.MAX_DBNAME_CHARS_get();
  public static readonly int MAX_IDENTIFIER_CHARS = csemdrosPINVOKE.MAX_IDENTIFIER_CHARS_get();
  public static readonly int MAX_TEXT_INDEX_CHARS = csemdrosPINVOKE.MAX_TEXT_INDEX_CHARS_get();
  public static readonly int FEATURE_TYPE_TYPE_MASK = csemdrosPINVOKE.FEATURE_TYPE_TYPE_MASK_get();
  public static readonly int FEATURE_TYPE_INTEGER = csemdrosPINVOKE.FEATURE_TYPE_INTEGER_get();
  public static readonly int FEATURE_TYPE_STRING = csemdrosPINVOKE.FEATURE_TYPE_STRING_get();
  public static readonly int FEATURE_TYPE_ASCII = csemdrosPINVOKE.FEATURE_TYPE_ASCII_get();
  public static readonly int FEATURE_TYPE_ID_D = csemdrosPINVOKE.FEATURE_TYPE_ID_D_get();
  public static readonly int FEATURE_TYPE_ENUM = csemdrosPINVOKE.FEATURE_TYPE_ENUM_get();
  public static readonly int FEATURE_TYPE_SET_OF_MONADS = csemdrosPINVOKE.FEATURE_TYPE_SET_OF_MONADS_get();
  public static readonly int FEATURE_TYPE_LIST_OF_INTEGER = csemdrosPINVOKE.FEATURE_TYPE_LIST_OF_INTEGER_get();
  public static readonly int FEATURE_TYPE_LIST_OF_ID_D = csemdrosPINVOKE.FEATURE_TYPE_LIST_OF_ID_D_get();
  public static readonly int FEATURE_TYPE_LIST_OF_ENUM = csemdrosPINVOKE.FEATURE_TYPE_LIST_OF_ENUM_get();
  public static readonly int FEATURE_TYPE_FLAGS_MASK = csemdrosPINVOKE.FEATURE_TYPE_FLAGS_MASK_get();
  public static readonly int FEATURE_TYPE_WITH_INDEX = csemdrosPINVOKE.FEATURE_TYPE_WITH_INDEX_get();
  public static readonly int FEATURE_TYPE_FROM_SET = csemdrosPINVOKE.FEATURE_TYPE_FROM_SET_get();
  public static readonly int NIL = csemdrosPINVOKE.NIL_get();
  public static readonly string NIL_AS_STRING = csemdrosPINVOKE.NIL_AS_STRING_get();
  public static readonly string NIL_AS_VISIBLE_STRING = csemdrosPINVOKE.NIL_AS_VISIBLE_STRING_get();
  public static readonly int OBJECT_TYPE_POW_M = csemdrosPINVOKE.OBJECT_TYPE_POW_M_get();
  public static readonly string DEFAULT_LIST_DELIMITER = csemdrosPINVOKE.DEFAULT_LIST_DELIMITER_get();
  public static readonly int OT_RANGE_MASK = csemdrosPINVOKE.OT_RANGE_MASK_get();
  public static readonly int OT_WITH_MULTIPLE_RANGE_OBJECTS = csemdrosPINVOKE.OT_WITH_MULTIPLE_RANGE_OBJECTS_get();
  public static readonly int OT_WITH_SINGLE_RANGE_OBJECTS = csemdrosPINVOKE.OT_WITH_SINGLE_RANGE_OBJECTS_get();
  public static readonly int OT_WITH_SINGLE_MONAD_OBJECTS = csemdrosPINVOKE.OT_WITH_SINGLE_MONAD_OBJECTS_get();
  public static readonly int OT_MONAD_UNIQUENESS_MASK = csemdrosPINVOKE.OT_MONAD_UNIQUENESS_MASK_get();
  public static readonly int OT_WITHOUT_UNIQUE_MONADS = csemdrosPINVOKE.OT_WITHOUT_UNIQUE_MONADS_get();
  public static readonly int OT_HAVING_UNIQUE_FIRST_MONADS = csemdrosPINVOKE.OT_HAVING_UNIQUE_FIRST_MONADS_get();
  public static readonly int OT_HAVING_UNIQUE_FIRST_AND_LAST_MONADS = csemdrosPINVOKE.OT_HAVING_UNIQUE_FIRST_AND_LAST_MONADS_get();
  public static readonly int EMDROS_VERSION_PRE_1_1_0 = csemdrosPINVOKE.EMDROS_VERSION_PRE_1_1_0_get();
  public static readonly int EMDROS_VERSION_1_1_0_TO_1_1_4 = csemdrosPINVOKE.EMDROS_VERSION_1_1_0_TO_1_1_4_get();
  public static readonly int EMDROS_VERSION_1_1_5_TO_1_1_7 = csemdrosPINVOKE.EMDROS_VERSION_1_1_5_TO_1_1_7_get();
  public static readonly int EMDROS_VERSION_1_1_8_TO_1_1_20 = csemdrosPINVOKE.EMDROS_VERSION_1_1_8_TO_1_1_20_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_01_TO_1_2_0_PRE_58 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_01_TO_1_2_0_PRE_58_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_59_TO_1_2_0_PRE_79 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_59_TO_1_2_0_PRE_79_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_80_TO_1_2_0_PRE_85 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_80_TO_1_2_0_PRE_85_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_86_TO_1_2_0_PRE_96 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_86_TO_1_2_0_PRE_96_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_97_TO_1_2_0_PRE_151 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_97_TO_1_2_0_PRE_151_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_152_TO_1_2_0_PRE_153 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_152_TO_1_2_0_PRE_153_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_154_TO_1_2_0_PRE198 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_154_TO_1_2_0_PRE198_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_199_TO_1_2_0_PRE207 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_199_TO_1_2_0_PRE207_get();
  public static readonly int EMDROS_VERSION_1_2_0_PRE_208 = csemdrosPINVOKE.EMDROS_VERSION_1_2_0_PRE_208_get();
  public static readonly int EMDROS_VERSION_CURRENT = csemdrosPINVOKE.EMDROS_VERSION_CURRENT_get();
  public static readonly SWIGTYPE_p_std__ostream KSTDOUT = new SWIGTYPE_p_std__ostream(csemdrosPINVOKE.KSTDOUT_get(), false);
  public static readonly SWIGTYPE_p_std__ostream KSTDERR = new SWIGTYPE_p_std__ostream(csemdrosPINVOKE.KSTDERR_get(), false);
  public static readonly int COMPILER_STAGE_NONE = csemdrosPINVOKE.COMPILER_STAGE_NONE_get();
  public static readonly int COMPILER_STAGE_PARSE = csemdrosPINVOKE.COMPILER_STAGE_PARSE_get();
  public static readonly int COMPILER_STAGE_WEED = csemdrosPINVOKE.COMPILER_STAGE_WEED_get();
  public static readonly int COMPILER_STAGE_SYMBOL = csemdrosPINVOKE.COMPILER_STAGE_SYMBOL_get();
  public static readonly int COMPILER_STAGE_TYPE = csemdrosPINVOKE.COMPILER_STAGE_TYPE_get();
  public static readonly int COMPILER_STAGE_MONADS = csemdrosPINVOKE.COMPILER_STAGE_MONADS_get();
  public static readonly int COMPILER_STAGE_EXEC = csemdrosPINVOKE.COMPILER_STAGE_EXEC_get();
}

}
