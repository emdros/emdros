++++ query newdb Create ASV Genesis 1
//////////////////////////////////////////////////// 
// 
// Create enumerations
// 
//////////////////////////////////////////////////// 

// Enumeration divtype_e
CREATE ENUMERATION divtype_e = {
  book = 2,
  DEFAULT bookGroup = 1,
  chapter = 3
}
GO

// Enumeration bible_part_e
CREATE ENUMERATION bible_part_e = {
  Apocrypha = 2,
  NT = 3,
  None = 4,
  DEFAULT OT = 1
}
GO

// Enumeration boolean_t
CREATE ENUMERATION boolean_t = {
  DEFAULT false = 0,
  true = 1
}
GO

// Enumeration language_e
CREATE ENUMERATION language_e = {
  danish = 5,
  english = 3,
  german = 4,
  greek = 2,
  DEFAULT hebrew = 1,
  latin = 8,
  norwegian = 7,
  swedish = 6
}
GO

// Enumeration dbtype_e
CREATE ENUMERATION dbtype_e = {
  DEFAULT bible = 1,
  commentary = 2,
  dictionary = 3,
  map = 5,
  readingplan = 4
}
GO



//////////////////////////////////////////////////// 
// 
// Create object types
// 
//////////////////////////////////////////////////// 

// Object type book
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[book
  osisid : string DEFAULT "";
  xmlindex : integer DEFAULT 0;
]
GO

// Object type chapter
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[chapter
  chapter : integer DEFAULT 0;
  osisbook : string FROM SET  DEFAULT "";
  osisid : string DEFAULT "";
  xmlindex : integer DEFAULT 0;
]
GO

// Object type verse
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[verse
  chapter : integer DEFAULT 0;
  osisbook : string FROM SET  DEFAULT "";
  osisid : string WITH INDEX DEFAULT "";
  verse : integer DEFAULT 0;
  xmlindex : integer DEFAULT 0;
]
GO

// Object type bold
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[bold
  xmlindex : integer DEFAULT 0;
]
GO

// Object type italics
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[italics
  xmlindex : integer DEFAULT 0;
]
GO

// Object type token
CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[token
  surface_stripped_lowcase : string DEFAULT "";
  wholesurface : string DEFAULT "";
  xmlindex : integer DEFAULT 0;
]
GO

// Object type note
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[note
  xmlindex : integer DEFAULT 0;
]
GO

// Object type transadd
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[transadd
  xmlindex : integer DEFAULT 0;
]
GO

// Object type linegroup
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[linegroup
  xmlindex : integer DEFAULT 0;
]
GO

// Object type line
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[line
  xmlindex : integer DEFAULT 0;
]
GO

// Object type br
CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
[br
  xmlindex : integer DEFAULT 0;
]
GO

// Object type paragraph
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[paragraph
  xmlindex : integer DEFAULT 0;
]
GO

// Object type title
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[title
  divtype : divtype_e DEFAULT bookGroup;
  xmlindex : integer DEFAULT 0;
]
GO

// Object type db
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[db
  bible_parts : list of bible_part_e;
  dbname : string DEFAULT "";
  dbtype : dbtype_e DEFAULT bible;
  friendly_dbname : string DEFAULT "";
  fts_search : boolean_t DEFAULT false;
  language : language_e DEFAULT hebrew;
  priority : integer DEFAULT 0;
]
GO

// Object type bookcase_verse_index_token_mdf_wholesurface_index
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[bookcase_verse_index_token_mdf_wholesurface_index
  feature_value : string WITH INDEX  DEFAULT "";
  monad_set : string DEFAULT "";
]
GO



//////////////////////////////////////////////////// 
// 
// Create object data
// 
//////////////////////////////////////////////////// 



//////////////////////////////////////////////////// 
// 
// Create object data for object type book
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[book] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[book] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type chapter
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[chapter] GO

CREATE OBJECT
FROM MONADS= { 8-792 } 
WITH ID_D=1778 [chapter
chapter:=1;
osisbook:="Gen";
osisid:="Gen.1";
xmlindex:=11;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[chapter] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type verse
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[verse] GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=33436 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.1 ";
verse:=1;
xmlindex:=13;
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=33437 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.2 ";
verse:=2;
xmlindex:=24;
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=33438 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.3 ";
verse:=3;
xmlindex:=53;
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=33439 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.4 ";
verse:=4;
xmlindex:=65;
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=33440 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.5 ";
verse:=5;
xmlindex:=83;
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=33441 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.6 ";
verse:=6;
xmlindex:=107;
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=33442 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.7 ";
verse:=7;
xmlindex:=131;
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=33443 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.8 ";
verse:=8;
xmlindex:=158;
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=33444 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.9 ";
verse:=9;
xmlindex:=177;
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=33445 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.10 ";
verse:=10;
xmlindex:=203;
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=33446 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.11 ";
verse:=11;
xmlindex:=228;
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=33447 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.12 ";
verse:=12;
xmlindex:=261;
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=33448 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.13 ";
verse:=13;
xmlindex:=293;
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=33449 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.14 ";
verse:=14;
xmlindex:=306;
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=33450 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.15 ";
verse:=15;
xmlindex:=340;
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=33451 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.16 ";
verse:=16;
xmlindex:=362;
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=33452 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.17 ";
verse:=17;
xmlindex:=391;
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=33453 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.18 ";
verse:=18;
xmlindex:=407;
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=33454 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.19 ";
verse:=19;
xmlindex:=433;
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=33455 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.20 ";
verse:=20;
xmlindex:=446;
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=33456 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.21 ";
verse:=21;
xmlindex:=472;
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=33457 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.22 ";
verse:=22;
xmlindex:=506;
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=33458 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.23 ";
verse:=23;
xmlindex:=530;
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=33459 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.24 ";
verse:=24;
xmlindex:=543;
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=33460 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.25 ";
verse:=25;
xmlindex:=573;
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=33461 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.26 ";
verse:=26;
xmlindex:=608;
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=33462 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.27 ";
verse:=27;
xmlindex:=659;
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=33463 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.28 ";
verse:=28;
xmlindex:=682;
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=33464 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.29 ";
verse:=29;
xmlindex:=729;
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=33465 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.30 ";
verse:=30;
xmlindex:=771;
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=33466 [verse
chapter:=1;
osisbook:="Gen";
osisid:=" Gen.1.31 ";
verse:=31;
xmlindex:=811;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[verse] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type bold
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[bold] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[bold] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type italics
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[italics] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[italics] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type token
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[token] GO

CREATE OBJECT
FROM MONADS= { 1 } 
WITH ID_D=64538 [token
surface_stripped_lowcase:="the";
wholesurface:="The ";
xmlindex:=3;
]
GO

CREATE OBJECT
FROM MONADS= { 2 } 
WITH ID_D=64539 [token
surface_stripped_lowcase:="first";
wholesurface:="First ";
xmlindex:=4;
]
GO

CREATE OBJECT
FROM MONADS= { 3 } 
WITH ID_D=64540 [token
surface_stripped_lowcase:="book";
wholesurface:="Book ";
xmlindex:=5;
]
GO

CREATE OBJECT
FROM MONADS= { 4 } 
WITH ID_D=64541 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=6;
]
GO

CREATE OBJECT
FROM MONADS= { 5 } 
WITH ID_D=64542 [token
surface_stripped_lowcase:="moses";
wholesurface:="Moses, ";
xmlindex:=7;
]
GO

CREATE OBJECT
FROM MONADS= { 6 } 
WITH ID_D=64543 [token
surface_stripped_lowcase:="called";
wholesurface:="called ";
xmlindex:=8;
]
GO

CREATE OBJECT
FROM MONADS= { 7 } 
WITH ID_D=64544 [token
surface_stripped_lowcase:="genesis";
wholesurface:="Genesis ";
xmlindex:=9;
]
GO

CREATE OBJECT
FROM MONADS= { 8 } 
WITH ID_D=64545 [token
surface_stripped_lowcase:="in";
wholesurface:="In ";
xmlindex:=14;
]
GO

CREATE OBJECT
FROM MONADS= { 9 } 
WITH ID_D=64546 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=15;
]
GO

CREATE OBJECT
FROM MONADS= { 10 } 
WITH ID_D=64547 [token
surface_stripped_lowcase:="beginning";
wholesurface:="beginning ";
xmlindex:=16;
]
GO

CREATE OBJECT
FROM MONADS= { 11 } 
WITH ID_D=64548 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=17;
]
GO

CREATE OBJECT
FROM MONADS= { 12 } 
WITH ID_D=64549 [token
surface_stripped_lowcase:="created";
wholesurface:="created ";
xmlindex:=18;
]
GO

CREATE OBJECT
FROM MONADS= { 13 } 
WITH ID_D=64550 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=19;
]
GO

CREATE OBJECT
FROM MONADS= { 14 } 
WITH ID_D=64551 [token
surface_stripped_lowcase:="heavens";
wholesurface:="heavens ";
xmlindex:=20;
]
GO

CREATE OBJECT
FROM MONADS= { 15 } 
WITH ID_D=64552 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=21;
]
GO

CREATE OBJECT
FROM MONADS= { 16 } 
WITH ID_D=64553 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=22;
]
GO

CREATE OBJECT
FROM MONADS= { 17 } 
WITH ID_D=64554 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth. ";
xmlindex:=23;
]
GO

CREATE OBJECT
FROM MONADS= { 18 } 
WITH ID_D=64555 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=25;
]
GO

CREATE OBJECT
FROM MONADS= { 19 } 
WITH ID_D=64556 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=26;
]
GO

CREATE OBJECT
FROM MONADS= { 20 } 
WITH ID_D=64557 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=27;
]
GO

CREATE OBJECT
FROM MONADS= { 21 } 
WITH ID_D=64558 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=28;
]
GO

CREATE OBJECT
FROM MONADS= { 22 } 
WITH ID_D=64559 [token
surface_stripped_lowcase:="waste";
wholesurface:="waste ";
xmlindex:=29;
]
GO

CREATE OBJECT
FROM MONADS= { 23 } 
WITH ID_D=64560 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=30;
]
GO

CREATE OBJECT
FROM MONADS= { 24 } 
WITH ID_D=64561 [token
surface_stripped_lowcase:="void";
wholesurface:="void; ";
xmlindex:=31;
]
GO

CREATE OBJECT
FROM MONADS= { 25 } 
WITH ID_D=64562 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=32;
]
GO

CREATE OBJECT
FROM MONADS= { 26 } 
WITH ID_D=64563 [token
surface_stripped_lowcase:="darkness";
wholesurface:="darkness ";
xmlindex:=33;
]
GO

CREATE OBJECT
FROM MONADS= { 27 } 
WITH ID_D=64564 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=34;
]
GO

CREATE OBJECT
FROM MONADS= { 28 } 
WITH ID_D=64565 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=35;
]
GO

CREATE OBJECT
FROM MONADS= { 29 } 
WITH ID_D=64566 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=36;
]
GO

CREATE OBJECT
FROM MONADS= { 30 } 
WITH ID_D=64567 [token
surface_stripped_lowcase:="face";
wholesurface:="face ";
xmlindex:=37;
]
GO

CREATE OBJECT
FROM MONADS= { 31 } 
WITH ID_D=64568 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=38;
]
GO

CREATE OBJECT
FROM MONADS= { 32 } 
WITH ID_D=64569 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=39;
]
GO

CREATE OBJECT
FROM MONADS= { 33 } 
WITH ID_D=64570 [token
surface_stripped_lowcase:="deep";
wholesurface:="deep: ";
xmlindex:=40;
]
GO

CREATE OBJECT
FROM MONADS= { 34 } 
WITH ID_D=64571 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=41;
]
GO

CREATE OBJECT
FROM MONADS= { 35 } 
WITH ID_D=64572 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=42;
]
GO

CREATE OBJECT
FROM MONADS= { 36 } 
WITH ID_D=64573 [token
surface_stripped_lowcase:="spirit";
wholesurface:="Spirit ";
xmlindex:=43;
]
GO

CREATE OBJECT
FROM MONADS= { 37 } 
WITH ID_D=64574 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=44;
]
GO

CREATE OBJECT
FROM MONADS= { 38 } 
WITH ID_D=64575 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=45;
]
GO

CREATE OBJECT
FROM MONADS= { 39 } 
WITH ID_D=64576 [token
surface_stripped_lowcase:="moved";
wholesurface:="moved ";
xmlindex:=46;
]
GO

CREATE OBJECT
FROM MONADS= { 40 } 
WITH ID_D=64577 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=47;
]
GO

CREATE OBJECT
FROM MONADS= { 41 } 
WITH ID_D=64578 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=48;
]
GO

CREATE OBJECT
FROM MONADS= { 42 } 
WITH ID_D=64579 [token
surface_stripped_lowcase:="face";
wholesurface:="face ";
xmlindex:=49;
]
GO

CREATE OBJECT
FROM MONADS= { 43 } 
WITH ID_D=64580 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=50;
]
GO

CREATE OBJECT
FROM MONADS= { 44 } 
WITH ID_D=64581 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=51;
]
GO

CREATE OBJECT
FROM MONADS= { 45 } 
WITH ID_D=64582 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters. ";
xmlindex:=52;
]
GO

CREATE OBJECT
FROM MONADS= { 46 } 
WITH ID_D=64583 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=54;
]
GO

CREATE OBJECT
FROM MONADS= { 47 } 
WITH ID_D=64584 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=55;
]
GO

CREATE OBJECT
FROM MONADS= { 48 } 
WITH ID_D=64585 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=56;
]
GO

CREATE OBJECT
FROM MONADS= { 49 } 
WITH ID_D=64586 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=57;
]
GO

CREATE OBJECT
FROM MONADS= { 50 } 
WITH ID_D=64587 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=58;
]
GO

CREATE OBJECT
FROM MONADS= { 51 } 
WITH ID_D=64588 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=59;
]
GO

CREATE OBJECT
FROM MONADS= { 52 } 
WITH ID_D=64589 [token
surface_stripped_lowcase:="light";
wholesurface:="light: ";
xmlindex:=60;
]
GO

CREATE OBJECT
FROM MONADS= { 53 } 
WITH ID_D=64590 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=61;
]
GO

CREATE OBJECT
FROM MONADS= { 54 } 
WITH ID_D=64591 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=62;
]
GO

CREATE OBJECT
FROM MONADS= { 55 } 
WITH ID_D=64592 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=63;
]
GO

CREATE OBJECT
FROM MONADS= { 56 } 
WITH ID_D=64593 [token
surface_stripped_lowcase:="light";
wholesurface:="light. ";
xmlindex:=64;
]
GO

CREATE OBJECT
FROM MONADS= { 57 } 
WITH ID_D=64594 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=66;
]
GO

CREATE OBJECT
FROM MONADS= { 58 } 
WITH ID_D=64595 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=67;
]
GO

CREATE OBJECT
FROM MONADS= { 59 } 
WITH ID_D=64596 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=68;
]
GO

CREATE OBJECT
FROM MONADS= { 60 } 
WITH ID_D=64597 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=69;
]
GO

CREATE OBJECT
FROM MONADS= { 61 } 
WITH ID_D=64598 [token
surface_stripped_lowcase:="light";
wholesurface:="light, ";
xmlindex:=70;
]
GO

CREATE OBJECT
FROM MONADS= { 62 } 
WITH ID_D=64599 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=71;
]
GO

CREATE OBJECT
FROM MONADS= { 63 } 
WITH ID_D=64600 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=72;
]
GO

CREATE OBJECT
FROM MONADS= { 64 } 
WITH ID_D=64601 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=73;
]
GO

CREATE OBJECT
FROM MONADS= { 65 } 
WITH ID_D=64602 [token
surface_stripped_lowcase:="good";
wholesurface:="good: ";
xmlindex:=74;
]
GO

CREATE OBJECT
FROM MONADS= { 66 } 
WITH ID_D=64603 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=75;
]
GO

CREATE OBJECT
FROM MONADS= { 67 } 
WITH ID_D=64604 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=76;
]
GO

CREATE OBJECT
FROM MONADS= { 68 } 
WITH ID_D=64605 [token
surface_stripped_lowcase:="divided";
wholesurface:="divided ";
xmlindex:=77;
]
GO

CREATE OBJECT
FROM MONADS= { 69 } 
WITH ID_D=64606 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=78;
]
GO

CREATE OBJECT
FROM MONADS= { 70 } 
WITH ID_D=64607 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=79;
]
GO

CREATE OBJECT
FROM MONADS= { 71 } 
WITH ID_D=64608 [token
surface_stripped_lowcase:="from";
wholesurface:="from ";
xmlindex:=80;
]
GO

CREATE OBJECT
FROM MONADS= { 72 } 
WITH ID_D=64609 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=81;
]
GO

CREATE OBJECT
FROM MONADS= { 73 } 
WITH ID_D=64610 [token
surface_stripped_lowcase:="darkness";
wholesurface:="darkness. ";
xmlindex:=82;
]
GO

CREATE OBJECT
FROM MONADS= { 74 } 
WITH ID_D=64611 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=84;
]
GO

CREATE OBJECT
FROM MONADS= { 75 } 
WITH ID_D=64612 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=85;
]
GO

CREATE OBJECT
FROM MONADS= { 76 } 
WITH ID_D=64613 [token
surface_stripped_lowcase:="called";
wholesurface:="called ";
xmlindex:=86;
]
GO

CREATE OBJECT
FROM MONADS= { 77 } 
WITH ID_D=64614 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=87;
]
GO

CREATE OBJECT
FROM MONADS= { 78 } 
WITH ID_D=64615 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=88;
]
GO

CREATE OBJECT
FROM MONADS= { 79 } 
WITH ID_D=64616 [token
surface_stripped_lowcase:="day";
wholesurface:="Day, ";
xmlindex:=89;
]
GO

CREATE OBJECT
FROM MONADS= { 80 } 
WITH ID_D=64617 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=90;
]
GO

CREATE OBJECT
FROM MONADS= { 81 } 
WITH ID_D=64618 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=91;
]
GO

CREATE OBJECT
FROM MONADS= { 82 } 
WITH ID_D=64619 [token
surface_stripped_lowcase:="darkness";
wholesurface:="darkness ";
xmlindex:=92;
]
GO

CREATE OBJECT
FROM MONADS= { 83 } 
WITH ID_D=64620 [token
surface_stripped_lowcase:="he";
wholesurface:="he ";
xmlindex:=93;
]
GO

CREATE OBJECT
FROM MONADS= { 84 } 
WITH ID_D=64621 [token
surface_stripped_lowcase:="called";
wholesurface:="called ";
xmlindex:=94;
]
GO

CREATE OBJECT
FROM MONADS= { 85 } 
WITH ID_D=64622 [token
surface_stripped_lowcase:="night";
wholesurface:="Night. ";
xmlindex:=95;
]
GO

CREATE OBJECT
FROM MONADS= { 86 } 
WITH ID_D=64623 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=96;
]
GO

CREATE OBJECT
FROM MONADS= { 87 } 
WITH ID_D=64624 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=97;
]
GO

CREATE OBJECT
FROM MONADS= { 88 } 
WITH ID_D=64625 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=98;
]
GO

CREATE OBJECT
FROM MONADS= { 89 } 
WITH ID_D=64626 [token
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
xmlindex:=99;
]
GO

CREATE OBJECT
FROM MONADS= { 90 } 
WITH ID_D=64627 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=100;
]
GO

CREATE OBJECT
FROM MONADS= { 91 } 
WITH ID_D=64628 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=101;
]
GO

CREATE OBJECT
FROM MONADS= { 92 } 
WITH ID_D=64629 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=102;
]
GO

CREATE OBJECT
FROM MONADS= { 93 } 
WITH ID_D=64630 [token
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
xmlindex:=103;
]
GO

CREATE OBJECT
FROM MONADS= { 94 } 
WITH ID_D=64631 [token
surface_stripped_lowcase:="one";
wholesurface:="one ";
xmlindex:=104;
]
GO

CREATE OBJECT
FROM MONADS= { 95 } 
WITH ID_D=64632 [token
surface_stripped_lowcase:="day";
wholesurface:="day. ";
xmlindex:=105;
]
GO

CREATE OBJECT
FROM MONADS= { 96 } 
WITH ID_D=64633 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=108;
]
GO

CREATE OBJECT
FROM MONADS= { 97 } 
WITH ID_D=64634 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=109;
]
GO

CREATE OBJECT
FROM MONADS= { 98 } 
WITH ID_D=64635 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=110;
]
GO

CREATE OBJECT
FROM MONADS= { 99 } 
WITH ID_D=64636 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=111;
]
GO

CREATE OBJECT
FROM MONADS= { 100 } 
WITH ID_D=64637 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=112;
]
GO

CREATE OBJECT
FROM MONADS= { 101 } 
WITH ID_D=64638 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=113;
]
GO

CREATE OBJECT
FROM MONADS= { 102 } 
WITH ID_D=64639 [token
surface_stripped_lowcase:="a";
wholesurface:="a ";
xmlindex:=114;
]
GO

CREATE OBJECT
FROM MONADS= { 103 } 
WITH ID_D=64640 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=115;
]
GO

CREATE OBJECT
FROM MONADS= { 104 } 
WITH ID_D=64641 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=116;
]
GO

CREATE OBJECT
FROM MONADS= { 105 } 
WITH ID_D=64642 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=117;
]
GO

CREATE OBJECT
FROM MONADS= { 106 } 
WITH ID_D=64643 [token
surface_stripped_lowcase:="midst";
wholesurface:="midst ";
xmlindex:=118;
]
GO

CREATE OBJECT
FROM MONADS= { 107 } 
WITH ID_D=64644 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=119;
]
GO

CREATE OBJECT
FROM MONADS= { 108 } 
WITH ID_D=64645 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=120;
]
GO

CREATE OBJECT
FROM MONADS= { 109 } 
WITH ID_D=64646 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters, ";
xmlindex:=121;
]
GO

CREATE OBJECT
FROM MONADS= { 110 } 
WITH ID_D=64647 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=122;
]
GO

CREATE OBJECT
FROM MONADS= { 111 } 
WITH ID_D=64648 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=123;
]
GO

CREATE OBJECT
FROM MONADS= { 112 } 
WITH ID_D=64649 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=124;
]
GO

CREATE OBJECT
FROM MONADS= { 113 } 
WITH ID_D=64650 [token
surface_stripped_lowcase:="divide";
wholesurface:="divide ";
xmlindex:=125;
]
GO

CREATE OBJECT
FROM MONADS= { 114 } 
WITH ID_D=64651 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=126;
]
GO

CREATE OBJECT
FROM MONADS= { 115 } 
WITH ID_D=64652 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=127;
]
GO

CREATE OBJECT
FROM MONADS= { 116 } 
WITH ID_D=64653 [token
surface_stripped_lowcase:="from";
wholesurface:="from ";
xmlindex:=128;
]
GO

CREATE OBJECT
FROM MONADS= { 117 } 
WITH ID_D=64654 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=129;
]
GO

CREATE OBJECT
FROM MONADS= { 118 } 
WITH ID_D=64655 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters. ";
xmlindex:=130;
]
GO

CREATE OBJECT
FROM MONADS= { 119 } 
WITH ID_D=64656 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=132;
]
GO

CREATE OBJECT
FROM MONADS= { 120 } 
WITH ID_D=64657 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=133;
]
GO

CREATE OBJECT
FROM MONADS= { 121 } 
WITH ID_D=64658 [token
surface_stripped_lowcase:="made";
wholesurface:="made ";
xmlindex:=134;
]
GO

CREATE OBJECT
FROM MONADS= { 122 } 
WITH ID_D=64659 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=135;
]
GO

CREATE OBJECT
FROM MONADS= { 123 } 
WITH ID_D=64660 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament, ";
xmlindex:=136;
]
GO

CREATE OBJECT
FROM MONADS= { 124 } 
WITH ID_D=64661 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=137;
]
GO

CREATE OBJECT
FROM MONADS= { 125 } 
WITH ID_D=64662 [token
surface_stripped_lowcase:="divided";
wholesurface:="divided ";
xmlindex:=138;
]
GO

CREATE OBJECT
FROM MONADS= { 126 } 
WITH ID_D=64663 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=139;
]
GO

CREATE OBJECT
FROM MONADS= { 127 } 
WITH ID_D=64664 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=140;
]
GO

CREATE OBJECT
FROM MONADS= { 128 } 
WITH ID_D=64665 [token
surface_stripped_lowcase:="which";
wholesurface:="which ";
xmlindex:=141;
]
GO

CREATE OBJECT
FROM MONADS= { 129 } 
WITH ID_D=64666 [token
surface_stripped_lowcase:="were";
wholesurface:="were ";
xmlindex:=142;
]
GO

CREATE OBJECT
FROM MONADS= { 130 } 
WITH ID_D=64667 [token
surface_stripped_lowcase:="under";
wholesurface:="under ";
xmlindex:=143;
]
GO

CREATE OBJECT
FROM MONADS= { 131 } 
WITH ID_D=64668 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=144;
]
GO

CREATE OBJECT
FROM MONADS= { 132 } 
WITH ID_D=64669 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=145;
]
GO

CREATE OBJECT
FROM MONADS= { 133 } 
WITH ID_D=64670 [token
surface_stripped_lowcase:="from";
wholesurface:="from ";
xmlindex:=146;
]
GO

CREATE OBJECT
FROM MONADS= { 134 } 
WITH ID_D=64671 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=147;
]
GO

CREATE OBJECT
FROM MONADS= { 135 } 
WITH ID_D=64672 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=148;
]
GO

CREATE OBJECT
FROM MONADS= { 136 } 
WITH ID_D=64673 [token
surface_stripped_lowcase:="which";
wholesurface:="which ";
xmlindex:=149;
]
GO

CREATE OBJECT
FROM MONADS= { 137 } 
WITH ID_D=64674 [token
surface_stripped_lowcase:="were";
wholesurface:="were ";
xmlindex:=150;
]
GO

CREATE OBJECT
FROM MONADS= { 138 } 
WITH ID_D=64675 [token
surface_stripped_lowcase:="above";
wholesurface:="above ";
xmlindex:=151;
]
GO

CREATE OBJECT
FROM MONADS= { 139 } 
WITH ID_D=64676 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=152;
]
GO

CREATE OBJECT
FROM MONADS= { 140 } 
WITH ID_D=64677 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament: ";
xmlindex:=153;
]
GO

CREATE OBJECT
FROM MONADS= { 141 } 
WITH ID_D=64678 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=154;
]
GO

CREATE OBJECT
FROM MONADS= { 142 } 
WITH ID_D=64679 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=155;
]
GO

CREATE OBJECT
FROM MONADS= { 143 } 
WITH ID_D=64680 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=156;
]
GO

CREATE OBJECT
FROM MONADS= { 144 } 
WITH ID_D=64681 [token
surface_stripped_lowcase:="so";
wholesurface:="so. ";
xmlindex:=157;
]
GO

CREATE OBJECT
FROM MONADS= { 145 } 
WITH ID_D=64682 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=159;
]
GO

CREATE OBJECT
FROM MONADS= { 146 } 
WITH ID_D=64683 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=160;
]
GO

CREATE OBJECT
FROM MONADS= { 147 } 
WITH ID_D=64684 [token
surface_stripped_lowcase:="called";
wholesurface:="called ";
xmlindex:=161;
]
GO

CREATE OBJECT
FROM MONADS= { 148 } 
WITH ID_D=64685 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=162;
]
GO

CREATE OBJECT
FROM MONADS= { 149 } 
WITH ID_D=64686 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=163;
]
GO

CREATE OBJECT
FROM MONADS= { 150 } 
WITH ID_D=64687 [token
surface_stripped_lowcase:="heaven";
wholesurface:="Heaven. ";
xmlindex:=164;
]
GO

CREATE OBJECT
FROM MONADS= { 151 } 
WITH ID_D=64688 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=165;
]
GO

CREATE OBJECT
FROM MONADS= { 152 } 
WITH ID_D=64689 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=166;
]
GO

CREATE OBJECT
FROM MONADS= { 153 } 
WITH ID_D=64690 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=167;
]
GO

CREATE OBJECT
FROM MONADS= { 154 } 
WITH ID_D=64691 [token
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
xmlindex:=168;
]
GO

CREATE OBJECT
FROM MONADS= { 155 } 
WITH ID_D=64692 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=169;
]
GO

CREATE OBJECT
FROM MONADS= { 156 } 
WITH ID_D=64693 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=170;
]
GO

CREATE OBJECT
FROM MONADS= { 157 } 
WITH ID_D=64694 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=171;
]
GO

CREATE OBJECT
FROM MONADS= { 158 } 
WITH ID_D=64695 [token
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
xmlindex:=172;
]
GO

CREATE OBJECT
FROM MONADS= { 159 } 
WITH ID_D=64696 [token
surface_stripped_lowcase:="a";
wholesurface:="a ";
xmlindex:=173;
]
GO

CREATE OBJECT
FROM MONADS= { 160 } 
WITH ID_D=64697 [token
surface_stripped_lowcase:="second";
wholesurface:="second ";
xmlindex:=174;
]
GO

CREATE OBJECT
FROM MONADS= { 161 } 
WITH ID_D=64698 [token
surface_stripped_lowcase:="day";
wholesurface:="day. ";
xmlindex:=175;
]
GO

CREATE OBJECT
FROM MONADS= { 162 } 
WITH ID_D=64699 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=178;
]
GO

CREATE OBJECT
FROM MONADS= { 163 } 
WITH ID_D=64700 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=179;
]
GO

CREATE OBJECT
FROM MONADS= { 164 } 
WITH ID_D=64701 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=180;
]
GO

CREATE OBJECT
FROM MONADS= { 165 } 
WITH ID_D=64702 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=181;
]
GO

CREATE OBJECT
FROM MONADS= { 166 } 
WITH ID_D=64703 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=182;
]
GO

CREATE OBJECT
FROM MONADS= { 167 } 
WITH ID_D=64704 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=183;
]
GO

CREATE OBJECT
FROM MONADS= { 168 } 
WITH ID_D=64705 [token
surface_stripped_lowcase:="under";
wholesurface:="under ";
xmlindex:=184;
]
GO

CREATE OBJECT
FROM MONADS= { 169 } 
WITH ID_D=64706 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=185;
]
GO

CREATE OBJECT
FROM MONADS= { 170 } 
WITH ID_D=64707 [token
surface_stripped_lowcase:="heavens";
wholesurface:="heavens ";
xmlindex:=186;
]
GO

CREATE OBJECT
FROM MONADS= { 171 } 
WITH ID_D=64708 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=187;
]
GO

CREATE OBJECT
FROM MONADS= { 172 } 
WITH ID_D=64709 [token
surface_stripped_lowcase:="gathered";
wholesurface:="gathered ";
xmlindex:=188;
]
GO

CREATE OBJECT
FROM MONADS= { 173 } 
WITH ID_D=64710 [token
surface_stripped_lowcase:="together";
wholesurface:="together ";
xmlindex:=189;
]
GO

CREATE OBJECT
FROM MONADS= { 174 } 
WITH ID_D=64711 [token
surface_stripped_lowcase:="unto";
wholesurface:="unto ";
xmlindex:=190;
]
GO

CREATE OBJECT
FROM MONADS= { 175 } 
WITH ID_D=64712 [token
surface_stripped_lowcase:="one";
wholesurface:="one ";
xmlindex:=191;
]
GO

CREATE OBJECT
FROM MONADS= { 176 } 
WITH ID_D=64713 [token
surface_stripped_lowcase:="place";
wholesurface:="place, ";
xmlindex:=192;
]
GO

CREATE OBJECT
FROM MONADS= { 177 } 
WITH ID_D=64714 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=193;
]
GO

CREATE OBJECT
FROM MONADS= { 178 } 
WITH ID_D=64715 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=194;
]
GO

CREATE OBJECT
FROM MONADS= { 179 } 
WITH ID_D=64716 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=195;
]
GO

CREATE OBJECT
FROM MONADS= { 180 } 
WITH ID_D=64717 [token
surface_stripped_lowcase:="dry";
wholesurface:="dry ";
xmlindex:=196;
]
GO

CREATE OBJECT
FROM MONADS= { 181 } 
WITH ID_D=64718 [token
surface_stripped_lowcase:="land";
wholesurface:="land ";
xmlindex:=197;
]
GO

CREATE OBJECT
FROM MONADS= { 182 } 
WITH ID_D=64719 [token
surface_stripped_lowcase:="appear";
wholesurface:="appear: ";
xmlindex:=198;
]
GO

CREATE OBJECT
FROM MONADS= { 183 } 
WITH ID_D=64720 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=199;
]
GO

CREATE OBJECT
FROM MONADS= { 184 } 
WITH ID_D=64721 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=200;
]
GO

CREATE OBJECT
FROM MONADS= { 185 } 
WITH ID_D=64722 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=201;
]
GO

CREATE OBJECT
FROM MONADS= { 186 } 
WITH ID_D=64723 [token
surface_stripped_lowcase:="so";
wholesurface:="so. ";
xmlindex:=202;
]
GO

CREATE OBJECT
FROM MONADS= { 187 } 
WITH ID_D=64724 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=204;
]
GO

CREATE OBJECT
FROM MONADS= { 188 } 
WITH ID_D=64725 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=205;
]
GO

CREATE OBJECT
FROM MONADS= { 189 } 
WITH ID_D=64726 [token
surface_stripped_lowcase:="called";
wholesurface:="called ";
xmlindex:=206;
]
GO

CREATE OBJECT
FROM MONADS= { 190 } 
WITH ID_D=64727 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=207;
]
GO

CREATE OBJECT
FROM MONADS= { 191 } 
WITH ID_D=64728 [token
surface_stripped_lowcase:="dry";
wholesurface:="dry ";
xmlindex:=208;
]
GO

CREATE OBJECT
FROM MONADS= { 192 } 
WITH ID_D=64729 [token
surface_stripped_lowcase:="land";
wholesurface:="land ";
xmlindex:=209;
]
GO

CREATE OBJECT
FROM MONADS= { 193 } 
WITH ID_D=64730 [token
surface_stripped_lowcase:="earth";
wholesurface:="Earth; ";
xmlindex:=210;
]
GO

CREATE OBJECT
FROM MONADS= { 194 } 
WITH ID_D=64731 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=211;
]
GO

CREATE OBJECT
FROM MONADS= { 195 } 
WITH ID_D=64732 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=212;
]
GO

CREATE OBJECT
FROM MONADS= { 196 } 
WITH ID_D=64733 [token
surface_stripped_lowcase:="gathering";
wholesurface:="gathering ";
xmlindex:=213;
]
GO

CREATE OBJECT
FROM MONADS= { 197 } 
WITH ID_D=64734 [token
surface_stripped_lowcase:="together";
wholesurface:="together ";
xmlindex:=214;
]
GO

CREATE OBJECT
FROM MONADS= { 198 } 
WITH ID_D=64735 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=215;
]
GO

CREATE OBJECT
FROM MONADS= { 199 } 
WITH ID_D=64736 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=216;
]
GO

CREATE OBJECT
FROM MONADS= { 200 } 
WITH ID_D=64737 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=217;
]
GO

CREATE OBJECT
FROM MONADS= { 201 } 
WITH ID_D=64738 [token
surface_stripped_lowcase:="called";
wholesurface:="called ";
xmlindex:=218;
]
GO

CREATE OBJECT
FROM MONADS= { 202 } 
WITH ID_D=64739 [token
surface_stripped_lowcase:="he";
wholesurface:="he ";
xmlindex:=219;
]
GO

CREATE OBJECT
FROM MONADS= { 203 } 
WITH ID_D=64740 [token
surface_stripped_lowcase:="seas";
wholesurface:="Seas: ";
xmlindex:=220;
]
GO

CREATE OBJECT
FROM MONADS= { 204 } 
WITH ID_D=64741 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=221;
]
GO

CREATE OBJECT
FROM MONADS= { 205 } 
WITH ID_D=64742 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=222;
]
GO

CREATE OBJECT
FROM MONADS= { 206 } 
WITH ID_D=64743 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=223;
]
GO

CREATE OBJECT
FROM MONADS= { 207 } 
WITH ID_D=64744 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=224;
]
GO

CREATE OBJECT
FROM MONADS= { 208 } 
WITH ID_D=64745 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=225;
]
GO

CREATE OBJECT
FROM MONADS= { 209 } 
WITH ID_D=64746 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=226;
]
GO

CREATE OBJECT
FROM MONADS= { 210 } 
WITH ID_D=64747 [token
surface_stripped_lowcase:="good";
wholesurface:="good. ";
xmlindex:=227;
]
GO

CREATE OBJECT
FROM MONADS= { 211 } 
WITH ID_D=64748 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=229;
]
GO

CREATE OBJECT
FROM MONADS= { 212 } 
WITH ID_D=64749 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=230;
]
GO

CREATE OBJECT
FROM MONADS= { 213 } 
WITH ID_D=64750 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=231;
]
GO

CREATE OBJECT
FROM MONADS= { 214 } 
WITH ID_D=64751 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=232;
]
GO

CREATE OBJECT
FROM MONADS= { 215 } 
WITH ID_D=64752 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=233;
]
GO

CREATE OBJECT
FROM MONADS= { 216 } 
WITH ID_D=64753 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=234;
]
GO

CREATE OBJECT
FROM MONADS= { 217 } 
WITH ID_D=64754 [token
surface_stripped_lowcase:="put";
wholesurface:="put ";
xmlindex:=235;
]
GO

CREATE OBJECT
FROM MONADS= { 218 } 
WITH ID_D=64755 [token
surface_stripped_lowcase:="forth";
wholesurface:="forth ";
xmlindex:=236;
]
GO

CREATE OBJECT
FROM MONADS= { 219 } 
WITH ID_D=64756 [token
surface_stripped_lowcase:="grass";
wholesurface:="grass, ";
xmlindex:=237;
]
GO

CREATE OBJECT
FROM MONADS= { 220 } 
WITH ID_D=64757 [token
surface_stripped_lowcase:="herbs";
wholesurface:="herbs ";
xmlindex:=238;
]
GO

CREATE OBJECT
FROM MONADS= { 221 } 
WITH ID_D=64758 [token
surface_stripped_lowcase:="yielding";
wholesurface:="yielding ";
xmlindex:=239;
]
GO

CREATE OBJECT
FROM MONADS= { 222 } 
WITH ID_D=64759 [token
surface_stripped_lowcase:="seed";
wholesurface:="seed, ";
xmlindex:=240;
]
GO

CREATE OBJECT
FROM MONADS= { 223 } 
WITH ID_D=64760 [token
surface_stripped_lowcase:="and";
wholesurface:="and";
xmlindex:=242;
]
GO

CREATE OBJECT
FROM MONADS= { 224 } 
WITH ID_D=64761 [token
surface_stripped_lowcase:="fruit";
wholesurface:=" fruit-trees ";
xmlindex:=243;
]
GO

CREATE OBJECT
FROM MONADS= { 225 } 
WITH ID_D=64762 [token
surface_stripped_lowcase:="bearing";
wholesurface:="bearing ";
xmlindex:=244;
]
GO

CREATE OBJECT
FROM MONADS= { 226 } 
WITH ID_D=64763 [token
surface_stripped_lowcase:="fruit";
wholesurface:="fruit ";
xmlindex:=245;
]
GO

CREATE OBJECT
FROM MONADS= { 227 } 
WITH ID_D=64764 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=246;
]
GO

CREATE OBJECT
FROM MONADS= { 228 } 
WITH ID_D=64765 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=247;
]
GO

CREATE OBJECT
FROM MONADS= { 229 } 
WITH ID_D=64766 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind, ";
xmlindex:=248;
]
GO

CREATE OBJECT
FROM MONADS= { 230 } 
WITH ID_D=64767 [token
surface_stripped_lowcase:="wherein";
wholesurface:="wherein ";
xmlindex:=249;
]
GO

CREATE OBJECT
FROM MONADS= { 231 } 
WITH ID_D=64768 [token
surface_stripped_lowcase:="is";
wholesurface:="is ";
xmlindex:=250;
]
GO

CREATE OBJECT
FROM MONADS= { 232 } 
WITH ID_D=64769 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=251;
]
GO

CREATE OBJECT
FROM MONADS= { 233 } 
WITH ID_D=64770 [token
surface_stripped_lowcase:="seed";
wholesurface:="seed ";
xmlindex:=252;
]
GO

CREATE OBJECT
FROM MONADS= { 234 } 
WITH ID_D=64771 [token
surface_stripped_lowcase:="thereof";
wholesurface:="thereof, ";
xmlindex:=253;
]
GO

CREATE OBJECT
FROM MONADS= { 235 } 
WITH ID_D=64772 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=254;
]
GO

CREATE OBJECT
FROM MONADS= { 236 } 
WITH ID_D=64773 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=255;
]
GO

CREATE OBJECT
FROM MONADS= { 237 } 
WITH ID_D=64774 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth: ";
xmlindex:=256;
]
GO

CREATE OBJECT
FROM MONADS= { 238 } 
WITH ID_D=64775 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=257;
]
GO

CREATE OBJECT
FROM MONADS= { 239 } 
WITH ID_D=64776 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=258;
]
GO

CREATE OBJECT
FROM MONADS= { 240 } 
WITH ID_D=64777 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=259;
]
GO

CREATE OBJECT
FROM MONADS= { 241 } 
WITH ID_D=64778 [token
surface_stripped_lowcase:="so";
wholesurface:="so. ";
xmlindex:=260;
]
GO

CREATE OBJECT
FROM MONADS= { 242 } 
WITH ID_D=64779 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=262;
]
GO

CREATE OBJECT
FROM MONADS= { 243 } 
WITH ID_D=64780 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=263;
]
GO

CREATE OBJECT
FROM MONADS= { 244 } 
WITH ID_D=64781 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=264;
]
GO

CREATE OBJECT
FROM MONADS= { 245 } 
WITH ID_D=64782 [token
surface_stripped_lowcase:="brought";
wholesurface:="brought ";
xmlindex:=265;
]
GO

CREATE OBJECT
FROM MONADS= { 246 } 
WITH ID_D=64783 [token
surface_stripped_lowcase:="forth";
wholesurface:="forth ";
xmlindex:=266;
]
GO

CREATE OBJECT
FROM MONADS= { 247 } 
WITH ID_D=64784 [token
surface_stripped_lowcase:="grass";
wholesurface:="grass, ";
xmlindex:=267;
]
GO

CREATE OBJECT
FROM MONADS= { 248 } 
WITH ID_D=64785 [token
surface_stripped_lowcase:="herbs";
wholesurface:="herbs ";
xmlindex:=268;
]
GO

CREATE OBJECT
FROM MONADS= { 249 } 
WITH ID_D=64786 [token
surface_stripped_lowcase:="yielding";
wholesurface:="yielding ";
xmlindex:=269;
]
GO

CREATE OBJECT
FROM MONADS= { 250 } 
WITH ID_D=64787 [token
surface_stripped_lowcase:="seed";
wholesurface:="seed ";
xmlindex:=270;
]
GO

CREATE OBJECT
FROM MONADS= { 251 } 
WITH ID_D=64788 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=271;
]
GO

CREATE OBJECT
FROM MONADS= { 252 } 
WITH ID_D=64789 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=272;
]
GO

CREATE OBJECT
FROM MONADS= { 253 } 
WITH ID_D=64790 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind, ";
xmlindex:=273;
]
GO

CREATE OBJECT
FROM MONADS= { 254 } 
WITH ID_D=64791 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=274;
]
GO

CREATE OBJECT
FROM MONADS= { 255 } 
WITH ID_D=64792 [token
surface_stripped_lowcase:="trees";
wholesurface:="trees ";
xmlindex:=275;
]
GO

CREATE OBJECT
FROM MONADS= { 256 } 
WITH ID_D=64793 [token
surface_stripped_lowcase:="bearing";
wholesurface:="bearing ";
xmlindex:=276;
]
GO

CREATE OBJECT
FROM MONADS= { 257 } 
WITH ID_D=64794 [token
surface_stripped_lowcase:="fruit";
wholesurface:="fruit, ";
xmlindex:=277;
]
GO

CREATE OBJECT
FROM MONADS= { 258 } 
WITH ID_D=64795 [token
surface_stripped_lowcase:="wherein";
wholesurface:="wherein ";
xmlindex:=278;
]
GO

CREATE OBJECT
FROM MONADS= { 259 } 
WITH ID_D=64796 [token
surface_stripped_lowcase:="is";
wholesurface:="is ";
xmlindex:=279;
]
GO

CREATE OBJECT
FROM MONADS= { 260 } 
WITH ID_D=64797 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=280;
]
GO

CREATE OBJECT
FROM MONADS= { 261 } 
WITH ID_D=64798 [token
surface_stripped_lowcase:="seed";
wholesurface:="seed ";
xmlindex:=281;
]
GO

CREATE OBJECT
FROM MONADS= { 262 } 
WITH ID_D=64799 [token
surface_stripped_lowcase:="thereof";
wholesurface:="thereof, ";
xmlindex:=282;
]
GO

CREATE OBJECT
FROM MONADS= { 263 } 
WITH ID_D=64800 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=283;
]
GO

CREATE OBJECT
FROM MONADS= { 264 } 
WITH ID_D=64801 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=284;
]
GO

CREATE OBJECT
FROM MONADS= { 265 } 
WITH ID_D=64802 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind: ";
xmlindex:=285;
]
GO

CREATE OBJECT
FROM MONADS= { 266 } 
WITH ID_D=64803 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=286;
]
GO

CREATE OBJECT
FROM MONADS= { 267 } 
WITH ID_D=64804 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=287;
]
GO

CREATE OBJECT
FROM MONADS= { 268 } 
WITH ID_D=64805 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=288;
]
GO

CREATE OBJECT
FROM MONADS= { 269 } 
WITH ID_D=64806 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=289;
]
GO

CREATE OBJECT
FROM MONADS= { 270 } 
WITH ID_D=64807 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=290;
]
GO

CREATE OBJECT
FROM MONADS= { 271 } 
WITH ID_D=64808 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=291;
]
GO

CREATE OBJECT
FROM MONADS= { 272 } 
WITH ID_D=64809 [token
surface_stripped_lowcase:="good";
wholesurface:="good. ";
xmlindex:=292;
]
GO

CREATE OBJECT
FROM MONADS= { 273 } 
WITH ID_D=64810 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=294;
]
GO

CREATE OBJECT
FROM MONADS= { 274 } 
WITH ID_D=64811 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=295;
]
GO

CREATE OBJECT
FROM MONADS= { 275 } 
WITH ID_D=64812 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=296;
]
GO

CREATE OBJECT
FROM MONADS= { 276 } 
WITH ID_D=64813 [token
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
xmlindex:=297;
]
GO

CREATE OBJECT
FROM MONADS= { 277 } 
WITH ID_D=64814 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=298;
]
GO

CREATE OBJECT
FROM MONADS= { 278 } 
WITH ID_D=64815 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=299;
]
GO

CREATE OBJECT
FROM MONADS= { 279 } 
WITH ID_D=64816 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=300;
]
GO

CREATE OBJECT
FROM MONADS= { 280 } 
WITH ID_D=64817 [token
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
xmlindex:=301;
]
GO

CREATE OBJECT
FROM MONADS= { 281 } 
WITH ID_D=64818 [token
surface_stripped_lowcase:="a";
wholesurface:="a ";
xmlindex:=302;
]
GO

CREATE OBJECT
FROM MONADS= { 282 } 
WITH ID_D=64819 [token
surface_stripped_lowcase:="third";
wholesurface:="third ";
xmlindex:=303;
]
GO

CREATE OBJECT
FROM MONADS= { 283 } 
WITH ID_D=64820 [token
surface_stripped_lowcase:="day";
wholesurface:="day. ";
xmlindex:=304;
]
GO

CREATE OBJECT
FROM MONADS= { 284 } 
WITH ID_D=64821 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=307;
]
GO

CREATE OBJECT
FROM MONADS= { 285 } 
WITH ID_D=64822 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=308;
]
GO

CREATE OBJECT
FROM MONADS= { 286 } 
WITH ID_D=64823 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=309;
]
GO

CREATE OBJECT
FROM MONADS= { 287 } 
WITH ID_D=64824 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=310;
]
GO

CREATE OBJECT
FROM MONADS= { 288 } 
WITH ID_D=64825 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=311;
]
GO

CREATE OBJECT
FROM MONADS= { 289 } 
WITH ID_D=64826 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=312;
]
GO

CREATE OBJECT
FROM MONADS= { 290 } 
WITH ID_D=64827 [token
surface_stripped_lowcase:="lights";
wholesurface:="lights ";
xmlindex:=313;
]
GO

CREATE OBJECT
FROM MONADS= { 291 } 
WITH ID_D=64828 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=314;
]
GO

CREATE OBJECT
FROM MONADS= { 292 } 
WITH ID_D=64829 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=315;
]
GO

CREATE OBJECT
FROM MONADS= { 293 } 
WITH ID_D=64830 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=316;
]
GO

CREATE OBJECT
FROM MONADS= { 294 } 
WITH ID_D=64831 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=317;
]
GO

CREATE OBJECT
FROM MONADS= { 295 } 
WITH ID_D=64832 [token
surface_stripped_lowcase:="heaven";
wholesurface:="heaven ";
xmlindex:=318;
]
GO

CREATE OBJECT
FROM MONADS= { 296 } 
WITH ID_D=64833 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=319;
]
GO

CREATE OBJECT
FROM MONADS= { 297 } 
WITH ID_D=64834 [token
surface_stripped_lowcase:="divide";
wholesurface:="divide ";
xmlindex:=320;
]
GO

CREATE OBJECT
FROM MONADS= { 298 } 
WITH ID_D=64835 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=321;
]
GO

CREATE OBJECT
FROM MONADS= { 299 } 
WITH ID_D=64836 [token
surface_stripped_lowcase:="day";
wholesurface:="day ";
xmlindex:=322;
]
GO

CREATE OBJECT
FROM MONADS= { 300 } 
WITH ID_D=64837 [token
surface_stripped_lowcase:="from";
wholesurface:="from ";
xmlindex:=323;
]
GO

CREATE OBJECT
FROM MONADS= { 301 } 
WITH ID_D=64838 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=324;
]
GO

CREATE OBJECT
FROM MONADS= { 302 } 
WITH ID_D=64839 [token
surface_stripped_lowcase:="night";
wholesurface:="night; ";
xmlindex:=325;
]
GO

CREATE OBJECT
FROM MONADS= { 303 } 
WITH ID_D=64840 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=326;
]
GO

CREATE OBJECT
FROM MONADS= { 304 } 
WITH ID_D=64841 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=327;
]
GO

CREATE OBJECT
FROM MONADS= { 305 } 
WITH ID_D=64842 [token
surface_stripped_lowcase:="them";
wholesurface:="them ";
xmlindex:=328;
]
GO

CREATE OBJECT
FROM MONADS= { 306 } 
WITH ID_D=64843 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=329;
]
GO

CREATE OBJECT
FROM MONADS= { 307 } 
WITH ID_D=64844 [token
surface_stripped_lowcase:="for";
wholesurface:="for ";
xmlindex:=330;
]
GO

CREATE OBJECT
FROM MONADS= { 308 } 
WITH ID_D=64845 [token
surface_stripped_lowcase:="signs";
wholesurface:="signs, ";
xmlindex:=331;
]
GO

CREATE OBJECT
FROM MONADS= { 309 } 
WITH ID_D=64846 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=332;
]
GO

CREATE OBJECT
FROM MONADS= { 310 } 
WITH ID_D=64847 [token
surface_stripped_lowcase:="for";
wholesurface:="for ";
xmlindex:=333;
]
GO

CREATE OBJECT
FROM MONADS= { 311 } 
WITH ID_D=64848 [token
surface_stripped_lowcase:="seasons";
wholesurface:="seasons, ";
xmlindex:=334;
]
GO

CREATE OBJECT
FROM MONADS= { 312 } 
WITH ID_D=64849 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=335;
]
GO

CREATE OBJECT
FROM MONADS= { 313 } 
WITH ID_D=64850 [token
surface_stripped_lowcase:="for";
wholesurface:="for ";
xmlindex:=336;
]
GO

CREATE OBJECT
FROM MONADS= { 314 } 
WITH ID_D=64851 [token
surface_stripped_lowcase:="days";
wholesurface:="days ";
xmlindex:=337;
]
GO

CREATE OBJECT
FROM MONADS= { 315 } 
WITH ID_D=64852 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=338;
]
GO

CREATE OBJECT
FROM MONADS= { 316 } 
WITH ID_D=64853 [token
surface_stripped_lowcase:="years";
wholesurface:="years: ";
xmlindex:=339;
]
GO

CREATE OBJECT
FROM MONADS= { 317 } 
WITH ID_D=64854 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=341;
]
GO

CREATE OBJECT
FROM MONADS= { 318 } 
WITH ID_D=64855 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=342;
]
GO

CREATE OBJECT
FROM MONADS= { 319 } 
WITH ID_D=64856 [token
surface_stripped_lowcase:="them";
wholesurface:="them ";
xmlindex:=343;
]
GO

CREATE OBJECT
FROM MONADS= { 320 } 
WITH ID_D=64857 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=344;
]
GO

CREATE OBJECT
FROM MONADS= { 321 } 
WITH ID_D=64858 [token
surface_stripped_lowcase:="for";
wholesurface:="for ";
xmlindex:=345;
]
GO

CREATE OBJECT
FROM MONADS= { 322 } 
WITH ID_D=64859 [token
surface_stripped_lowcase:="lights";
wholesurface:="lights ";
xmlindex:=346;
]
GO

CREATE OBJECT
FROM MONADS= { 323 } 
WITH ID_D=64860 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=347;
]
GO

CREATE OBJECT
FROM MONADS= { 324 } 
WITH ID_D=64861 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=348;
]
GO

CREATE OBJECT
FROM MONADS= { 325 } 
WITH ID_D=64862 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=349;
]
GO

CREATE OBJECT
FROM MONADS= { 326 } 
WITH ID_D=64863 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=350;
]
GO

CREATE OBJECT
FROM MONADS= { 327 } 
WITH ID_D=64864 [token
surface_stripped_lowcase:="heaven";
wholesurface:="heaven ";
xmlindex:=351;
]
GO

CREATE OBJECT
FROM MONADS= { 328 } 
WITH ID_D=64865 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=352;
]
GO

CREATE OBJECT
FROM MONADS= { 329 } 
WITH ID_D=64866 [token
surface_stripped_lowcase:="give";
wholesurface:="give ";
xmlindex:=353;
]
GO

CREATE OBJECT
FROM MONADS= { 330 } 
WITH ID_D=64867 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=354;
]
GO

CREATE OBJECT
FROM MONADS= { 331 } 
WITH ID_D=64868 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=355;
]
GO

CREATE OBJECT
FROM MONADS= { 332 } 
WITH ID_D=64869 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=356;
]
GO

CREATE OBJECT
FROM MONADS= { 333 } 
WITH ID_D=64870 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth: ";
xmlindex:=357;
]
GO

CREATE OBJECT
FROM MONADS= { 334 } 
WITH ID_D=64871 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=358;
]
GO

CREATE OBJECT
FROM MONADS= { 335 } 
WITH ID_D=64872 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=359;
]
GO

CREATE OBJECT
FROM MONADS= { 336 } 
WITH ID_D=64873 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=360;
]
GO

CREATE OBJECT
FROM MONADS= { 337 } 
WITH ID_D=64874 [token
surface_stripped_lowcase:="so";
wholesurface:="so. ";
xmlindex:=361;
]
GO

CREATE OBJECT
FROM MONADS= { 338 } 
WITH ID_D=64875 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=363;
]
GO

CREATE OBJECT
FROM MONADS= { 339 } 
WITH ID_D=64876 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=364;
]
GO

CREATE OBJECT
FROM MONADS= { 340 } 
WITH ID_D=64877 [token
surface_stripped_lowcase:="made";
wholesurface:="made ";
xmlindex:=365;
]
GO

CREATE OBJECT
FROM MONADS= { 341 } 
WITH ID_D=64878 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=366;
]
GO

CREATE OBJECT
FROM MONADS= { 342 } 
WITH ID_D=64879 [token
surface_stripped_lowcase:="two";
wholesurface:="two ";
xmlindex:=367;
]
GO

CREATE OBJECT
FROM MONADS= { 343 } 
WITH ID_D=64880 [token
surface_stripped_lowcase:="great";
wholesurface:="great ";
xmlindex:=368;
]
GO

CREATE OBJECT
FROM MONADS= { 344 } 
WITH ID_D=64881 [token
surface_stripped_lowcase:="lights";
wholesurface:="lights; ";
xmlindex:=369;
]
GO

CREATE OBJECT
FROM MONADS= { 345 } 
WITH ID_D=64882 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=370;
]
GO

CREATE OBJECT
FROM MONADS= { 346 } 
WITH ID_D=64883 [token
surface_stripped_lowcase:="greater";
wholesurface:="greater ";
xmlindex:=371;
]
GO

CREATE OBJECT
FROM MONADS= { 347 } 
WITH ID_D=64884 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=372;
]
GO

CREATE OBJECT
FROM MONADS= { 348 } 
WITH ID_D=64885 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=373;
]
GO

CREATE OBJECT
FROM MONADS= { 349 } 
WITH ID_D=64886 [token
surface_stripped_lowcase:="rule";
wholesurface:="rule ";
xmlindex:=374;
]
GO

CREATE OBJECT
FROM MONADS= { 350 } 
WITH ID_D=64887 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=375;
]
GO

CREATE OBJECT
FROM MONADS= { 351 } 
WITH ID_D=64888 [token
surface_stripped_lowcase:="day";
wholesurface:="day, ";
xmlindex:=376;
]
GO

CREATE OBJECT
FROM MONADS= { 352 } 
WITH ID_D=64889 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=377;
]
GO

CREATE OBJECT
FROM MONADS= { 353 } 
WITH ID_D=64890 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=378;
]
GO

CREATE OBJECT
FROM MONADS= { 354 } 
WITH ID_D=64891 [token
surface_stripped_lowcase:="lesser";
wholesurface:="lesser ";
xmlindex:=379;
]
GO

CREATE OBJECT
FROM MONADS= { 355 } 
WITH ID_D=64892 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=380;
]
GO

CREATE OBJECT
FROM MONADS= { 356 } 
WITH ID_D=64893 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=381;
]
GO

CREATE OBJECT
FROM MONADS= { 357 } 
WITH ID_D=64894 [token
surface_stripped_lowcase:="rule";
wholesurface:="rule ";
xmlindex:=382;
]
GO

CREATE OBJECT
FROM MONADS= { 358 } 
WITH ID_D=64895 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=383;
]
GO

CREATE OBJECT
FROM MONADS= { 359 } 
WITH ID_D=64896 [token
surface_stripped_lowcase:="night";
wholesurface:="night: ";
xmlindex:=384;
]
GO

CREATE OBJECT
FROM MONADS= { 360 } 
WITH ID_D=64897 [token
surface_stripped_lowcase:="he";
wholesurface:="he ";
xmlindex:=386;
]
GO

CREATE OBJECT
FROM MONADS= { 361 } 
WITH ID_D=64898 [token
surface_stripped_lowcase:="made";
wholesurface:="made";
xmlindex:=387;
]
GO

CREATE OBJECT
FROM MONADS= { 362 } 
WITH ID_D=64899 [token
surface_stripped_lowcase:="the";
wholesurface:=" the ";
xmlindex:=388;
]
GO

CREATE OBJECT
FROM MONADS= { 363 } 
WITH ID_D=64900 [token
surface_stripped_lowcase:="stars";
wholesurface:="stars ";
xmlindex:=389;
]
GO

CREATE OBJECT
FROM MONADS= { 364 } 
WITH ID_D=64901 [token
surface_stripped_lowcase:="also";
wholesurface:="also. ";
xmlindex:=390;
]
GO

CREATE OBJECT
FROM MONADS= { 365 } 
WITH ID_D=64902 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=392;
]
GO

CREATE OBJECT
FROM MONADS= { 366 } 
WITH ID_D=64903 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=393;
]
GO

CREATE OBJECT
FROM MONADS= { 367 } 
WITH ID_D=64904 [token
surface_stripped_lowcase:="set";
wholesurface:="set ";
xmlindex:=394;
]
GO

CREATE OBJECT
FROM MONADS= { 368 } 
WITH ID_D=64905 [token
surface_stripped_lowcase:="them";
wholesurface:="them ";
xmlindex:=395;
]
GO

CREATE OBJECT
FROM MONADS= { 369 } 
WITH ID_D=64906 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=396;
]
GO

CREATE OBJECT
FROM MONADS= { 370 } 
WITH ID_D=64907 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=397;
]
GO

CREATE OBJECT
FROM MONADS= { 371 } 
WITH ID_D=64908 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=398;
]
GO

CREATE OBJECT
FROM MONADS= { 372 } 
WITH ID_D=64909 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=399;
]
GO

CREATE OBJECT
FROM MONADS= { 373 } 
WITH ID_D=64910 [token
surface_stripped_lowcase:="heaven";
wholesurface:="heaven ";
xmlindex:=400;
]
GO

CREATE OBJECT
FROM MONADS= { 374 } 
WITH ID_D=64911 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=401;
]
GO

CREATE OBJECT
FROM MONADS= { 375 } 
WITH ID_D=64912 [token
surface_stripped_lowcase:="give";
wholesurface:="give ";
xmlindex:=402;
]
GO

CREATE OBJECT
FROM MONADS= { 376 } 
WITH ID_D=64913 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=403;
]
GO

CREATE OBJECT
FROM MONADS= { 377 } 
WITH ID_D=64914 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=404;
]
GO

CREATE OBJECT
FROM MONADS= { 378 } 
WITH ID_D=64915 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=405;
]
GO

CREATE OBJECT
FROM MONADS= { 379 } 
WITH ID_D=64916 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth, ";
xmlindex:=406;
]
GO

CREATE OBJECT
FROM MONADS= { 380 } 
WITH ID_D=64917 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=408;
]
GO

CREATE OBJECT
FROM MONADS= { 381 } 
WITH ID_D=64918 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=409;
]
GO

CREATE OBJECT
FROM MONADS= { 382 } 
WITH ID_D=64919 [token
surface_stripped_lowcase:="rule";
wholesurface:="rule ";
xmlindex:=410;
]
GO

CREATE OBJECT
FROM MONADS= { 383 } 
WITH ID_D=64920 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=411;
]
GO

CREATE OBJECT
FROM MONADS= { 384 } 
WITH ID_D=64921 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=412;
]
GO

CREATE OBJECT
FROM MONADS= { 385 } 
WITH ID_D=64922 [token
surface_stripped_lowcase:="day";
wholesurface:="day ";
xmlindex:=413;
]
GO

CREATE OBJECT
FROM MONADS= { 386 } 
WITH ID_D=64923 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=414;
]
GO

CREATE OBJECT
FROM MONADS= { 387 } 
WITH ID_D=64924 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=415;
]
GO

CREATE OBJECT
FROM MONADS= { 388 } 
WITH ID_D=64925 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=416;
]
GO

CREATE OBJECT
FROM MONADS= { 389 } 
WITH ID_D=64926 [token
surface_stripped_lowcase:="night";
wholesurface:="night, ";
xmlindex:=417;
]
GO

CREATE OBJECT
FROM MONADS= { 390 } 
WITH ID_D=64927 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=418;
]
GO

CREATE OBJECT
FROM MONADS= { 391 } 
WITH ID_D=64928 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=419;
]
GO

CREATE OBJECT
FROM MONADS= { 392 } 
WITH ID_D=64929 [token
surface_stripped_lowcase:="divide";
wholesurface:="divide ";
xmlindex:=420;
]
GO

CREATE OBJECT
FROM MONADS= { 393 } 
WITH ID_D=64930 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=421;
]
GO

CREATE OBJECT
FROM MONADS= { 394 } 
WITH ID_D=64931 [token
surface_stripped_lowcase:="light";
wholesurface:="light ";
xmlindex:=422;
]
GO

CREATE OBJECT
FROM MONADS= { 395 } 
WITH ID_D=64932 [token
surface_stripped_lowcase:="from";
wholesurface:="from ";
xmlindex:=423;
]
GO

CREATE OBJECT
FROM MONADS= { 396 } 
WITH ID_D=64933 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=424;
]
GO

CREATE OBJECT
FROM MONADS= { 397 } 
WITH ID_D=64934 [token
surface_stripped_lowcase:="darkness";
wholesurface:="darkness: ";
xmlindex:=425;
]
GO

CREATE OBJECT
FROM MONADS= { 398 } 
WITH ID_D=64935 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=426;
]
GO

CREATE OBJECT
FROM MONADS= { 399 } 
WITH ID_D=64936 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=427;
]
GO

CREATE OBJECT
FROM MONADS= { 400 } 
WITH ID_D=64937 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=428;
]
GO

CREATE OBJECT
FROM MONADS= { 401 } 
WITH ID_D=64938 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=429;
]
GO

CREATE OBJECT
FROM MONADS= { 402 } 
WITH ID_D=64939 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=430;
]
GO

CREATE OBJECT
FROM MONADS= { 403 } 
WITH ID_D=64940 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=431;
]
GO

CREATE OBJECT
FROM MONADS= { 404 } 
WITH ID_D=64941 [token
surface_stripped_lowcase:="good";
wholesurface:="good. ";
xmlindex:=432;
]
GO

CREATE OBJECT
FROM MONADS= { 405 } 
WITH ID_D=64942 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=434;
]
GO

CREATE OBJECT
FROM MONADS= { 406 } 
WITH ID_D=64943 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=435;
]
GO

CREATE OBJECT
FROM MONADS= { 407 } 
WITH ID_D=64944 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=436;
]
GO

CREATE OBJECT
FROM MONADS= { 408 } 
WITH ID_D=64945 [token
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
xmlindex:=437;
]
GO

CREATE OBJECT
FROM MONADS= { 409 } 
WITH ID_D=64946 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=438;
]
GO

CREATE OBJECT
FROM MONADS= { 410 } 
WITH ID_D=64947 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=439;
]
GO

CREATE OBJECT
FROM MONADS= { 411 } 
WITH ID_D=64948 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=440;
]
GO

CREATE OBJECT
FROM MONADS= { 412 } 
WITH ID_D=64949 [token
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
xmlindex:=441;
]
GO

CREATE OBJECT
FROM MONADS= { 413 } 
WITH ID_D=64950 [token
surface_stripped_lowcase:="a";
wholesurface:="a ";
xmlindex:=442;
]
GO

CREATE OBJECT
FROM MONADS= { 414 } 
WITH ID_D=64951 [token
surface_stripped_lowcase:="fourth";
wholesurface:="fourth ";
xmlindex:=443;
]
GO

CREATE OBJECT
FROM MONADS= { 415 } 
WITH ID_D=64952 [token
surface_stripped_lowcase:="day";
wholesurface:="day. ";
xmlindex:=444;
]
GO

CREATE OBJECT
FROM MONADS= { 416 } 
WITH ID_D=64953 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=447;
]
GO

CREATE OBJECT
FROM MONADS= { 417 } 
WITH ID_D=64954 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=448;
]
GO

CREATE OBJECT
FROM MONADS= { 418 } 
WITH ID_D=64955 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=449;
]
GO

CREATE OBJECT
FROM MONADS= { 419 } 
WITH ID_D=64956 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=450;
]
GO

CREATE OBJECT
FROM MONADS= { 420 } 
WITH ID_D=64957 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=451;
]
GO

CREATE OBJECT
FROM MONADS= { 421 } 
WITH ID_D=64958 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=452;
]
GO

CREATE OBJECT
FROM MONADS= { 422 } 
WITH ID_D=64959 [token
surface_stripped_lowcase:="swarm";
wholesurface:="swarm ";
xmlindex:=453;
]
GO

CREATE OBJECT
FROM MONADS= { 423 } 
WITH ID_D=64960 [token
surface_stripped_lowcase:="with";
wholesurface:="with ";
xmlindex:=454;
]
GO

CREATE OBJECT
FROM MONADS= { 424 } 
WITH ID_D=64961 [token
surface_stripped_lowcase:="swarms";
wholesurface:="swarms ";
xmlindex:=455;
]
GO

CREATE OBJECT
FROM MONADS= { 425 } 
WITH ID_D=64962 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=456;
]
GO

CREATE OBJECT
FROM MONADS= { 426 } 
WITH ID_D=64963 [token
surface_stripped_lowcase:="living";
wholesurface:="living ";
xmlindex:=457;
]
GO

CREATE OBJECT
FROM MONADS= { 427 } 
WITH ID_D=64964 [token
surface_stripped_lowcase:="creatures";
wholesurface:="creatures, ";
xmlindex:=458;
]
GO

CREATE OBJECT
FROM MONADS= { 428 } 
WITH ID_D=64965 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=459;
]
GO

CREATE OBJECT
FROM MONADS= { 429 } 
WITH ID_D=64966 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=460;
]
GO

CREATE OBJECT
FROM MONADS= { 430 } 
WITH ID_D=64967 [token
surface_stripped_lowcase:="birds";
wholesurface:="birds ";
xmlindex:=461;
]
GO

CREATE OBJECT
FROM MONADS= { 431 } 
WITH ID_D=64968 [token
surface_stripped_lowcase:="fly";
wholesurface:="fly ";
xmlindex:=462;
]
GO

CREATE OBJECT
FROM MONADS= { 432 } 
WITH ID_D=64969 [token
surface_stripped_lowcase:="above";
wholesurface:="above ";
xmlindex:=463;
]
GO

CREATE OBJECT
FROM MONADS= { 433 } 
WITH ID_D=64970 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=464;
]
GO

CREATE OBJECT
FROM MONADS= { 434 } 
WITH ID_D=64971 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=465;
]
GO

CREATE OBJECT
FROM MONADS= { 435 } 
WITH ID_D=64972 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=466;
]
GO

CREATE OBJECT
FROM MONADS= { 436 } 
WITH ID_D=64973 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=467;
]
GO

CREATE OBJECT
FROM MONADS= { 437 } 
WITH ID_D=64974 [token
surface_stripped_lowcase:="open";
wholesurface:="open ";
xmlindex:=468;
]
GO

CREATE OBJECT
FROM MONADS= { 438 } 
WITH ID_D=64975 [token
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
xmlindex:=469;
]
GO

CREATE OBJECT
FROM MONADS= { 439 } 
WITH ID_D=64976 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=470;
]
GO

CREATE OBJECT
FROM MONADS= { 440 } 
WITH ID_D=64977 [token
surface_stripped_lowcase:="heaven";
wholesurface:="heaven. ";
xmlindex:=471;
]
GO

CREATE OBJECT
FROM MONADS= { 441 } 
WITH ID_D=64978 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=473;
]
GO

CREATE OBJECT
FROM MONADS= { 442 } 
WITH ID_D=64979 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=474;
]
GO

CREATE OBJECT
FROM MONADS= { 443 } 
WITH ID_D=64980 [token
surface_stripped_lowcase:="created";
wholesurface:="created ";
xmlindex:=475;
]
GO

CREATE OBJECT
FROM MONADS= { 444 } 
WITH ID_D=64981 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=476;
]
GO

CREATE OBJECT
FROM MONADS= { 445 } 
WITH ID_D=64982 [token
surface_stripped_lowcase:="great";
wholesurface:="great ";
xmlindex:=477;
]
GO

CREATE OBJECT
FROM MONADS= { 446 } 
WITH ID_D=64983 [token
surface_stripped_lowcase:="sea";
wholesurface:="sea-monsters, ";
xmlindex:=478;
]
GO

CREATE OBJECT
FROM MONADS= { 447 } 
WITH ID_D=64984 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=479;
]
GO

CREATE OBJECT
FROM MONADS= { 448 } 
WITH ID_D=64985 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=480;
]
GO

CREATE OBJECT
FROM MONADS= { 449 } 
WITH ID_D=64986 [token
surface_stripped_lowcase:="living";
wholesurface:="living ";
xmlindex:=481;
]
GO

CREATE OBJECT
FROM MONADS= { 450 } 
WITH ID_D=64987 [token
surface_stripped_lowcase:="creature";
wholesurface:="creature ";
xmlindex:=482;
]
GO

CREATE OBJECT
FROM MONADS= { 451 } 
WITH ID_D=64988 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=483;
]
GO

CREATE OBJECT
FROM MONADS= { 452 } 
WITH ID_D=64989 [token
surface_stripped_lowcase:="moveth";
wholesurface:="moveth, ";
xmlindex:=484;
]
GO

CREATE OBJECT
FROM MONADS= { 453 } 
WITH ID_D=64990 [token
surface_stripped_lowcase:="wherewith";
wholesurface:="wherewith ";
xmlindex:=485;
]
GO

CREATE OBJECT
FROM MONADS= { 454 } 
WITH ID_D=64991 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=486;
]
GO

CREATE OBJECT
FROM MONADS= { 455 } 
WITH ID_D=64992 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=487;
]
GO

CREATE OBJECT
FROM MONADS= { 456 } 
WITH ID_D=64993 [token
surface_stripped_lowcase:="swarmed";
wholesurface:="swarmed, ";
xmlindex:=488;
]
GO

CREATE OBJECT
FROM MONADS= { 457 } 
WITH ID_D=64994 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=489;
]
GO

CREATE OBJECT
FROM MONADS= { 458 } 
WITH ID_D=64995 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=490;
]
GO

CREATE OBJECT
FROM MONADS= { 459 } 
WITH ID_D=64996 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind, ";
xmlindex:=491;
]
GO

CREATE OBJECT
FROM MONADS= { 460 } 
WITH ID_D=64997 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=492;
]
GO

CREATE OBJECT
FROM MONADS= { 461 } 
WITH ID_D=64998 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=493;
]
GO

CREATE OBJECT
FROM MONADS= { 462 } 
WITH ID_D=64999 [token
surface_stripped_lowcase:="winged";
wholesurface:="winged ";
xmlindex:=494;
]
GO

CREATE OBJECT
FROM MONADS= { 463 } 
WITH ID_D=65000 [token
surface_stripped_lowcase:="bird";
wholesurface:="bird ";
xmlindex:=495;
]
GO

CREATE OBJECT
FROM MONADS= { 464 } 
WITH ID_D=65001 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=496;
]
GO

CREATE OBJECT
FROM MONADS= { 465 } 
WITH ID_D=65002 [token
surface_stripped_lowcase:="its";
wholesurface:="its ";
xmlindex:=497;
]
GO

CREATE OBJECT
FROM MONADS= { 466 } 
WITH ID_D=65003 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind: ";
xmlindex:=498;
]
GO

CREATE OBJECT
FROM MONADS= { 467 } 
WITH ID_D=65004 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=499;
]
GO

CREATE OBJECT
FROM MONADS= { 468 } 
WITH ID_D=65005 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=500;
]
GO

CREATE OBJECT
FROM MONADS= { 469 } 
WITH ID_D=65006 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=501;
]
GO

CREATE OBJECT
FROM MONADS= { 470 } 
WITH ID_D=65007 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=502;
]
GO

CREATE OBJECT
FROM MONADS= { 471 } 
WITH ID_D=65008 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=503;
]
GO

CREATE OBJECT
FROM MONADS= { 472 } 
WITH ID_D=65009 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=504;
]
GO

CREATE OBJECT
FROM MONADS= { 473 } 
WITH ID_D=65010 [token
surface_stripped_lowcase:="good";
wholesurface:="good. ";
xmlindex:=505;
]
GO

CREATE OBJECT
FROM MONADS= { 474 } 
WITH ID_D=65011 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=507;
]
GO

CREATE OBJECT
FROM MONADS= { 475 } 
WITH ID_D=65012 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=508;
]
GO

CREATE OBJECT
FROM MONADS= { 476 } 
WITH ID_D=65013 [token
surface_stripped_lowcase:="blessed";
wholesurface:="blessed ";
xmlindex:=509;
]
GO

CREATE OBJECT
FROM MONADS= { 477 } 
WITH ID_D=65014 [token
surface_stripped_lowcase:="them";
wholesurface:="them, ";
xmlindex:=510;
]
GO

CREATE OBJECT
FROM MONADS= { 478 } 
WITH ID_D=65015 [token
surface_stripped_lowcase:="saying";
wholesurface:="saying, ";
xmlindex:=511;
]
GO

CREATE OBJECT
FROM MONADS= { 479 } 
WITH ID_D=65016 [token
surface_stripped_lowcase:="be";
wholesurface:="Be ";
xmlindex:=512;
]
GO

CREATE OBJECT
FROM MONADS= { 480 } 
WITH ID_D=65017 [token
surface_stripped_lowcase:="fruitful";
wholesurface:="fruitful, ";
xmlindex:=513;
]
GO

CREATE OBJECT
FROM MONADS= { 481 } 
WITH ID_D=65018 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=514;
]
GO

CREATE OBJECT
FROM MONADS= { 482 } 
WITH ID_D=65019 [token
surface_stripped_lowcase:="multiply";
wholesurface:="multiply, ";
xmlindex:=515;
]
GO

CREATE OBJECT
FROM MONADS= { 483 } 
WITH ID_D=65020 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=516;
]
GO

CREATE OBJECT
FROM MONADS= { 484 } 
WITH ID_D=65021 [token
surface_stripped_lowcase:="fill";
wholesurface:="fill ";
xmlindex:=517;
]
GO

CREATE OBJECT
FROM MONADS= { 485 } 
WITH ID_D=65022 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=518;
]
GO

CREATE OBJECT
FROM MONADS= { 486 } 
WITH ID_D=65023 [token
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
xmlindex:=519;
]
GO

CREATE OBJECT
FROM MONADS= { 487 } 
WITH ID_D=65024 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=520;
]
GO

CREATE OBJECT
FROM MONADS= { 488 } 
WITH ID_D=65025 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=521;
]
GO

CREATE OBJECT
FROM MONADS= { 489 } 
WITH ID_D=65026 [token
surface_stripped_lowcase:="seas";
wholesurface:="seas, ";
xmlindex:=522;
]
GO

CREATE OBJECT
FROM MONADS= { 490 } 
WITH ID_D=65027 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=523;
]
GO

CREATE OBJECT
FROM MONADS= { 491 } 
WITH ID_D=65028 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=524;
]
GO

CREATE OBJECT
FROM MONADS= { 492 } 
WITH ID_D=65029 [token
surface_stripped_lowcase:="birds";
wholesurface:="birds ";
xmlindex:=525;
]
GO

CREATE OBJECT
FROM MONADS= { 493 } 
WITH ID_D=65030 [token
surface_stripped_lowcase:="multiply";
wholesurface:="multiply ";
xmlindex:=526;
]
GO

CREATE OBJECT
FROM MONADS= { 494 } 
WITH ID_D=65031 [token
surface_stripped_lowcase:="on";
wholesurface:="on ";
xmlindex:=527;
]
GO

CREATE OBJECT
FROM MONADS= { 495 } 
WITH ID_D=65032 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=528;
]
GO

CREATE OBJECT
FROM MONADS= { 496 } 
WITH ID_D=65033 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth. ";
xmlindex:=529;
]
GO

CREATE OBJECT
FROM MONADS= { 497 } 
WITH ID_D=65034 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=531;
]
GO

CREATE OBJECT
FROM MONADS= { 498 } 
WITH ID_D=65035 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=532;
]
GO

CREATE OBJECT
FROM MONADS= { 499 } 
WITH ID_D=65036 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=533;
]
GO

CREATE OBJECT
FROM MONADS= { 500 } 
WITH ID_D=65037 [token
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
xmlindex:=534;
]
GO

CREATE OBJECT
FROM MONADS= { 501 } 
WITH ID_D=65038 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=535;
]
GO

CREATE OBJECT
FROM MONADS= { 502 } 
WITH ID_D=65039 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=536;
]
GO

CREATE OBJECT
FROM MONADS= { 503 } 
WITH ID_D=65040 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=537;
]
GO

CREATE OBJECT
FROM MONADS= { 504 } 
WITH ID_D=65041 [token
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
xmlindex:=538;
]
GO

CREATE OBJECT
FROM MONADS= { 505 } 
WITH ID_D=65042 [token
surface_stripped_lowcase:="a";
wholesurface:="a ";
xmlindex:=539;
]
GO

CREATE OBJECT
FROM MONADS= { 506 } 
WITH ID_D=65043 [token
surface_stripped_lowcase:="fifth";
wholesurface:="fifth ";
xmlindex:=540;
]
GO

CREATE OBJECT
FROM MONADS= { 507 } 
WITH ID_D=65044 [token
surface_stripped_lowcase:="day";
wholesurface:="day. ";
xmlindex:=541;
]
GO

CREATE OBJECT
FROM MONADS= { 508 } 
WITH ID_D=65045 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=544;
]
GO

CREATE OBJECT
FROM MONADS= { 509 } 
WITH ID_D=65046 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=545;
]
GO

CREATE OBJECT
FROM MONADS= { 510 } 
WITH ID_D=65047 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=546;
]
GO

CREATE OBJECT
FROM MONADS= { 511 } 
WITH ID_D=65048 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=547;
]
GO

CREATE OBJECT
FROM MONADS= { 512 } 
WITH ID_D=65049 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=548;
]
GO

CREATE OBJECT
FROM MONADS= { 513 } 
WITH ID_D=65050 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=549;
]
GO

CREATE OBJECT
FROM MONADS= { 514 } 
WITH ID_D=65051 [token
surface_stripped_lowcase:="bring";
wholesurface:="bring ";
xmlindex:=550;
]
GO

CREATE OBJECT
FROM MONADS= { 515 } 
WITH ID_D=65052 [token
surface_stripped_lowcase:="forth";
wholesurface:="forth ";
xmlindex:=551;
]
GO

CREATE OBJECT
FROM MONADS= { 516 } 
WITH ID_D=65053 [token
surface_stripped_lowcase:="living";
wholesurface:="living ";
xmlindex:=552;
]
GO

CREATE OBJECT
FROM MONADS= { 517 } 
WITH ID_D=65054 [token
surface_stripped_lowcase:="creatures";
wholesurface:="creatures ";
xmlindex:=553;
]
GO

CREATE OBJECT
FROM MONADS= { 518 } 
WITH ID_D=65055 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=554;
]
GO

CREATE OBJECT
FROM MONADS= { 519 } 
WITH ID_D=65056 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=555;
]
GO

CREATE OBJECT
FROM MONADS= { 520 } 
WITH ID_D=65057 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind, ";
xmlindex:=556;
]
GO

CREATE OBJECT
FROM MONADS= { 521 } 
WITH ID_D=65058 [token
surface_stripped_lowcase:="cattle";
wholesurface:="cattle, ";
xmlindex:=557;
]
GO

CREATE OBJECT
FROM MONADS= { 522 } 
WITH ID_D=65059 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=558;
]
GO

CREATE OBJECT
FROM MONADS= { 523 } 
WITH ID_D=65060 [token
surface_stripped_lowcase:="creeping";
wholesurface:="creeping ";
xmlindex:=559;
]
GO

CREATE OBJECT
FROM MONADS= { 524 } 
WITH ID_D=65061 [token
surface_stripped_lowcase:="things";
wholesurface:="things, ";
xmlindex:=560;
]
GO

CREATE OBJECT
FROM MONADS= { 525 } 
WITH ID_D=65062 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=561;
]
GO

CREATE OBJECT
FROM MONADS= { 526 } 
WITH ID_D=65063 [token
surface_stripped_lowcase:="beasts";
wholesurface:="beasts ";
xmlindex:=562;
]
GO

CREATE OBJECT
FROM MONADS= { 527 } 
WITH ID_D=65064 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=563;
]
GO

CREATE OBJECT
FROM MONADS= { 528 } 
WITH ID_D=65065 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=564;
]
GO

CREATE OBJECT
FROM MONADS= { 529 } 
WITH ID_D=65066 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=565;
]
GO

CREATE OBJECT
FROM MONADS= { 530 } 
WITH ID_D=65067 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=566;
]
GO

CREATE OBJECT
FROM MONADS= { 531 } 
WITH ID_D=65068 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=567;
]
GO

CREATE OBJECT
FROM MONADS= { 532 } 
WITH ID_D=65069 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind: ";
xmlindex:=568;
]
GO

CREATE OBJECT
FROM MONADS= { 533 } 
WITH ID_D=65070 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=569;
]
GO

CREATE OBJECT
FROM MONADS= { 534 } 
WITH ID_D=65071 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=570;
]
GO

CREATE OBJECT
FROM MONADS= { 535 } 
WITH ID_D=65072 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=571;
]
GO

CREATE OBJECT
FROM MONADS= { 536 } 
WITH ID_D=65073 [token
surface_stripped_lowcase:="so";
wholesurface:="so. ";
xmlindex:=572;
]
GO

CREATE OBJECT
FROM MONADS= { 537 } 
WITH ID_D=65074 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=574;
]
GO

CREATE OBJECT
FROM MONADS= { 538 } 
WITH ID_D=65075 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=575;
]
GO

CREATE OBJECT
FROM MONADS= { 539 } 
WITH ID_D=65076 [token
surface_stripped_lowcase:="made";
wholesurface:="made ";
xmlindex:=576;
]
GO

CREATE OBJECT
FROM MONADS= { 540 } 
WITH ID_D=65077 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=577;
]
GO

CREATE OBJECT
FROM MONADS= { 541 } 
WITH ID_D=65078 [token
surface_stripped_lowcase:="beasts";
wholesurface:="beasts ";
xmlindex:=578;
]
GO

CREATE OBJECT
FROM MONADS= { 542 } 
WITH ID_D=65079 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=579;
]
GO

CREATE OBJECT
FROM MONADS= { 543 } 
WITH ID_D=65080 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=580;
]
GO

CREATE OBJECT
FROM MONADS= { 544 } 
WITH ID_D=65081 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
xmlindex:=581;
]
GO

CREATE OBJECT
FROM MONADS= { 545 } 
WITH ID_D=65082 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=582;
]
GO

CREATE OBJECT
FROM MONADS= { 546 } 
WITH ID_D=65083 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=583;
]
GO

CREATE OBJECT
FROM MONADS= { 547 } 
WITH ID_D=65084 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind, ";
xmlindex:=584;
]
GO

CREATE OBJECT
FROM MONADS= { 548 } 
WITH ID_D=65085 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=585;
]
GO

CREATE OBJECT
FROM MONADS= { 549 } 
WITH ID_D=65086 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=586;
]
GO

CREATE OBJECT
FROM MONADS= { 550 } 
WITH ID_D=65087 [token
surface_stripped_lowcase:="cattle";
wholesurface:="cattle ";
xmlindex:=587;
]
GO

CREATE OBJECT
FROM MONADS= { 551 } 
WITH ID_D=65088 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=588;
]
GO

CREATE OBJECT
FROM MONADS= { 552 } 
WITH ID_D=65089 [token
surface_stripped_lowcase:="their";
wholesurface:="their ";
xmlindex:=589;
]
GO

CREATE OBJECT
FROM MONADS= { 553 } 
WITH ID_D=65090 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind, ";
xmlindex:=590;
]
GO

CREATE OBJECT
FROM MONADS= { 554 } 
WITH ID_D=65091 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=591;
]
GO

CREATE OBJECT
FROM MONADS= { 555 } 
WITH ID_D=65092 [token
surface_stripped_lowcase:="everything";
wholesurface:="everything ";
xmlindex:=592;
]
GO

CREATE OBJECT
FROM MONADS= { 556 } 
WITH ID_D=65093 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=593;
]
GO

CREATE OBJECT
FROM MONADS= { 557 } 
WITH ID_D=65094 [token
surface_stripped_lowcase:="creepeth";
wholesurface:="creepeth ";
xmlindex:=594;
]
GO

CREATE OBJECT
FROM MONADS= { 558 } 
WITH ID_D=65095 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=595;
]
GO

CREATE OBJECT
FROM MONADS= { 559 } 
WITH ID_D=65096 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=596;
]
GO

CREATE OBJECT
FROM MONADS= { 560 } 
WITH ID_D=65097 [token
surface_stripped_lowcase:="ground";
wholesurface:="ground ";
xmlindex:=597;
]
GO

CREATE OBJECT
FROM MONADS= { 561 } 
WITH ID_D=65098 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=598;
]
GO

CREATE OBJECT
FROM MONADS= { 562 } 
WITH ID_D=65099 [token
surface_stripped_lowcase:="its";
wholesurface:="its ";
xmlindex:=599;
]
GO

CREATE OBJECT
FROM MONADS= { 563 } 
WITH ID_D=65100 [token
surface_stripped_lowcase:="kind";
wholesurface:="kind: ";
xmlindex:=600;
]
GO

CREATE OBJECT
FROM MONADS= { 564 } 
WITH ID_D=65101 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=601;
]
GO

CREATE OBJECT
FROM MONADS= { 565 } 
WITH ID_D=65102 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=602;
]
GO

CREATE OBJECT
FROM MONADS= { 566 } 
WITH ID_D=65103 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=603;
]
GO

CREATE OBJECT
FROM MONADS= { 567 } 
WITH ID_D=65104 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=604;
]
GO

CREATE OBJECT
FROM MONADS= { 568 } 
WITH ID_D=65105 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=605;
]
GO

CREATE OBJECT
FROM MONADS= { 569 } 
WITH ID_D=65106 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=606;
]
GO

CREATE OBJECT
FROM MONADS= { 570 } 
WITH ID_D=65107 [token
surface_stripped_lowcase:="good";
wholesurface:="good. ";
xmlindex:=607;
]
GO

CREATE OBJECT
FROM MONADS= { 571 } 
WITH ID_D=65108 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=609;
]
GO

CREATE OBJECT
FROM MONADS= { 572 } 
WITH ID_D=65109 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=610;
]
GO

CREATE OBJECT
FROM MONADS= { 573 } 
WITH ID_D=65110 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=611;
]
GO

CREATE OBJECT
FROM MONADS= { 574 } 
WITH ID_D=65111 [token
surface_stripped_lowcase:="let";
wholesurface:="Let ";
xmlindex:=612;
]
GO

CREATE OBJECT
FROM MONADS= { 575 } 
WITH ID_D=65112 [token
surface_stripped_lowcase:="us";
wholesurface:="us ";
xmlindex:=613;
]
GO

CREATE OBJECT
FROM MONADS= { 576 } 
WITH ID_D=65113 [token
surface_stripped_lowcase:="make";
wholesurface:="make ";
xmlindex:=614;
]
GO

CREATE OBJECT
FROM MONADS= { 577 } 
WITH ID_D=65114 [token
surface_stripped_lowcase:="man";
wholesurface:="man ";
xmlindex:=615;
]
GO

CREATE OBJECT
FROM MONADS= { 578 } 
WITH ID_D=65115 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=616;
]
GO

CREATE OBJECT
FROM MONADS= { 579 } 
WITH ID_D=65116 [token
surface_stripped_lowcase:="our";
wholesurface:="our ";
xmlindex:=617;
]
GO

CREATE OBJECT
FROM MONADS= { 580 } 
WITH ID_D=65117 [token
surface_stripped_lowcase:="image";
wholesurface:="image, ";
xmlindex:=618;
]
GO

CREATE OBJECT
FROM MONADS= { 581 } 
WITH ID_D=65118 [token
surface_stripped_lowcase:="after";
wholesurface:="after ";
xmlindex:=619;
]
GO

CREATE OBJECT
FROM MONADS= { 582 } 
WITH ID_D=65119 [token
surface_stripped_lowcase:="our";
wholesurface:="our ";
xmlindex:=620;
]
GO

CREATE OBJECT
FROM MONADS= { 583 } 
WITH ID_D=65120 [token
surface_stripped_lowcase:="likeness";
wholesurface:="likeness: ";
xmlindex:=621;
]
GO

CREATE OBJECT
FROM MONADS= { 584 } 
WITH ID_D=65121 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=622;
]
GO

CREATE OBJECT
FROM MONADS= { 585 } 
WITH ID_D=65122 [token
surface_stripped_lowcase:="let";
wholesurface:="let ";
xmlindex:=623;
]
GO

CREATE OBJECT
FROM MONADS= { 586 } 
WITH ID_D=65123 [token
surface_stripped_lowcase:="them";
wholesurface:="them ";
xmlindex:=624;
]
GO

CREATE OBJECT
FROM MONADS= { 587 } 
WITH ID_D=65124 [token
surface_stripped_lowcase:="have";
wholesurface:="have ";
xmlindex:=625;
]
GO

CREATE OBJECT
FROM MONADS= { 588 } 
WITH ID_D=65125 [token
surface_stripped_lowcase:="dominion";
wholesurface:="dominion ";
xmlindex:=626;
]
GO

CREATE OBJECT
FROM MONADS= { 589 } 
WITH ID_D=65126 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=627;
]
GO

CREATE OBJECT
FROM MONADS= { 590 } 
WITH ID_D=65127 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=628;
]
GO

CREATE OBJECT
FROM MONADS= { 591 } 
WITH ID_D=65128 [token
surface_stripped_lowcase:="fish";
wholesurface:="fish ";
xmlindex:=629;
]
GO

CREATE OBJECT
FROM MONADS= { 592 } 
WITH ID_D=65129 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=630;
]
GO

CREATE OBJECT
FROM MONADS= { 593 } 
WITH ID_D=65130 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=631;
]
GO

CREATE OBJECT
FROM MONADS= { 594 } 
WITH ID_D=65131 [token
surface_stripped_lowcase:="sea";
wholesurface:="sea, ";
xmlindex:=632;
]
GO

CREATE OBJECT
FROM MONADS= { 595 } 
WITH ID_D=65132 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=633;
]
GO

CREATE OBJECT
FROM MONADS= { 596 } 
WITH ID_D=65133 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=634;
]
GO

CREATE OBJECT
FROM MONADS= { 597 } 
WITH ID_D=65134 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=635;
]
GO

CREATE OBJECT
FROM MONADS= { 598 } 
WITH ID_D=65135 [token
surface_stripped_lowcase:="birds";
wholesurface:="birds ";
xmlindex:=636;
]
GO

CREATE OBJECT
FROM MONADS= { 599 } 
WITH ID_D=65136 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=637;
]
GO

CREATE OBJECT
FROM MONADS= { 600 } 
WITH ID_D=65137 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=638;
]
GO

CREATE OBJECT
FROM MONADS= { 601 } 
WITH ID_D=65138 [token
surface_stripped_lowcase:="heavens";
wholesurface:="heavens, ";
xmlindex:=639;
]
GO

CREATE OBJECT
FROM MONADS= { 602 } 
WITH ID_D=65139 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=640;
]
GO

CREATE OBJECT
FROM MONADS= { 603 } 
WITH ID_D=65140 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=641;
]
GO

CREATE OBJECT
FROM MONADS= { 604 } 
WITH ID_D=65141 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=642;
]
GO

CREATE OBJECT
FROM MONADS= { 605 } 
WITH ID_D=65142 [token
surface_stripped_lowcase:="cattle";
wholesurface:="cattle, ";
xmlindex:=643;
]
GO

CREATE OBJECT
FROM MONADS= { 606 } 
WITH ID_D=65143 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=644;
]
GO

CREATE OBJECT
FROM MONADS= { 607 } 
WITH ID_D=65144 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=645;
]
GO

CREATE OBJECT
FROM MONADS= { 608 } 
WITH ID_D=65145 [token
surface_stripped_lowcase:="all";
wholesurface:="all ";
xmlindex:=646;
]
GO

CREATE OBJECT
FROM MONADS= { 609 } 
WITH ID_D=65146 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=647;
]
GO

CREATE OBJECT
FROM MONADS= { 610 } 
WITH ID_D=65147 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth, ";
xmlindex:=648;
]
GO

CREATE OBJECT
FROM MONADS= { 611 } 
WITH ID_D=65148 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=649;
]
GO

CREATE OBJECT
FROM MONADS= { 612 } 
WITH ID_D=65149 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=650;
]
GO

CREATE OBJECT
FROM MONADS= { 613 } 
WITH ID_D=65150 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=651;
]
GO

CREATE OBJECT
FROM MONADS= { 614 } 
WITH ID_D=65151 [token
surface_stripped_lowcase:="creeping";
wholesurface:="creeping ";
xmlindex:=652;
]
GO

CREATE OBJECT
FROM MONADS= { 615 } 
WITH ID_D=65152 [token
surface_stripped_lowcase:="thing";
wholesurface:="thing ";
xmlindex:=653;
]
GO

CREATE OBJECT
FROM MONADS= { 616 } 
WITH ID_D=65153 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=654;
]
GO

CREATE OBJECT
FROM MONADS= { 617 } 
WITH ID_D=65154 [token
surface_stripped_lowcase:="creepeth";
wholesurface:="creepeth ";
xmlindex:=655;
]
GO

CREATE OBJECT
FROM MONADS= { 618 } 
WITH ID_D=65155 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=656;
]
GO

CREATE OBJECT
FROM MONADS= { 619 } 
WITH ID_D=65156 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=657;
]
GO

CREATE OBJECT
FROM MONADS= { 620 } 
WITH ID_D=65157 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth. ";
xmlindex:=658;
]
GO

CREATE OBJECT
FROM MONADS= { 621 } 
WITH ID_D=65158 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=660;
]
GO

CREATE OBJECT
FROM MONADS= { 622 } 
WITH ID_D=65159 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=661;
]
GO

CREATE OBJECT
FROM MONADS= { 623 } 
WITH ID_D=65160 [token
surface_stripped_lowcase:="created";
wholesurface:="created ";
xmlindex:=662;
]
GO

CREATE OBJECT
FROM MONADS= { 624 } 
WITH ID_D=65161 [token
surface_stripped_lowcase:="man";
wholesurface:="man ";
xmlindex:=663;
]
GO

CREATE OBJECT
FROM MONADS= { 625 } 
WITH ID_D=65162 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=664;
]
GO

CREATE OBJECT
FROM MONADS= { 626 } 
WITH ID_D=65163 [token
surface_stripped_lowcase:="his";
wholesurface:="his ";
xmlindex:=665;
]
GO

CREATE OBJECT
FROM MONADS= { 627 } 
WITH ID_D=65164 [token
surface_stripped_lowcase:="own";
wholesurface:="own ";
xmlindex:=666;
]
GO

CREATE OBJECT
FROM MONADS= { 628 } 
WITH ID_D=65165 [token
surface_stripped_lowcase:="image";
wholesurface:="image, ";
xmlindex:=667;
]
GO

CREATE OBJECT
FROM MONADS= { 629 } 
WITH ID_D=65166 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=668;
]
GO

CREATE OBJECT
FROM MONADS= { 630 } 
WITH ID_D=65167 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=669;
]
GO

CREATE OBJECT
FROM MONADS= { 631 } 
WITH ID_D=65168 [token
surface_stripped_lowcase:="image";
wholesurface:="image ";
xmlindex:=670;
]
GO

CREATE OBJECT
FROM MONADS= { 632 } 
WITH ID_D=65169 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=671;
]
GO

CREATE OBJECT
FROM MONADS= { 633 } 
WITH ID_D=65170 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=672;
]
GO

CREATE OBJECT
FROM MONADS= { 634 } 
WITH ID_D=65171 [token
surface_stripped_lowcase:="created";
wholesurface:="created ";
xmlindex:=673;
]
GO

CREATE OBJECT
FROM MONADS= { 635 } 
WITH ID_D=65172 [token
surface_stripped_lowcase:="he";
wholesurface:="he ";
xmlindex:=674;
]
GO

CREATE OBJECT
FROM MONADS= { 636 } 
WITH ID_D=65173 [token
surface_stripped_lowcase:="him";
wholesurface:="him; ";
xmlindex:=675;
]
GO

CREATE OBJECT
FROM MONADS= { 637 } 
WITH ID_D=65174 [token
surface_stripped_lowcase:="male";
wholesurface:="male ";
xmlindex:=676;
]
GO

CREATE OBJECT
FROM MONADS= { 638 } 
WITH ID_D=65175 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=677;
]
GO

CREATE OBJECT
FROM MONADS= { 639 } 
WITH ID_D=65176 [token
surface_stripped_lowcase:="female";
wholesurface:="female ";
xmlindex:=678;
]
GO

CREATE OBJECT
FROM MONADS= { 640 } 
WITH ID_D=65177 [token
surface_stripped_lowcase:="created";
wholesurface:="created ";
xmlindex:=679;
]
GO

CREATE OBJECT
FROM MONADS= { 641 } 
WITH ID_D=65178 [token
surface_stripped_lowcase:="he";
wholesurface:="he ";
xmlindex:=680;
]
GO

CREATE OBJECT
FROM MONADS= { 642 } 
WITH ID_D=65179 [token
surface_stripped_lowcase:="them";
wholesurface:="them. ";
xmlindex:=681;
]
GO

CREATE OBJECT
FROM MONADS= { 643 } 
WITH ID_D=65180 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=683;
]
GO

CREATE OBJECT
FROM MONADS= { 644 } 
WITH ID_D=65181 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=684;
]
GO

CREATE OBJECT
FROM MONADS= { 645 } 
WITH ID_D=65182 [token
surface_stripped_lowcase:="blessed";
wholesurface:="blessed ";
xmlindex:=685;
]
GO

CREATE OBJECT
FROM MONADS= { 646 } 
WITH ID_D=65183 [token
surface_stripped_lowcase:="them";
wholesurface:="them: ";
xmlindex:=686;
]
GO

CREATE OBJECT
FROM MONADS= { 647 } 
WITH ID_D=65184 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=687;
]
GO

CREATE OBJECT
FROM MONADS= { 648 } 
WITH ID_D=65185 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=688;
]
GO

CREATE OBJECT
FROM MONADS= { 649 } 
WITH ID_D=65186 [token
surface_stripped_lowcase:="said";
wholesurface:="said ";
xmlindex:=689;
]
GO

CREATE OBJECT
FROM MONADS= { 650 } 
WITH ID_D=65187 [token
surface_stripped_lowcase:="unto";
wholesurface:="unto ";
xmlindex:=690;
]
GO

CREATE OBJECT
FROM MONADS= { 651 } 
WITH ID_D=65188 [token
surface_stripped_lowcase:="them";
wholesurface:="them, ";
xmlindex:=691;
]
GO

CREATE OBJECT
FROM MONADS= { 652 } 
WITH ID_D=65189 [token
surface_stripped_lowcase:="be";
wholesurface:="Be ";
xmlindex:=692;
]
GO

CREATE OBJECT
FROM MONADS= { 653 } 
WITH ID_D=65190 [token
surface_stripped_lowcase:="fruitful";
wholesurface:="fruitful, ";
xmlindex:=693;
]
GO

CREATE OBJECT
FROM MONADS= { 654 } 
WITH ID_D=65191 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=694;
]
GO

CREATE OBJECT
FROM MONADS= { 655 } 
WITH ID_D=65192 [token
surface_stripped_lowcase:="multiply";
wholesurface:="multiply, ";
xmlindex:=695;
]
GO

CREATE OBJECT
FROM MONADS= { 656 } 
WITH ID_D=65193 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=696;
]
GO

CREATE OBJECT
FROM MONADS= { 657 } 
WITH ID_D=65194 [token
surface_stripped_lowcase:="replenish";
wholesurface:="replenish ";
xmlindex:=697;
]
GO

CREATE OBJECT
FROM MONADS= { 658 } 
WITH ID_D=65195 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=698;
]
GO

CREATE OBJECT
FROM MONADS= { 659 } 
WITH ID_D=65196 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth, ";
xmlindex:=699;
]
GO

CREATE OBJECT
FROM MONADS= { 660 } 
WITH ID_D=65197 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=700;
]
GO

CREATE OBJECT
FROM MONADS= { 661 } 
WITH ID_D=65198 [token
surface_stripped_lowcase:="subdue";
wholesurface:="subdue ";
xmlindex:=701;
]
GO

CREATE OBJECT
FROM MONADS= { 662 } 
WITH ID_D=65199 [token
surface_stripped_lowcase:="it";
wholesurface:="it; ";
xmlindex:=702;
]
GO

CREATE OBJECT
FROM MONADS= { 663 } 
WITH ID_D=65200 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=703;
]
GO

CREATE OBJECT
FROM MONADS= { 664 } 
WITH ID_D=65201 [token
surface_stripped_lowcase:="have";
wholesurface:="have ";
xmlindex:=704;
]
GO

CREATE OBJECT
FROM MONADS= { 665 } 
WITH ID_D=65202 [token
surface_stripped_lowcase:="dominion";
wholesurface:="dominion ";
xmlindex:=705;
]
GO

CREATE OBJECT
FROM MONADS= { 666 } 
WITH ID_D=65203 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=706;
]
GO

CREATE OBJECT
FROM MONADS= { 667 } 
WITH ID_D=65204 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=707;
]
GO

CREATE OBJECT
FROM MONADS= { 668 } 
WITH ID_D=65205 [token
surface_stripped_lowcase:="fish";
wholesurface:="fish ";
xmlindex:=708;
]
GO

CREATE OBJECT
FROM MONADS= { 669 } 
WITH ID_D=65206 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=709;
]
GO

CREATE OBJECT
FROM MONADS= { 670 } 
WITH ID_D=65207 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=710;
]
GO

CREATE OBJECT
FROM MONADS= { 671 } 
WITH ID_D=65208 [token
surface_stripped_lowcase:="sea";
wholesurface:="sea, ";
xmlindex:=711;
]
GO

CREATE OBJECT
FROM MONADS= { 672 } 
WITH ID_D=65209 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=712;
]
GO

CREATE OBJECT
FROM MONADS= { 673 } 
WITH ID_D=65210 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=713;
]
GO

CREATE OBJECT
FROM MONADS= { 674 } 
WITH ID_D=65211 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=714;
]
GO

CREATE OBJECT
FROM MONADS= { 675 } 
WITH ID_D=65212 [token
surface_stripped_lowcase:="birds";
wholesurface:="birds ";
xmlindex:=715;
]
GO

CREATE OBJECT
FROM MONADS= { 676 } 
WITH ID_D=65213 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=716;
]
GO

CREATE OBJECT
FROM MONADS= { 677 } 
WITH ID_D=65214 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=717;
]
GO

CREATE OBJECT
FROM MONADS= { 678 } 
WITH ID_D=65215 [token
surface_stripped_lowcase:="heavens";
wholesurface:="heavens, ";
xmlindex:=718;
]
GO

CREATE OBJECT
FROM MONADS= { 679 } 
WITH ID_D=65216 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=719;
]
GO

CREATE OBJECT
FROM MONADS= { 680 } 
WITH ID_D=65217 [token
surface_stripped_lowcase:="over";
wholesurface:="over ";
xmlindex:=720;
]
GO

CREATE OBJECT
FROM MONADS= { 681 } 
WITH ID_D=65218 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=721;
]
GO

CREATE OBJECT
FROM MONADS= { 682 } 
WITH ID_D=65219 [token
surface_stripped_lowcase:="living";
wholesurface:="living ";
xmlindex:=722;
]
GO

CREATE OBJECT
FROM MONADS= { 683 } 
WITH ID_D=65220 [token
surface_stripped_lowcase:="thing";
wholesurface:="thing ";
xmlindex:=723;
]
GO

CREATE OBJECT
FROM MONADS= { 684 } 
WITH ID_D=65221 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=724;
]
GO

CREATE OBJECT
FROM MONADS= { 685 } 
WITH ID_D=65222 [token
surface_stripped_lowcase:="moveth";
wholesurface:="moveth ";
xmlindex:=725;
]
GO

CREATE OBJECT
FROM MONADS= { 686 } 
WITH ID_D=65223 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=726;
]
GO

CREATE OBJECT
FROM MONADS= { 687 } 
WITH ID_D=65224 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=727;
]
GO

CREATE OBJECT
FROM MONADS= { 688 } 
WITH ID_D=65225 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth. ";
xmlindex:=728;
]
GO

CREATE OBJECT
FROM MONADS= { 689 } 
WITH ID_D=65226 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=730;
]
GO

CREATE OBJECT
FROM MONADS= { 690 } 
WITH ID_D=65227 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=731;
]
GO

CREATE OBJECT
FROM MONADS= { 691 } 
WITH ID_D=65228 [token
surface_stripped_lowcase:="said";
wholesurface:="said, ";
xmlindex:=732;
]
GO

CREATE OBJECT
FROM MONADS= { 692 } 
WITH ID_D=65229 [token
surface_stripped_lowcase:="behold";
wholesurface:="Behold, ";
xmlindex:=733;
]
GO

CREATE OBJECT
FROM MONADS= { 693 } 
WITH ID_D=65230 [token
surface_stripped_lowcase:="i";
wholesurface:="I ";
xmlindex:=734;
]
GO

CREATE OBJECT
FROM MONADS= { 694 } 
WITH ID_D=65231 [token
surface_stripped_lowcase:="have";
wholesurface:="have ";
xmlindex:=735;
]
GO

CREATE OBJECT
FROM MONADS= { 695 } 
WITH ID_D=65232 [token
surface_stripped_lowcase:="given";
wholesurface:="given ";
xmlindex:=736;
]
GO

CREATE OBJECT
FROM MONADS= { 696 } 
WITH ID_D=65233 [token
surface_stripped_lowcase:="you";
wholesurface:="you ";
xmlindex:=737;
]
GO

CREATE OBJECT
FROM MONADS= { 697 } 
WITH ID_D=65234 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=738;
]
GO

CREATE OBJECT
FROM MONADS= { 698 } 
WITH ID_D=65235 [token
surface_stripped_lowcase:="herb";
wholesurface:="herb ";
xmlindex:=739;
]
GO

CREATE OBJECT
FROM MONADS= { 699 } 
WITH ID_D=65236 [token
surface_stripped_lowcase:="yielding";
wholesurface:="yielding ";
xmlindex:=740;
]
GO

CREATE OBJECT
FROM MONADS= { 700 } 
WITH ID_D=65237 [token
surface_stripped_lowcase:="seed";
wholesurface:="seed, ";
xmlindex:=741;
]
GO

CREATE OBJECT
FROM MONADS= { 701 } 
WITH ID_D=65238 [token
surface_stripped_lowcase:="which";
wholesurface:="which ";
xmlindex:=742;
]
GO

CREATE OBJECT
FROM MONADS= { 702 } 
WITH ID_D=65239 [token
surface_stripped_lowcase:="is";
wholesurface:="is ";
xmlindex:=743;
]
GO

CREATE OBJECT
FROM MONADS= { 703 } 
WITH ID_D=65240 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=744;
]
GO

CREATE OBJECT
FROM MONADS= { 704 } 
WITH ID_D=65241 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=745;
]
GO

CREATE OBJECT
FROM MONADS= { 705 } 
WITH ID_D=65242 [token
surface_stripped_lowcase:="face";
wholesurface:="face ";
xmlindex:=746;
]
GO

CREATE OBJECT
FROM MONADS= { 706 } 
WITH ID_D=65243 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=747;
]
GO

CREATE OBJECT
FROM MONADS= { 707 } 
WITH ID_D=65244 [token
surface_stripped_lowcase:="all";
wholesurface:="all ";
xmlindex:=748;
]
GO

CREATE OBJECT
FROM MONADS= { 708 } 
WITH ID_D=65245 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=749;
]
GO

CREATE OBJECT
FROM MONADS= { 709 } 
WITH ID_D=65246 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth, ";
xmlindex:=750;
]
GO

CREATE OBJECT
FROM MONADS= { 710 } 
WITH ID_D=65247 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=751;
]
GO

CREATE OBJECT
FROM MONADS= { 711 } 
WITH ID_D=65248 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=752;
]
GO

CREATE OBJECT
FROM MONADS= { 712 } 
WITH ID_D=65249 [token
surface_stripped_lowcase:="tree";
wholesurface:="tree, ";
xmlindex:=753;
]
GO

CREATE OBJECT
FROM MONADS= { 713 } 
WITH ID_D=65250 [token
surface_stripped_lowcase:="in";
wholesurface:="in ";
xmlindex:=754;
]
GO

CREATE OBJECT
FROM MONADS= { 714 } 
WITH ID_D=65251 [token
surface_stripped_lowcase:="which";
wholesurface:="which ";
xmlindex:=755;
]
GO

CREATE OBJECT
FROM MONADS= { 715 } 
WITH ID_D=65252 [token
surface_stripped_lowcase:="is";
wholesurface:="is ";
xmlindex:=756;
]
GO

CREATE OBJECT
FROM MONADS= { 716 } 
WITH ID_D=65253 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=757;
]
GO

CREATE OBJECT
FROM MONADS= { 717 } 
WITH ID_D=65254 [token
surface_stripped_lowcase:="fruit";
wholesurface:="fruit ";
xmlindex:=758;
]
GO

CREATE OBJECT
FROM MONADS= { 718 } 
WITH ID_D=65255 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=759;
]
GO

CREATE OBJECT
FROM MONADS= { 719 } 
WITH ID_D=65256 [token
surface_stripped_lowcase:="a";
wholesurface:="a ";
xmlindex:=760;
]
GO

CREATE OBJECT
FROM MONADS= { 720 } 
WITH ID_D=65257 [token
surface_stripped_lowcase:="tree";
wholesurface:="tree ";
xmlindex:=761;
]
GO

CREATE OBJECT
FROM MONADS= { 721 } 
WITH ID_D=65258 [token
surface_stripped_lowcase:="yielding";
wholesurface:="yielding ";
xmlindex:=762;
]
GO

CREATE OBJECT
FROM MONADS= { 722 } 
WITH ID_D=65259 [token
surface_stripped_lowcase:="seed";
wholesurface:="seed; ";
xmlindex:=763;
]
GO

CREATE OBJECT
FROM MONADS= { 723 } 
WITH ID_D=65260 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=764;
]
GO

CREATE OBJECT
FROM MONADS= { 724 } 
WITH ID_D=65261 [token
surface_stripped_lowcase:="you";
wholesurface:="you ";
xmlindex:=765;
]
GO

CREATE OBJECT
FROM MONADS= { 725 } 
WITH ID_D=65262 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=766;
]
GO

CREATE OBJECT
FROM MONADS= { 726 } 
WITH ID_D=65263 [token
surface_stripped_lowcase:="shall";
wholesurface:="shall ";
xmlindex:=767;
]
GO

CREATE OBJECT
FROM MONADS= { 727 } 
WITH ID_D=65264 [token
surface_stripped_lowcase:="be";
wholesurface:="be ";
xmlindex:=768;
]
GO

CREATE OBJECT
FROM MONADS= { 728 } 
WITH ID_D=65265 [token
surface_stripped_lowcase:="for";
wholesurface:="for ";
xmlindex:=769;
]
GO

CREATE OBJECT
FROM MONADS= { 729 } 
WITH ID_D=65266 [token
surface_stripped_lowcase:="food";
wholesurface:="food: ";
xmlindex:=770;
]
GO

CREATE OBJECT
FROM MONADS= { 730 } 
WITH ID_D=65267 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=772;
]
GO

CREATE OBJECT
FROM MONADS= { 731 } 
WITH ID_D=65268 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=773;
]
GO

CREATE OBJECT
FROM MONADS= { 732 } 
WITH ID_D=65269 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=774;
]
GO

CREATE OBJECT
FROM MONADS= { 733 } 
WITH ID_D=65270 [token
surface_stripped_lowcase:="beast";
wholesurface:="beast ";
xmlindex:=775;
]
GO

CREATE OBJECT
FROM MONADS= { 734 } 
WITH ID_D=65271 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=776;
]
GO

CREATE OBJECT
FROM MONADS= { 735 } 
WITH ID_D=65272 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=777;
]
GO

CREATE OBJECT
FROM MONADS= { 736 } 
WITH ID_D=65273 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth, ";
xmlindex:=778;
]
GO

CREATE OBJECT
FROM MONADS= { 737 } 
WITH ID_D=65274 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=779;
]
GO

CREATE OBJECT
FROM MONADS= { 738 } 
WITH ID_D=65275 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=780;
]
GO

CREATE OBJECT
FROM MONADS= { 739 } 
WITH ID_D=65276 [token
surface_stripped_lowcase:="every";
wholesurface:="every ";
xmlindex:=781;
]
GO

CREATE OBJECT
FROM MONADS= { 740 } 
WITH ID_D=65277 [token
surface_stripped_lowcase:="bird";
wholesurface:="bird ";
xmlindex:=782;
]
GO

CREATE OBJECT
FROM MONADS= { 741 } 
WITH ID_D=65278 [token
surface_stripped_lowcase:="of";
wholesurface:="of ";
xmlindex:=783;
]
GO

CREATE OBJECT
FROM MONADS= { 742 } 
WITH ID_D=65279 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=784;
]
GO

CREATE OBJECT
FROM MONADS= { 743 } 
WITH ID_D=65280 [token
surface_stripped_lowcase:="heavens";
wholesurface:="heavens, ";
xmlindex:=785;
]
GO

CREATE OBJECT
FROM MONADS= { 744 } 
WITH ID_D=65281 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=786;
]
GO

CREATE OBJECT
FROM MONADS= { 745 } 
WITH ID_D=65282 [token
surface_stripped_lowcase:="to";
wholesurface:="to ";
xmlindex:=787;
]
GO

CREATE OBJECT
FROM MONADS= { 746 } 
WITH ID_D=65283 [token
surface_stripped_lowcase:="everything";
wholesurface:="everything ";
xmlindex:=788;
]
GO

CREATE OBJECT
FROM MONADS= { 747 } 
WITH ID_D=65284 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=789;
]
GO

CREATE OBJECT
FROM MONADS= { 748 } 
WITH ID_D=65285 [token
surface_stripped_lowcase:="creepeth";
wholesurface:="creepeth ";
xmlindex:=790;
]
GO

CREATE OBJECT
FROM MONADS= { 749 } 
WITH ID_D=65286 [token
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
xmlindex:=791;
]
GO

CREATE OBJECT
FROM MONADS= { 750 } 
WITH ID_D=65287 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=792;
]
GO

CREATE OBJECT
FROM MONADS= { 751 } 
WITH ID_D=65288 [token
surface_stripped_lowcase:="earth";
wholesurface:="earth, ";
xmlindex:=793;
]
GO

CREATE OBJECT
FROM MONADS= { 752 } 
WITH ID_D=65289 [token
surface_stripped_lowcase:="wherein";
wholesurface:="wherein ";
xmlindex:=794;
]
GO

CREATE OBJECT
FROM MONADS= { 753 } 
WITH ID_D=65290 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=795;
]
GO

CREATE OBJECT
FROM MONADS= { 754 } 
WITH ID_D=65291 [token
surface_stripped_lowcase:="is";
wholesurface:="is ";
xmlindex:=796;
]
GO

CREATE OBJECT
FROM MONADS= { 755 } 
WITH ID_D=65292 [token
surface_stripped_lowcase:="life";
wholesurface:="life, ";
xmlindex:=797;
]
GO

CREATE OBJECT
FROM MONADS= { 756 } 
WITH ID_D=65293 [token
surface_stripped_lowcase:="i";
wholesurface:="I ";
xmlindex:=799;
]
GO

CREATE OBJECT
FROM MONADS= { 757 } 
WITH ID_D=65294 [token
surface_stripped_lowcase:="have";
wholesurface:="have ";
xmlindex:=800;
]
GO

CREATE OBJECT
FROM MONADS= { 758 } 
WITH ID_D=65295 [token
surface_stripped_lowcase:="given";
wholesurface:="given";
xmlindex:=801;
]
GO

CREATE OBJECT
FROM MONADS= { 759 } 
WITH ID_D=65296 [token
surface_stripped_lowcase:="every";
wholesurface:=" every ";
xmlindex:=802;
]
GO

CREATE OBJECT
FROM MONADS= { 760 } 
WITH ID_D=65297 [token
surface_stripped_lowcase:="green";
wholesurface:="green ";
xmlindex:=803;
]
GO

CREATE OBJECT
FROM MONADS= { 761 } 
WITH ID_D=65298 [token
surface_stripped_lowcase:="herb";
wholesurface:="herb ";
xmlindex:=804;
]
GO

CREATE OBJECT
FROM MONADS= { 762 } 
WITH ID_D=65299 [token
surface_stripped_lowcase:="for";
wholesurface:="for ";
xmlindex:=805;
]
GO

CREATE OBJECT
FROM MONADS= { 763 } 
WITH ID_D=65300 [token
surface_stripped_lowcase:="food";
wholesurface:="food: ";
xmlindex:=806;
]
GO

CREATE OBJECT
FROM MONADS= { 764 } 
WITH ID_D=65301 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=807;
]
GO

CREATE OBJECT
FROM MONADS= { 765 } 
WITH ID_D=65302 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=808;
]
GO

CREATE OBJECT
FROM MONADS= { 766 } 
WITH ID_D=65303 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=809;
]
GO

CREATE OBJECT
FROM MONADS= { 767 } 
WITH ID_D=65304 [token
surface_stripped_lowcase:="so";
wholesurface:="so. ";
xmlindex:=810;
]
GO

CREATE OBJECT
FROM MONADS= { 768 } 
WITH ID_D=65305 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=812;
]
GO

CREATE OBJECT
FROM MONADS= { 769 } 
WITH ID_D=65306 [token
surface_stripped_lowcase:="god";
wholesurface:="God ";
xmlindex:=813;
]
GO

CREATE OBJECT
FROM MONADS= { 770 } 
WITH ID_D=65307 [token
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
xmlindex:=814;
]
GO

CREATE OBJECT
FROM MONADS= { 771 } 
WITH ID_D=65308 [token
surface_stripped_lowcase:="everything";
wholesurface:="everything ";
xmlindex:=815;
]
GO

CREATE OBJECT
FROM MONADS= { 772 } 
WITH ID_D=65309 [token
surface_stripped_lowcase:="that";
wholesurface:="that ";
xmlindex:=816;
]
GO

CREATE OBJECT
FROM MONADS= { 773 } 
WITH ID_D=65310 [token
surface_stripped_lowcase:="he";
wholesurface:="he ";
xmlindex:=817;
]
GO

CREATE OBJECT
FROM MONADS= { 774 } 
WITH ID_D=65311 [token
surface_stripped_lowcase:="had";
wholesurface:="had ";
xmlindex:=818;
]
GO

CREATE OBJECT
FROM MONADS= { 775 } 
WITH ID_D=65312 [token
surface_stripped_lowcase:="made";
wholesurface:="made, ";
xmlindex:=819;
]
GO

CREATE OBJECT
FROM MONADS= { 776 } 
WITH ID_D=65313 [token
surface_stripped_lowcase:="and";
wholesurface:="and, ";
xmlindex:=820;
]
GO

CREATE OBJECT
FROM MONADS= { 777 } 
WITH ID_D=65314 [token
surface_stripped_lowcase:="behold";
wholesurface:="behold, ";
xmlindex:=821;
]
GO

CREATE OBJECT
FROM MONADS= { 778 } 
WITH ID_D=65315 [token
surface_stripped_lowcase:="it";
wholesurface:="it ";
xmlindex:=822;
]
GO

CREATE OBJECT
FROM MONADS= { 779 } 
WITH ID_D=65316 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=823;
]
GO

CREATE OBJECT
FROM MONADS= { 780 } 
WITH ID_D=65317 [token
surface_stripped_lowcase:="very";
wholesurface:="very ";
xmlindex:=824;
]
GO

CREATE OBJECT
FROM MONADS= { 781 } 
WITH ID_D=65318 [token
surface_stripped_lowcase:="good";
wholesurface:="good. ";
xmlindex:=825;
]
GO

CREATE OBJECT
FROM MONADS= { 782 } 
WITH ID_D=65319 [token
surface_stripped_lowcase:="and";
wholesurface:="And ";
xmlindex:=826;
]
GO

CREATE OBJECT
FROM MONADS= { 783 } 
WITH ID_D=65320 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=827;
]
GO

CREATE OBJECT
FROM MONADS= { 784 } 
WITH ID_D=65321 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=828;
]
GO

CREATE OBJECT
FROM MONADS= { 785 } 
WITH ID_D=65322 [token
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
xmlindex:=829;
]
GO

CREATE OBJECT
FROM MONADS= { 786 } 
WITH ID_D=65323 [token
surface_stripped_lowcase:="and";
wholesurface:="and ";
xmlindex:=830;
]
GO

CREATE OBJECT
FROM MONADS= { 787 } 
WITH ID_D=65324 [token
surface_stripped_lowcase:="there";
wholesurface:="there ";
xmlindex:=831;
]
GO

CREATE OBJECT
FROM MONADS= { 788 } 
WITH ID_D=65325 [token
surface_stripped_lowcase:="was";
wholesurface:="was ";
xmlindex:=832;
]
GO

CREATE OBJECT
FROM MONADS= { 789 } 
WITH ID_D=65326 [token
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
xmlindex:=833;
]
GO

CREATE OBJECT
FROM MONADS= { 790 } 
WITH ID_D=65327 [token
surface_stripped_lowcase:="the";
wholesurface:="the ";
xmlindex:=834;
]
GO

CREATE OBJECT
FROM MONADS= { 791 } 
WITH ID_D=65328 [token
surface_stripped_lowcase:="sixth";
wholesurface:="sixth ";
xmlindex:=835;
]
GO

CREATE OBJECT
FROM MONADS= { 792 } 
WITH ID_D=65329 [token
surface_stripped_lowcase:="day";
wholesurface:="day. ";
xmlindex:=836;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[token] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type note
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[note] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[note] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type transadd
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[transadd] GO

CREATE OBJECT
FROM MONADS= { 223 } 
WITH ID_D=29108 [transadd
xmlindex:=241;
]
GO

CREATE OBJECT
FROM MONADS= { 360-361 } 
WITH ID_D=29109 [transadd
xmlindex:=385;
]
GO

CREATE OBJECT
FROM MONADS= { 756-758 } 
WITH ID_D=29110 [transadd
xmlindex:=798;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[transadd] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type linegroup
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[linegroup] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[linegroup] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type line
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[line] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[line] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type br
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[br] GO

CREATE OBJECT
FROM MONADS= { 792 } 
WITH ID_D=67 [br
xmlindex:=837;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[br] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type paragraph
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[paragraph] GO

CREATE OBJECT
FROM MONADS= { 8-95 } 
WITH ID_D=25827 [paragraph
xmlindex:=12;
]
GO

CREATE OBJECT
FROM MONADS= { 96-161 } 
WITH ID_D=25828 [paragraph
xmlindex:=106;
]
GO

CREATE OBJECT
FROM MONADS= { 162-283 } 
WITH ID_D=25829 [paragraph
xmlindex:=176;
]
GO

CREATE OBJECT
FROM MONADS= { 284-415 } 
WITH ID_D=25830 [paragraph
xmlindex:=305;
]
GO

CREATE OBJECT
FROM MONADS= { 416-507 } 
WITH ID_D=25831 [paragraph
xmlindex:=445;
]
GO

CREATE OBJECT
FROM MONADS= { 508-792 } 
WITH ID_D=25832 [paragraph
xmlindex:=542;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[paragraph] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type title
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[title] GO

CREATE OBJECT
FROM MONADS= { 1-7 } 
WITH ID_D=29042 [title
divtype:=book;
xmlindex:=2;
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[title] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type db
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[db] GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[db] GO



//////////////////////////////////////////////////// 
// 
// Create object data for object type bookcase_verse_index_token_mdf_wholesurface_index
// 
//////////////////////////////////////////////////// 

// Drop indexes 
DROP INDEXES ON OBJECT TYPE[bookcase_verse_index_token_mdf_wholesurface_index] GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65330 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="?";
]
GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65331 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="beginning";
monad_set:=":";
]
GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65332 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="created";
monad_set:="<";
]
GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65333 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="A";
]
GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65334 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:=";";
]
GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65335 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heavens";
monad_set:=">";
]
GO

CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=65336 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="8";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65337 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="By5y2y9";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65338 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="darkness";
monad_set:="J";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65339 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="deep";
monad_set:="Q";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65340 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="D";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65341 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="face";
monad_set:="Ny<";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65342 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="V";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65343 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="moved";
monad_set:="W";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65344 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="spirit";
monad_set:="T";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65345 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:="Ly<";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65346 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="void";
monad_set:="H";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65347 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="Ey6";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65348 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waste";
monad_set:="F";
]
GO

CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=65349 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="]";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65350 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="^y7";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65351 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:="c";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65352 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="_";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65353 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="a";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65354 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="dy4";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65355 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="`";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65356 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="by4";
]
GO

CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=65357 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="g";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65358 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="iy9";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65359 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="darkness";
monad_set:="19";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65360 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="divided";
monad_set:="14";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65361 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="from";
monad_set:="17";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65362 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="jy9";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65363 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="11";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65364 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="o";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65365 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="my9";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65366 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="k";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65367 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="n";
]
GO

CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=65368 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="10";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65369 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="1:y6y6y4";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65370 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="called";
monad_set:="1<y8";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65371 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="darkness";
monad_set:="1B";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65372 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="1?y@";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65373 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="evening";
monad_set:="1I";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65374 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="1;";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65375 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="he";
monad_set:="1C";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65376 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="1>";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65377 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="morning";
monad_set:="1M";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65378 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="night";
monad_set:="1E";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65379 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="one";
monad_set:="1N";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65380 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="1Gy4";
]
GO

CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=65381 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="1Hy4";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65382 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="1Py>";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65383 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:="1U";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65384 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="divide";
monad_set:="1a";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65385 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="1W";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65386 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="from";
monad_set:="1d";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65387 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="1Q";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65388 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="1X";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65389 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="1`";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65390 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="1Sy<";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65391 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="midst";
monad_set:="1Z";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65392 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="1R";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65393 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="1T";
]
GO

CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=65394 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="1]y6y3";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65395 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="above";
monad_set:="2:";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65396 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="1gy5yA";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65397 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="divided";
monad_set:="1m";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65398 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="1ky9y8";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65399 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="from";
monad_set:="25";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65400 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="1h";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65401 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="2>";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65402 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="made";
monad_set:="1i";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65403 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="so";
monad_set:="2@";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65404 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="under";
monad_set:="22";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65405 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="2?";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65406 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="1oy8";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65407 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="were";
monad_set:="21y8";
]
GO

CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=65408 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="which";
monad_set:="20y8";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65409 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="2Ay6y4";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65410 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="called";
monad_set:="2C";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65411 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="2Q";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65412 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="evening";
monad_set:="2J";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65413 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="2E";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65414 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="2B";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65415 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heaven";
monad_set:="2F";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65416 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="morning";
monad_set:="2N";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65417 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="second";
monad_set:="2P";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65418 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="2Hy4";
]
GO

CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=65419 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="2Iy4";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65420 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="2Ry?y6";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65421 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="appear";
monad_set:="2f";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65422 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:="2[";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65423 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="dry";
monad_set:="2d";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65424 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="gathered";
monad_set:="2\\";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65425 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="2S";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65426 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heavens";
monad_set:="2Z";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65427 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="2h";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65428 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="land";
monad_set:="2e";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65429 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="2Uy=";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65430 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="one";
monad_set:="2_";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65431 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="place";
monad_set:="2`";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65432 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="2T";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65433 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="so";
monad_set:="2j";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65434 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="together";
monad_set:="2]";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65435 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="under";
monad_set:="2X";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65436 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="unto";
monad_set:="2^";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65437 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="2i";
]
GO

CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=65438 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="2W";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65439 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="2ky7y:";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65440 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="called";
monad_set:="2my<";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65441 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="dry";
monad_set:="2o";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65442 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="31";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65443 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="gathering";
monad_set:="34";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65444 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="2lyA";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65445 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="3B";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65446 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="he";
monad_set:="3:";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65447 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="3@";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65448 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="land";
monad_set:="30";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65449 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="3>";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65450 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="seas";
monad_set:="3;";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65451 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="3?";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65452 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="together";
monad_set:="35";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65453 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="3A";
]
GO

CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=65454 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="38";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65455 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="after";
monad_set:="3S";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65456 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="3Cy<y?";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65457 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="bearing";
monad_set:="3Q";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65458 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="3HyE";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65459 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="forth";
monad_set:="3J";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65460 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fruit";
monad_set:="3R";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65461 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fruit-trees";
monad_set:="3P";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65462 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="3D";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65463 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="grass";
monad_set:="3K";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65464 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="herbs";
monad_set:="3L";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65465 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="is";
monad_set:="3W";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65466 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="3_";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65467 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="kind";
monad_set:="3U";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65468 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="3F";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65469 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="put";
monad_set:="3I";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65470 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="3E";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65471 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="seed";
monad_set:="3Ny;";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65472 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="so";
monad_set:="3a";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65473 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="their";
monad_set:="3T";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65474 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="thereof";
monad_set:="3Z";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65475 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:="3[";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65476 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="3`";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65477 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="wherein";
monad_set:="3V";
]
GO

CREATE OBJECT
FROM MONADS= { 211-241 } 
WITH ID_D=65478 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="yielding";
monad_set:="3M";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65479 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="after";
monad_set:="3ky<";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65480 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="3by<y<";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65481 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="bearing";
monad_set:="40";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65482 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="brought";
monad_set:="3e";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65483 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="3d";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65484 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="forth";
monad_set:="3f";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65485 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fruit";
monad_set:="41";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65486 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="4;";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65487 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="4@";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65488 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="grass";
monad_set:="3g";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65489 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="herbs";
monad_set:="3h";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65490 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="is";
monad_set:="43";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65491 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="4>";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65492 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="kind";
monad_set:="3my<";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65493 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="4<";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65494 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="seed";
monad_set:="3jy;";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65495 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="4=";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65496 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="their";
monad_set:="3ly<";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65497 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="thereof";
monad_set:="46";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65498 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="trees";
monad_set:="3o";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65499 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="4?";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65500 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="wherein";
monad_set:="42";
]
GO

CREATE OBJECT
FROM MONADS= { 242-272 } 
WITH ID_D=65501 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="yielding";
monad_set:="3i";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65502 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="4Ay4";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65503 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="4K";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65504 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="evening";
monad_set:="4D";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65505 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="morning";
monad_set:="4H";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65506 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="4By4";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65507 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="third";
monad_set:="4J";
]
GO

CREATE OBJECT
FROM MONADS= { 273-283 } 
WITH ID_D=65508 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="4Cy4";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65509 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="4LyCy6y3y3";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65510 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:="4QyA";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65511 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="4[";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65512 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="days";
monad_set:="4j";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65513 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="divide";
monad_set:="4Y";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65514 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="4U";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65515 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="for";
monad_set:="4cy3y3";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65516 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="from";
monad_set:="4\\";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65517 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="4M";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65518 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heaven";
monad_set:="4W";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65519 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="4S";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65520 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="4OyA";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65521 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="lights";
monad_set:="4R";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65522 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="night";
monad_set:="4^";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65523 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="4N";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65524 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="seasons";
monad_set:="4g";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65525 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="signs";
monad_set:="4d";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65526 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:="4a";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65527 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="4P";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65528 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:="4X";
]
GO

CREATE OBJECT
FROM MONADS= { 284-316 } 
WITH ID_D=65529 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="years";
monad_set:="4l";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65530 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="4myA";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65531 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:="50";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65532 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="5=";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65533 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="55";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65534 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="for";
monad_set:="51";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65535 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="give";
monad_set:="59";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65536 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heaven";
monad_set:="57";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65537 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="53";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65538 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="5?";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65539 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="4n";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65540 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="5:";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65541 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="lights";
monad_set:="52";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65542 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="so";
monad_set:="5A";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65543 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:="4o";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65544 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:="58";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65545 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:="5;";
]
GO

CREATE OBJECT
FROM MONADS= { 317-337 } 
WITH ID_D=65546 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="5@";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65547 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="also";
monad_set:="5\\";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65548 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="5By>";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65549 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="5O";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65550 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="5C";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65551 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="great";
monad_set:="5G";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65552 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="greater";
monad_set:="5J";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65553 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="he";
monad_set:="5X";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65554 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="lesser";
monad_set:="5R";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65555 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="5Ky8";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65556 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="lights";
monad_set:="5H";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65557 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="made";
monad_set:="5DyE";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65558 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="night";
monad_set:="5W";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65559 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="rule";
monad_set:="5My8";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65560 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="stars";
monad_set:="5[";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65561 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:="5Ly8";
]
GO

CREATE OBJECT
FROM MONADS= { 338-364 } 
WITH ID_D=65562 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="two";
monad_set:="5F";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65563 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="5]";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65564 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="5k";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65565 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="5c";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65566 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="give";
monad_set:="5g";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65567 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="5^";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65568 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heaven";
monad_set:="5e";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65569 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="5a";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65570 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="5h";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65571 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="set";
monad_set:="5_";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65572 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:="5`";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65573 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:="5f";
]
GO

CREATE OBJECT
FROM MONADS= { 365-379 } 
WITH ID_D=65574 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:="5i";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65575 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="5ly6y4y8";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65576 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="darkness";
monad_set:="6=";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65577 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="61";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65578 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="divide";
monad_set:="68";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65579 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="from";
monad_set:="6;";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65580 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="6?";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65581 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="6D";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65582 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="6B";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65583 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="light";
monad_set:="6:";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65584 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="night";
monad_set:="65";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65585 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="over";
monad_set:="5oy4";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65586 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="rule";
monad_set:="5n";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65587 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="6@";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65588 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="6A";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65589 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:="5my:";
]
GO

CREATE OBJECT
FROM MONADS= { 380-404 } 
WITH ID_D=65590 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="6C";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65591 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="6Ey4";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65592 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="6O";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65593 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="evening";
monad_set:="6H";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65594 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fourth";
monad_set:="6N";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65595 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="morning";
monad_set:="6L";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65596 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="6Fy4";
]
GO

CREATE OBJECT
FROM MONADS= { 405-415 } 
WITH ID_D=65597 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="6Gy4";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65598 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="above";
monad_set:="6`";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65599 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="6Py<";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65600 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="birds";
monad_set:="6^";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65601 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creatures";
monad_set:="6[";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65602 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="6b";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65603 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="firmament";
monad_set:="6f";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65604 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fly";
monad_set:="6_";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65605 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="6Q";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65606 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heaven";
monad_set:="6h";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65607 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="6c";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65608 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="6Sy:";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65609 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="living";
monad_set:="6Z";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65610 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="open";
monad_set:="6e";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65611 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="6R";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65612 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="swarm";
monad_set:="6V";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65613 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="swarms";
monad_set:="6X";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65614 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="6U";
]
GO

CREATE OBJECT
FROM MONADS= { 416-440 } 
WITH ID_D=65615 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="with";
monad_set:="6W";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65616 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="after";
monad_set:="79y7";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65617 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="6iy6y=y7";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65618 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="bird";
monad_set:="7?";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65619 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="created";
monad_set:="6k";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65620 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creature";
monad_set:="72";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65621 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="every";
monad_set:="70y=";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65622 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="6jyJ";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65623 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="7I";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65624 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="great";
monad_set:="6m";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65625 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="7G";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65626 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="its";
monad_set:="7A";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65627 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="kind";
monad_set:="7;y7";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65628 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="living";
monad_set:="71";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65629 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="moveth";
monad_set:="74";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65630 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="7E";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65631 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="sea-monsters";
monad_set:="6n";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65632 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="swarmed";
monad_set:="78";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65633 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="73yC";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65634 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="their";
monad_set:="7:";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65635 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="7H";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65636 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="77";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65637 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="wherewith";
monad_set:="75";
]
GO

CREATE OBJECT
FROM MONADS= { 441-473 } 
WITH ID_D=65638 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="winged";
monad_set:="7>";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65639 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="7Jy7y2y7";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65640 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:="7O";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65641 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="birds";
monad_set:="7\\";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65642 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="blessed";
monad_set:="7L";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65643 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="7`";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65644 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fill";
monad_set:="7T";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65645 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fruitful";
monad_set:="7P";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65646 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="7K";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65647 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="7W";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65648 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="7[";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65649 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="multiply";
monad_set:="7Ry;";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65650 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="on";
monad_set:="7^";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65651 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saying";
monad_set:="7N";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65652 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="seas";
monad_set:="7Y";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65653 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:="7M";
]
GO

CREATE OBJECT
FROM MONADS= { 474-496 } 
WITH ID_D=65654 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="waters";
monad_set:="7V";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65655 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="7ay4";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65656 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="7k";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65657 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="evening";
monad_set:="7d";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65658 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fifth";
monad_set:="7j";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65659 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="morning";
monad_set:="7h";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65660 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="7by4";
]
GO

CREATE OBJECT
FROM MONADS= { 497-507 } 
WITH ID_D=65661 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="7cy4";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65662 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="after";
monad_set:="86y<";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65663 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="7ly>y3y8";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65664 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="beasts";
monad_set:="8>";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65665 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="bring";
monad_set:="82";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65666 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="cattle";
monad_set:="89";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65667 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creatures";
monad_set:="85";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65668 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creeping";
monad_set:="8;";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65669 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="81y@";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65670 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="forth";
monad_set:="83";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65671 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="7m";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65672 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="8F";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65673 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="kind";
monad_set:="88y<";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65674 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="7o";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65675 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="living";
monad_set:="84";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65676 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="7n";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65677 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="so";
monad_set:="8H";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65678 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="their";
monad_set:="87y<";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65679 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="things";
monad_set:="8<";
]
GO

CREATE OBJECT
FROM MONADS= { 508-536 } 
WITH ID_D=65680 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="8G";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65681 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="after";
monad_set:="8Qy6y:";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65682 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="8Iy;y6y:";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65683 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="beasts";
monad_set:="8M";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65684 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="cattle";
monad_set:="8V";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65685 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creepeth";
monad_set:="8]";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65686 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="8P";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65687 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="everything";
monad_set:="8[";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65688 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="8JyK";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65689 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="8j";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65690 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="ground";
monad_set:="8`";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65691 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="8h";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65692 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="its";
monad_set:="8b";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65693 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="kind";
monad_set:="8Sy6y:";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65694 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="made";
monad_set:="8K";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65695 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="8f";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65696 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="8\\y;";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65697 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="their";
monad_set:="8Ry6";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65698 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:="8^";
]
GO

CREATE OBJECT
FROM MONADS= { 537-570 } 
WITH ID_D=65699 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="8i";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65700 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="after";
monad_set:="95";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65701 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="all";
monad_set:="9P";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65702 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="8ky=y;y7y4y5";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65703 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="birds";
monad_set:="9F";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65704 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="cattle";
monad_set:="9M";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65705 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creepeth";
monad_set:="9Y";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65706 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creeping";
monad_set:="9V";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65707 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="dominion";
monad_set:="9<";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65708 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:="9Ry:";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65709 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="every";
monad_set:="9U";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65710 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fish";
monad_set:="9?";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65711 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="8l";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65712 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="have";
monad_set:="9;";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65713 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heavens";
monad_set:="9I";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65714 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="image";
monad_set:="94";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65715 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="92";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65716 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="let";
monad_set:="8ny;";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65717 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="likeness";
monad_set:="97";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65718 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="make";
monad_set:="90";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65719 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="man";
monad_set:="91";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65720 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="our";
monad_set:="93y3";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65721 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="over";
monad_set:="9=y7y7y4y5";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65722 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:="8m";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65723 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="sea";
monad_set:="9B";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65724 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="9X";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65725 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:="9:";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65726 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="thing";
monad_set:="9W";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65727 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:="9Z";
]
GO

CREATE OBJECT
FROM MONADS= { 571-620 } 
WITH ID_D=65728 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="us";
monad_set:="8o";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65729 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="9]yA";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65730 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="created";
monad_set:="9_y;y6";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65731 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="female";
monad_set:="9o";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65732 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="9^y;";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65733 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="he";
monad_set:="9ky6";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65734 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="him";
monad_set:="9l";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65735 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="his";
monad_set:="9b";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65736 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="image";
monad_set:="9dy3";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65737 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:="9ay4";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65738 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="male";
monad_set:="9m";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65739 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="man";
monad_set:="9`";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65740 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="own";
monad_set:="9c";
]
GO

CREATE OBJECT
FROM MONADS= { 621-642 } 
WITH ID_D=65741 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:=":2";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65742 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:=":3y4y7y2y4y3y9y7";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65743 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:=":<";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65744 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="birds";
monad_set:=":S";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65745 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="blessed";
monad_set:=":5";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65746 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="dominion";
monad_set:=":I";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65747 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:=":CyM";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65748 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="every";
monad_set:=":Y";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65749 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fish";
monad_set:=":L";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65750 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fruitful";
monad_set:=":=";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65751 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:=":4y4";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65752 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="have";
monad_set:=":H";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65753 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heavens";
monad_set:=":V";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65754 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:=":F";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65755 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="living";
monad_set:=":Z";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65756 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="moveth";
monad_set:=":]";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65757 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="multiply";
monad_set:=":?";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65758 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="over";
monad_set:=":Jy7y7";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65759 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="replenish";
monad_set:=":A";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65760 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:=":9";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65761 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="sea";
monad_set:=":O";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65762 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="subdue";
monad_set:=":E";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65763 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:=":\\";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65764 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="them";
monad_set:=":6y5";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65765 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="thing";
monad_set:=":[";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65766 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="unto";
monad_set:="::";
]
GO

CREATE OBJECT
FROM MONADS= { 643-688 } 
WITH ID_D=65767 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:=":^";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65768 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="all";
monad_set:=";3";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65769 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:=":ayE";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65770 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="be";
monad_set:=";G";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65771 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="behold";
monad_set:=":d";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65772 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:=";5";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65773 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="every";
monad_set:=":iy>";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65774 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="face";
monad_set:=";1";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65775 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="food";
monad_set:=";I";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65776 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="for";
monad_set:=";H";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65777 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="fruit";
monad_set:=";=";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65778 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="given";
monad_set:=":g";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65779 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:=":b";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65780 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="have";
monad_set:=":f";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65781 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="herb";
monad_set:=":j";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65782 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="i";
monad_set:=":e";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65783 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="in";
monad_set:=";9";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65784 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="is";
monad_set:=":ny=";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65785 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:=";E";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65786 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="said";
monad_set:=":c";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65787 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="seed";
monad_set:=":lyF";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65788 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="shall";
monad_set:=";F";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65789 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:=";C";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65790 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="tree";
monad_set:=";8y8";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65791 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:=":o";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65792 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="which";
monad_set:=":my=";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65793 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="yielding";
monad_set:=":kyF";
]
GO

CREATE OBJECT
FROM MONADS= { 689-729 } 
WITH ID_D=65794 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="you";
monad_set:=":hyL";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65795 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:=";Jy7y7yD";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65796 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="beast";
monad_set:=";M";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65797 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="bird";
monad_set:=";T";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65798 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="creepeth";
monad_set:=";\\";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65799 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="earth";
monad_set:=";Py?";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65800 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="every";
monad_set:=";Ly7yD";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65801 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="everything";
monad_set:=";Z";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65802 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="food";
monad_set:=";k";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65803 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="for";
monad_set:=";j";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65804 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="given";
monad_set:=";f";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65805 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="green";
monad_set:=";h";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65806 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="have";
monad_set:=";e";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65807 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="heavens";
monad_set:=";W";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65808 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="herb";
monad_set:=";i";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65809 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="i";
monad_set:=";d";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65810 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="is";
monad_set:=";b";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65811 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:=";m";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65812 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="life";
monad_set:=";c";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65813 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="so";
monad_set:=";o";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65814 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:=";[";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65815 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:=";a";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65816 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="to";
monad_set:=";Ky7y7";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65817 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="upon";
monad_set:=";]";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65818 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:=";n";
]
GO

CREATE OBJECT
FROM MONADS= { 730-767 } 
WITH ID_D=65819 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="wherein";
monad_set:=";`";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65820 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="and";
monad_set:="<0y8y6y4";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65821 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="behold";
monad_set:="<9";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65822 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="day";
monad_set:="<H";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65823 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="evening";
monad_set:="<A";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65824 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="everything";
monad_set:="<3";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65825 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="god";
monad_set:="<1";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65826 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="good";
monad_set:="<=";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65827 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="had";
monad_set:="<6";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65828 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="he";
monad_set:="<5";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65829 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="it";
monad_set:="<:";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65830 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="made";
monad_set:="<7";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65831 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="morning";
monad_set:="<E";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65832 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="saw";
monad_set:="<2";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65833 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="sixth";
monad_set:="<G";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65834 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="that";
monad_set:="<4";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65835 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="there";
monad_set:="<?y4";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65836 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="very";
monad_set:="<<";
]
GO

CREATE OBJECT
FROM MONADS= { 768-792 } 
WITH ID_D=65837 [bookcase_verse_index_token_mdf_wholesurface_index
feature_value:="was";
monad_set:="<;y5y4";
]
GO

// Create indexes 
CREATE INDEXES ON OBJECT TYPE[bookcase_verse_index_token_mdf_wholesurface_index] GO

++++ answer
---- answer

++++ query nobpt Vacuum database

//////////////////////////////////////////////////// 
// 
// VACUUM database
// 
//////////////////////////////////////////////////// 

VACUUM DATABASE ANALYZE GO

++++ answer
---- answer

++++ dumpdb

++++ query selecting all tokens and getting all features
SELECT ALL OBJECTS 
WHERE 
[Token 
  GET wholesurface, xmlindex,surface_stripped_lowcase, self
]
GO
++++ answer
 //  <  < [ token 64538 { 1 } false (wholesurface="The ",xmlindex="3",surface_stripped_lowcase="the",self="64538") //  <  > 
 ]
 > 
 < [ token 64539 { 2 } false (wholesurface="First ",xmlindex="4",surface_stripped_lowcase="first",self="64539") //  <  > 
 ]
 > 
 < [ token 64540 { 3 } false (wholesurface="Book ",xmlindex="5",surface_stripped_lowcase="book",self="64540") //  <  > 
 ]
 > 
 < [ token 64541 { 4 } false (wholesurface="of ",xmlindex="6",surface_stripped_lowcase="of",self="64541") //  <  > 
 ]
 > 
 < [ token 64542 { 5 } false (wholesurface="Moses, ",xmlindex="7",surface_stripped_lowcase="moses",self="64542") //  <  > 
 ]
 > 
 < [ token 64543 { 6 } false (wholesurface="called ",xmlindex="8",surface_stripped_lowcase="called",self="64543") //  <  > 
 ]
 > 
 < [ token 64544 { 7 } false (wholesurface="Genesis ",xmlindex="9",surface_stripped_lowcase="genesis",self="64544") //  <  > 
 ]
 > 
 < [ token 64545 { 8 } false (wholesurface="In ",xmlindex="14",surface_stripped_lowcase="in",self="64545") //  <  > 
 ]
 > 
 < [ token 64546 { 9 } false (wholesurface="the ",xmlindex="15",surface_stripped_lowcase="the",self="64546") //  <  > 
 ]
 > 
 < [ token 64547 { 10 } false (wholesurface="beginning ",xmlindex="16",surface_stripped_lowcase="beginning",self="64547") //  <  > 
 ]
 > 
 < [ token 64548 { 11 } false (wholesurface="God ",xmlindex="17",surface_stripped_lowcase="god",self="64548") //  <  > 
 ]
 > 
 < [ token 64549 { 12 } false (wholesurface="created ",xmlindex="18",surface_stripped_lowcase="created",self="64549") //  <  > 
 ]
 > 
 < [ token 64550 { 13 } false (wholesurface="the ",xmlindex="19",surface_stripped_lowcase="the",self="64550") //  <  > 
 ]
 > 
 < [ token 64551 { 14 } false (wholesurface="heavens ",xmlindex="20",surface_stripped_lowcase="heavens",self="64551") //  <  > 
 ]
 > 
 < [ token 64552 { 15 } false (wholesurface="and ",xmlindex="21",surface_stripped_lowcase="and",self="64552") //  <  > 
 ]
 > 
 < [ token 64553 { 16 } false (wholesurface="the ",xmlindex="22",surface_stripped_lowcase="the",self="64553") //  <  > 
 ]
 > 
 < [ token 64554 { 17 } false (wholesurface="earth. ",xmlindex="23",surface_stripped_lowcase="earth",self="64554") //  <  > 
 ]
 > 
 < [ token 64555 { 18 } false (wholesurface="And ",xmlindex="25",surface_stripped_lowcase="and",self="64555") //  <  > 
 ]
 > 
 < [ token 64556 { 19 } false (wholesurface="the ",xmlindex="26",surface_stripped_lowcase="the",self="64556") //  <  > 
 ]
 > 
 < [ token 64557 { 20 } false (wholesurface="earth ",xmlindex="27",surface_stripped_lowcase="earth",self="64557") //  <  > 
 ]
 > 
 < [ token 64558 { 21 } false (wholesurface="was ",xmlindex="28",surface_stripped_lowcase="was",self="64558") //  <  > 
 ]
 > 
 < [ token 64559 { 22 } false (wholesurface="waste ",xmlindex="29",surface_stripped_lowcase="waste",self="64559") //  <  > 
 ]
 > 
 < [ token 64560 { 23 } false (wholesurface="and ",xmlindex="30",surface_stripped_lowcase="and",self="64560") //  <  > 
 ]
 > 
 < [ token 64561 { 24 } false (wholesurface="void; ",xmlindex="31",surface_stripped_lowcase="void",self="64561") //  <  > 
 ]
 > 
 < [ token 64562 { 25 } false (wholesurface="and ",xmlindex="32",surface_stripped_lowcase="and",self="64562") //  <  > 
 ]
 > 
 < [ token 64563 { 26 } false (wholesurface="darkness ",xmlindex="33",surface_stripped_lowcase="darkness",self="64563") //  <  > 
 ]
 > 
 < [ token 64564 { 27 } false (wholesurface="was ",xmlindex="34",surface_stripped_lowcase="was",self="64564") //  <  > 
 ]
 > 
 < [ token 64565 { 28 } false (wholesurface="upon ",xmlindex="35",surface_stripped_lowcase="upon",self="64565") //  <  > 
 ]
 > 
 < [ token 64566 { 29 } false (wholesurface="the ",xmlindex="36",surface_stripped_lowcase="the",self="64566") //  <  > 
 ]
 > 
 < [ token 64567 { 30 } false (wholesurface="face ",xmlindex="37",surface_stripped_lowcase="face",self="64567") //  <  > 
 ]
 > 
 < [ token 64568 { 31 } false (wholesurface="of ",xmlindex="38",surface_stripped_lowcase="of",self="64568") //  <  > 
 ]
 > 
 < [ token 64569 { 32 } false (wholesurface="the ",xmlindex="39",surface_stripped_lowcase="the",self="64569") //  <  > 
 ]
 > 
 < [ token 64570 { 33 } false (wholesurface="deep: ",xmlindex="40",surface_stripped_lowcase="deep",self="64570") //  <  > 
 ]
 > 
 < [ token 64571 { 34 } false (wholesurface="and ",xmlindex="41",surface_stripped_lowcase="and",self="64571") //  <  > 
 ]
 > 
 < [ token 64572 { 35 } false (wholesurface="the ",xmlindex="42",surface_stripped_lowcase="the",self="64572") //  <  > 
 ]
 > 
 < [ token 64573 { 36 } false (wholesurface="Spirit ",xmlindex="43",surface_stripped_lowcase="spirit",self="64573") //  <  > 
 ]
 > 
 < [ token 64574 { 37 } false (wholesurface="of ",xmlindex="44",surface_stripped_lowcase="of",self="64574") //  <  > 
 ]
 > 
 < [ token 64575 { 38 } false (wholesurface="God ",xmlindex="45",surface_stripped_lowcase="god",self="64575") //  <  > 
 ]
 > 
 < [ token 64576 { 39 } false (wholesurface="moved ",xmlindex="46",surface_stripped_lowcase="moved",self="64576") //  <  > 
 ]
 > 
 < [ token 64577 { 40 } false (wholesurface="upon ",xmlindex="47",surface_stripped_lowcase="upon",self="64577") //  <  > 
 ]
 > 
 < [ token 64578 { 41 } false (wholesurface="the ",xmlindex="48",surface_stripped_lowcase="the",self="64578") //  <  > 
 ]
 > 
 < [ token 64579 { 42 } false (wholesurface="face ",xmlindex="49",surface_stripped_lowcase="face",self="64579") //  <  > 
 ]
 > 
 < [ token 64580 { 43 } false (wholesurface="of ",xmlindex="50",surface_stripped_lowcase="of",self="64580") //  <  > 
 ]
 > 
 < [ token 64581 { 44 } false (wholesurface="the ",xmlindex="51",surface_stripped_lowcase="the",self="64581") //  <  > 
 ]
 > 
 < [ token 64582 { 45 } false (wholesurface="waters. ",xmlindex="52",surface_stripped_lowcase="waters",self="64582") //  <  > 
 ]
 > 
 < [ token 64583 { 46 } false (wholesurface="And ",xmlindex="54",surface_stripped_lowcase="and",self="64583") //  <  > 
 ]
 > 
 < [ token 64584 { 47 } false (wholesurface="God ",xmlindex="55",surface_stripped_lowcase="god",self="64584") //  <  > 
 ]
 > 
 < [ token 64585 { 48 } false (wholesurface="said, ",xmlindex="56",surface_stripped_lowcase="said",self="64585") //  <  > 
 ]
 > 
 < [ token 64586 { 49 } false (wholesurface="Let ",xmlindex="57",surface_stripped_lowcase="let",self="64586") //  <  > 
 ]
 > 
 < [ token 64587 { 50 } false (wholesurface="there ",xmlindex="58",surface_stripped_lowcase="there",self="64587") //  <  > 
 ]
 > 
 < [ token 64588 { 51 } false (wholesurface="be ",xmlindex="59",surface_stripped_lowcase="be",self="64588") //  <  > 
 ]
 > 
 < [ token 64589 { 52 } false (wholesurface="light: ",xmlindex="60",surface_stripped_lowcase="light",self="64589") //  <  > 
 ]
 > 
 < [ token 64590 { 53 } false (wholesurface="and ",xmlindex="61",surface_stripped_lowcase="and",self="64590") //  <  > 
 ]
 > 
 < [ token 64591 { 54 } false (wholesurface="there ",xmlindex="62",surface_stripped_lowcase="there",self="64591") //  <  > 
 ]
 > 
 < [ token 64592 { 55 } false (wholesurface="was ",xmlindex="63",surface_stripped_lowcase="was",self="64592") //  <  > 
 ]
 > 
 < [ token 64593 { 56 } false (wholesurface="light. ",xmlindex="64",surface_stripped_lowcase="light",self="64593") //  <  > 
 ]
 > 
 < [ token 64594 { 57 } false (wholesurface="And ",xmlindex="66",surface_stripped_lowcase="and",self="64594") //  <  > 
 ]
 > 
 < [ token 64595 { 58 } false (wholesurface="God ",xmlindex="67",surface_stripped_lowcase="god",self="64595") //  <  > 
 ]
 > 
 < [ token 64596 { 59 } false (wholesurface="saw ",xmlindex="68",surface_stripped_lowcase="saw",self="64596") //  <  > 
 ]
 > 
 < [ token 64597 { 60 } false (wholesurface="the ",xmlindex="69",surface_stripped_lowcase="the",self="64597") //  <  > 
 ]
 > 
 < [ token 64598 { 61 } false (wholesurface="light, ",xmlindex="70",surface_stripped_lowcase="light",self="64598") //  <  > 
 ]
 > 
 < [ token 64599 { 62 } false (wholesurface="that ",xmlindex="71",surface_stripped_lowcase="that",self="64599") //  <  > 
 ]
 > 
 < [ token 64600 { 63 } false (wholesurface="it ",xmlindex="72",surface_stripped_lowcase="it",self="64600") //  <  > 
 ]
 > 
 < [ token 64601 { 64 } false (wholesurface="was ",xmlindex="73",surface_stripped_lowcase="was",self="64601") //  <  > 
 ]
 > 
 < [ token 64602 { 65 } false (wholesurface="good: ",xmlindex="74",surface_stripped_lowcase="good",self="64602") //  <  > 
 ]
 > 
 < [ token 64603 { 66 } false (wholesurface="and ",xmlindex="75",surface_stripped_lowcase="and",self="64603") //  <  > 
 ]
 > 
 < [ token 64604 { 67 } false (wholesurface="God ",xmlindex="76",surface_stripped_lowcase="god",self="64604") //  <  > 
 ]
 > 
 < [ token 64605 { 68 } false (wholesurface="divided ",xmlindex="77",surface_stripped_lowcase="divided",self="64605") //  <  > 
 ]
 > 
 < [ token 64606 { 69 } false (wholesurface="the ",xmlindex="78",surface_stripped_lowcase="the",self="64606") //  <  > 
 ]
 > 
 < [ token 64607 { 70 } false (wholesurface="light ",xmlindex="79",surface_stripped_lowcase="light",self="64607") //  <  > 
 ]
 > 
 < [ token 64608 { 71 } false (wholesurface="from ",xmlindex="80",surface_stripped_lowcase="from",self="64608") //  <  > 
 ]
 > 
 < [ token 64609 { 72 } false (wholesurface="the ",xmlindex="81",surface_stripped_lowcase="the",self="64609") //  <  > 
 ]
 > 
 < [ token 64610 { 73 } false (wholesurface="darkness. ",xmlindex="82",surface_stripped_lowcase="darkness",self="64610") //  <  > 
 ]
 > 
 < [ token 64611 { 74 } false (wholesurface="And ",xmlindex="84",surface_stripped_lowcase="and",self="64611") //  <  > 
 ]
 > 
 < [ token 64612 { 75 } false (wholesurface="God ",xmlindex="85",surface_stripped_lowcase="god",self="64612") //  <  > 
 ]
 > 
 < [ token 64613 { 76 } false (wholesurface="called ",xmlindex="86",surface_stripped_lowcase="called",self="64613") //  <  > 
 ]
 > 
 < [ token 64614 { 77 } false (wholesurface="the ",xmlindex="87",surface_stripped_lowcase="the",self="64614") //  <  > 
 ]
 > 
 < [ token 64615 { 78 } false (wholesurface="light ",xmlindex="88",surface_stripped_lowcase="light",self="64615") //  <  > 
 ]
 > 
 < [ token 64616 { 79 } false (wholesurface="Day, ",xmlindex="89",surface_stripped_lowcase="day",self="64616") //  <  > 
 ]
 > 
 < [ token 64617 { 80 } false (wholesurface="and ",xmlindex="90",surface_stripped_lowcase="and",self="64617") //  <  > 
 ]
 > 
 < [ token 64618 { 81 } false (wholesurface="the ",xmlindex="91",surface_stripped_lowcase="the",self="64618") //  <  > 
 ]
 > 
 < [ token 64619 { 82 } false (wholesurface="darkness ",xmlindex="92",surface_stripped_lowcase="darkness",self="64619") //  <  > 
 ]
 > 
 < [ token 64620 { 83 } false (wholesurface="he ",xmlindex="93",surface_stripped_lowcase="he",self="64620") //  <  > 
 ]
 > 
 < [ token 64621 { 84 } false (wholesurface="called ",xmlindex="94",surface_stripped_lowcase="called",self="64621") //  <  > 
 ]
 > 
 < [ token 64622 { 85 } false (wholesurface="Night. ",xmlindex="95",surface_stripped_lowcase="night",self="64622") //  <  > 
 ]
 > 
 < [ token 64623 { 86 } false (wholesurface="And ",xmlindex="96",surface_stripped_lowcase="and",self="64623") //  <  > 
 ]
 > 
 < [ token 64624 { 87 } false (wholesurface="there ",xmlindex="97",surface_stripped_lowcase="there",self="64624") //  <  > 
 ]
 > 
 < [ token 64625 { 88 } false (wholesurface="was ",xmlindex="98",surface_stripped_lowcase="was",self="64625") //  <  > 
 ]
 > 
 < [ token 64626 { 89 } false (wholesurface="evening ",xmlindex="99",surface_stripped_lowcase="evening",self="64626") //  <  > 
 ]
 > 
 < [ token 64627 { 90 } false (wholesurface="and ",xmlindex="100",surface_stripped_lowcase="and",self="64627") //  <  > 
 ]
 > 
 < [ token 64628 { 91 } false (wholesurface="there ",xmlindex="101",surface_stripped_lowcase="there",self="64628") //  <  > 
 ]
 > 
 < [ token 64629 { 92 } false (wholesurface="was ",xmlindex="102",surface_stripped_lowcase="was",self="64629") //  <  > 
 ]
 > 
 < [ token 64630 { 93 } false (wholesurface="morning, ",xmlindex="103",surface_stripped_lowcase="morning",self="64630") //  <  > 
 ]
 > 
 < [ token 64631 { 94 } false (wholesurface="one ",xmlindex="104",surface_stripped_lowcase="one",self="64631") //  <  > 
 ]
 > 
 < [ token 64632 { 95 } false (wholesurface="day. ",xmlindex="105",surface_stripped_lowcase="day",self="64632") //  <  > 
 ]
 > 
 < [ token 64633 { 96 } false (wholesurface="And ",xmlindex="108",surface_stripped_lowcase="and",self="64633") //  <  > 
 ]
 > 
 < [ token 64634 { 97 } false (wholesurface="God ",xmlindex="109",surface_stripped_lowcase="god",self="64634") //  <  > 
 ]
 > 
 < [ token 64635 { 98 } false (wholesurface="said, ",xmlindex="110",surface_stripped_lowcase="said",self="64635") //  <  > 
 ]
 > 
 < [ token 64636 { 99 } false (wholesurface="Let ",xmlindex="111",surface_stripped_lowcase="let",self="64636") //  <  > 
 ]
 > 
 < [ token 64637 { 100 } false (wholesurface="there ",xmlindex="112",surface_stripped_lowcase="there",self="64637") //  <  > 
 ]
 > 
 < [ token 64638 { 101 } false (wholesurface="be ",xmlindex="113",surface_stripped_lowcase="be",self="64638") //  <  > 
 ]
 > 
 < [ token 64639 { 102 } false (wholesurface="a ",xmlindex="114",surface_stripped_lowcase="a",self="64639") //  <  > 
 ]
 > 
 < [ token 64640 { 103 } false (wholesurface="firmament ",xmlindex="115",surface_stripped_lowcase="firmament",self="64640") //  <  > 
 ]
 > 
 < [ token 64641 { 104 } false (wholesurface="in ",xmlindex="116",surface_stripped_lowcase="in",self="64641") //  <  > 
 ]
 > 
 < [ token 64642 { 105 } false (wholesurface="the ",xmlindex="117",surface_stripped_lowcase="the",self="64642") //  <  > 
 ]
 > 
 < [ token 64643 { 106 } false (wholesurface="midst ",xmlindex="118",surface_stripped_lowcase="midst",self="64643") //  <  > 
 ]
 > 
 < [ token 64644 { 107 } false (wholesurface="of ",xmlindex="119",surface_stripped_lowcase="of",self="64644") //  <  > 
 ]
 > 
 < [ token 64645 { 108 } false (wholesurface="the ",xmlindex="120",surface_stripped_lowcase="the",self="64645") //  <  > 
 ]
 > 
 < [ token 64646 { 109 } false (wholesurface="waters, ",xmlindex="121",surface_stripped_lowcase="waters",self="64646") //  <  > 
 ]
 > 
 < [ token 64647 { 110 } false (wholesurface="and ",xmlindex="122",surface_stripped_lowcase="and",self="64647") //  <  > 
 ]
 > 
 < [ token 64648 { 111 } false (wholesurface="let ",xmlindex="123",surface_stripped_lowcase="let",self="64648") //  <  > 
 ]
 > 
 < [ token 64649 { 112 } false (wholesurface="it ",xmlindex="124",surface_stripped_lowcase="it",self="64649") //  <  > 
 ]
 > 
 < [ token 64650 { 113 } false (wholesurface="divide ",xmlindex="125",surface_stripped_lowcase="divide",self="64650") //  <  > 
 ]
 > 
 < [ token 64651 { 114 } false (wholesurface="the ",xmlindex="126",surface_stripped_lowcase="the",self="64651") //  <  > 
 ]
 > 
 < [ token 64652 { 115 } false (wholesurface="waters ",xmlindex="127",surface_stripped_lowcase="waters",self="64652") //  <  > 
 ]
 > 
 < [ token 64653 { 116 } false (wholesurface="from ",xmlindex="128",surface_stripped_lowcase="from",self="64653") //  <  > 
 ]
 > 
 < [ token 64654 { 117 } false (wholesurface="the ",xmlindex="129",surface_stripped_lowcase="the",self="64654") //  <  > 
 ]
 > 
 < [ token 64655 { 118 } false (wholesurface="waters. ",xmlindex="130",surface_stripped_lowcase="waters",self="64655") //  <  > 
 ]
 > 
 < [ token 64656 { 119 } false (wholesurface="And ",xmlindex="132",surface_stripped_lowcase="and",self="64656") //  <  > 
 ]
 > 
 < [ token 64657 { 120 } false (wholesurface="God ",xmlindex="133",surface_stripped_lowcase="god",self="64657") //  <  > 
 ]
 > 
 < [ token 64658 { 121 } false (wholesurface="made ",xmlindex="134",surface_stripped_lowcase="made",self="64658") //  <  > 
 ]
 > 
 < [ token 64659 { 122 } false (wholesurface="the ",xmlindex="135",surface_stripped_lowcase="the",self="64659") //  <  > 
 ]
 > 
 < [ token 64660 { 123 } false (wholesurface="firmament, ",xmlindex="136",surface_stripped_lowcase="firmament",self="64660") //  <  > 
 ]
 > 
 < [ token 64661 { 124 } false (wholesurface="and ",xmlindex="137",surface_stripped_lowcase="and",self="64661") //  <  > 
 ]
 > 
 < [ token 64662 { 125 } false (wholesurface="divided ",xmlindex="138",surface_stripped_lowcase="divided",self="64662") //  <  > 
 ]
 > 
 < [ token 64663 { 126 } false (wholesurface="the ",xmlindex="139",surface_stripped_lowcase="the",self="64663") //  <  > 
 ]
 > 
 < [ token 64664 { 127 } false (wholesurface="waters ",xmlindex="140",surface_stripped_lowcase="waters",self="64664") //  <  > 
 ]
 > 
 < [ token 64665 { 128 } false (wholesurface="which ",xmlindex="141",surface_stripped_lowcase="which",self="64665") //  <  > 
 ]
 > 
 < [ token 64666 { 129 } false (wholesurface="were ",xmlindex="142",surface_stripped_lowcase="were",self="64666") //  <  > 
 ]
 > 
 < [ token 64667 { 130 } false (wholesurface="under ",xmlindex="143",surface_stripped_lowcase="under",self="64667") //  <  > 
 ]
 > 
 < [ token 64668 { 131 } false (wholesurface="the ",xmlindex="144",surface_stripped_lowcase="the",self="64668") //  <  > 
 ]
 > 
 < [ token 64669 { 132 } false (wholesurface="firmament ",xmlindex="145",surface_stripped_lowcase="firmament",self="64669") //  <  > 
 ]
 > 
 < [ token 64670 { 133 } false (wholesurface="from ",xmlindex="146",surface_stripped_lowcase="from",self="64670") //  <  > 
 ]
 > 
 < [ token 64671 { 134 } false (wholesurface="the ",xmlindex="147",surface_stripped_lowcase="the",self="64671") //  <  > 
 ]
 > 
 < [ token 64672 { 135 } false (wholesurface="waters ",xmlindex="148",surface_stripped_lowcase="waters",self="64672") //  <  > 
 ]
 > 
 < [ token 64673 { 136 } false (wholesurface="which ",xmlindex="149",surface_stripped_lowcase="which",self="64673") //  <  > 
 ]
 > 
 < [ token 64674 { 137 } false (wholesurface="were ",xmlindex="150",surface_stripped_lowcase="were",self="64674") //  <  > 
 ]
 > 
 < [ token 64675 { 138 } false (wholesurface="above ",xmlindex="151",surface_stripped_lowcase="above",self="64675") //  <  > 
 ]
 > 
 < [ token 64676 { 139 } false (wholesurface="the ",xmlindex="152",surface_stripped_lowcase="the",self="64676") //  <  > 
 ]
 > 
 < [ token 64677 { 140 } false (wholesurface="firmament: ",xmlindex="153",surface_stripped_lowcase="firmament",self="64677") //  <  > 
 ]
 > 
 < [ token 64678 { 141 } false (wholesurface="and ",xmlindex="154",surface_stripped_lowcase="and",self="64678") //  <  > 
 ]
 > 
 < [ token 64679 { 142 } false (wholesurface="it ",xmlindex="155",surface_stripped_lowcase="it",self="64679") //  <  > 
 ]
 > 
 < [ token 64680 { 143 } false (wholesurface="was ",xmlindex="156",surface_stripped_lowcase="was",self="64680") //  <  > 
 ]
 > 
 < [ token 64681 { 144 } false (wholesurface="so. ",xmlindex="157",surface_stripped_lowcase="so",self="64681") //  <  > 
 ]
 > 
 < [ token 64682 { 145 } false (wholesurface="And ",xmlindex="159",surface_stripped_lowcase="and",self="64682") //  <  > 
 ]
 > 
 < [ token 64683 { 146 } false (wholesurface="God ",xmlindex="160",surface_stripped_lowcase="god",self="64683") //  <  > 
 ]
 > 
 < [ token 64684 { 147 } false (wholesurface="called ",xmlindex="161",surface_stripped_lowcase="called",self="64684") //  <  > 
 ]
 > 
 < [ token 64685 { 148 } false (wholesurface="the ",xmlindex="162",surface_stripped_lowcase="the",self="64685") //  <  > 
 ]
 > 
 < [ token 64686 { 149 } false (wholesurface="firmament ",xmlindex="163",surface_stripped_lowcase="firmament",self="64686") //  <  > 
 ]
 > 
 < [ token 64687 { 150 } false (wholesurface="Heaven. ",xmlindex="164",surface_stripped_lowcase="heaven",self="64687") //  <  > 
 ]
 > 
 < [ token 64688 { 151 } false (wholesurface="And ",xmlindex="165",surface_stripped_lowcase="and",self="64688") //  <  > 
 ]
 > 
 < [ token 64689 { 152 } false (wholesurface="there ",xmlindex="166",surface_stripped_lowcase="there",self="64689") //  <  > 
 ]
 > 
 < [ token 64690 { 153 } false (wholesurface="was ",xmlindex="167",surface_stripped_lowcase="was",self="64690") //  <  > 
 ]
 > 
 < [ token 64691 { 154 } false (wholesurface="evening ",xmlindex="168",surface_stripped_lowcase="evening",self="64691") //  <  > 
 ]
 > 
 < [ token 64692 { 155 } false (wholesurface="and ",xmlindex="169",surface_stripped_lowcase="and",self="64692") //  <  > 
 ]
 > 
 < [ token 64693 { 156 } false (wholesurface="there ",xmlindex="170",surface_stripped_lowcase="there",self="64693") //  <  > 
 ]
 > 
 < [ token 64694 { 157 } false (wholesurface="was ",xmlindex="171",surface_stripped_lowcase="was",self="64694") //  <  > 
 ]
 > 
 < [ token 64695 { 158 } false (wholesurface="morning, ",xmlindex="172",surface_stripped_lowcase="morning",self="64695") //  <  > 
 ]
 > 
 < [ token 64696 { 159 } false (wholesurface="a ",xmlindex="173",surface_stripped_lowcase="a",self="64696") //  <  > 
 ]
 > 
 < [ token 64697 { 160 } false (wholesurface="second ",xmlindex="174",surface_stripped_lowcase="second",self="64697") //  <  > 
 ]
 > 
 < [ token 64698 { 161 } false (wholesurface="day. ",xmlindex="175",surface_stripped_lowcase="day",self="64698") //  <  > 
 ]
 > 
 < [ token 64699 { 162 } false (wholesurface="And ",xmlindex="178",surface_stripped_lowcase="and",self="64699") //  <  > 
 ]
 > 
 < [ token 64700 { 163 } false (wholesurface="God ",xmlindex="179",surface_stripped_lowcase="god",self="64700") //  <  > 
 ]
 > 
 < [ token 64701 { 164 } false (wholesurface="said, ",xmlindex="180",surface_stripped_lowcase="said",self="64701") //  <  > 
 ]
 > 
 < [ token 64702 { 165 } false (wholesurface="Let ",xmlindex="181",surface_stripped_lowcase="let",self="64702") //  <  > 
 ]
 > 
 < [ token 64703 { 166 } false (wholesurface="the ",xmlindex="182",surface_stripped_lowcase="the",self="64703") //  <  > 
 ]
 > 
 < [ token 64704 { 167 } false (wholesurface="waters ",xmlindex="183",surface_stripped_lowcase="waters",self="64704") //  <  > 
 ]
 > 
 < [ token 64705 { 168 } false (wholesurface="under ",xmlindex="184",surface_stripped_lowcase="under",self="64705") //  <  > 
 ]
 > 
 < [ token 64706 { 169 } false (wholesurface="the ",xmlindex="185",surface_stripped_lowcase="the",self="64706") //  <  > 
 ]
 > 
 < [ token 64707 { 170 } false (wholesurface="heavens ",xmlindex="186",surface_stripped_lowcase="heavens",self="64707") //  <  > 
 ]
 > 
 < [ token 64708 { 171 } false (wholesurface="be ",xmlindex="187",surface_stripped_lowcase="be",self="64708") //  <  > 
 ]
 > 
 < [ token 64709 { 172 } false (wholesurface="gathered ",xmlindex="188",surface_stripped_lowcase="gathered",self="64709") //  <  > 
 ]
 > 
 < [ token 64710 { 173 } false (wholesurface="together ",xmlindex="189",surface_stripped_lowcase="together",self="64710") //  <  > 
 ]
 > 
 < [ token 64711 { 174 } false (wholesurface="unto ",xmlindex="190",surface_stripped_lowcase="unto",self="64711") //  <  > 
 ]
 > 
 < [ token 64712 { 175 } false (wholesurface="one ",xmlindex="191",surface_stripped_lowcase="one",self="64712") //  <  > 
 ]
 > 
 < [ token 64713 { 176 } false (wholesurface="place, ",xmlindex="192",surface_stripped_lowcase="place",self="64713") //  <  > 
 ]
 > 
 < [ token 64714 { 177 } false (wholesurface="and ",xmlindex="193",surface_stripped_lowcase="and",self="64714") //  <  > 
 ]
 > 
 < [ token 64715 { 178 } false (wholesurface="let ",xmlindex="194",surface_stripped_lowcase="let",self="64715") //  <  > 
 ]
 > 
 < [ token 64716 { 179 } false (wholesurface="the ",xmlindex="195",surface_stripped_lowcase="the",self="64716") //  <  > 
 ]
 > 
 < [ token 64717 { 180 } false (wholesurface="dry ",xmlindex="196",surface_stripped_lowcase="dry",self="64717") //  <  > 
 ]
 > 
 < [ token 64718 { 181 } false (wholesurface="land ",xmlindex="197",surface_stripped_lowcase="land",self="64718") //  <  > 
 ]
 > 
 < [ token 64719 { 182 } false (wholesurface="appear: ",xmlindex="198",surface_stripped_lowcase="appear",self="64719") //  <  > 
 ]
 > 
 < [ token 64720 { 183 } false (wholesurface="and ",xmlindex="199",surface_stripped_lowcase="and",self="64720") //  <  > 
 ]
 > 
 < [ token 64721 { 184 } false (wholesurface="it ",xmlindex="200",surface_stripped_lowcase="it",self="64721") //  <  > 
 ]
 > 
 < [ token 64722 { 185 } false (wholesurface="was ",xmlindex="201",surface_stripped_lowcase="was",self="64722") //  <  > 
 ]
 > 
 < [ token 64723 { 186 } false (wholesurface="so. ",xmlindex="202",surface_stripped_lowcase="so",self="64723") //  <  > 
 ]
 > 
 < [ token 64724 { 187 } false (wholesurface="And ",xmlindex="204",surface_stripped_lowcase="and",self="64724") //  <  > 
 ]
 > 
 < [ token 64725 { 188 } false (wholesurface="God ",xmlindex="205",surface_stripped_lowcase="god",self="64725") //  <  > 
 ]
 > 
 < [ token 64726 { 189 } false (wholesurface="called ",xmlindex="206",surface_stripped_lowcase="called",self="64726") //  <  > 
 ]
 > 
 < [ token 64727 { 190 } false (wholesurface="the ",xmlindex="207",surface_stripped_lowcase="the",self="64727") //  <  > 
 ]
 > 
 < [ token 64728 { 191 } false (wholesurface="dry ",xmlindex="208",surface_stripped_lowcase="dry",self="64728") //  <  > 
 ]
 > 
 < [ token 64729 { 192 } false (wholesurface="land ",xmlindex="209",surface_stripped_lowcase="land",self="64729") //  <  > 
 ]
 > 
 < [ token 64730 { 193 } false (wholesurface="Earth; ",xmlindex="210",surface_stripped_lowcase="earth",self="64730") //  <  > 
 ]
 > 
 < [ token 64731 { 194 } false (wholesurface="and ",xmlindex="211",surface_stripped_lowcase="and",self="64731") //  <  > 
 ]
 > 
 < [ token 64732 { 195 } false (wholesurface="the ",xmlindex="212",surface_stripped_lowcase="the",self="64732") //  <  > 
 ]
 > 
 < [ token 64733 { 196 } false (wholesurface="gathering ",xmlindex="213",surface_stripped_lowcase="gathering",self="64733") //  <  > 
 ]
 > 
 < [ token 64734 { 197 } false (wholesurface="together ",xmlindex="214",surface_stripped_lowcase="together",self="64734") //  <  > 
 ]
 > 
 < [ token 64735 { 198 } false (wholesurface="of ",xmlindex="215",surface_stripped_lowcase="of",self="64735") //  <  > 
 ]
 > 
 < [ token 64736 { 199 } false (wholesurface="the ",xmlindex="216",surface_stripped_lowcase="the",self="64736") //  <  > 
 ]
 > 
 < [ token 64737 { 200 } false (wholesurface="waters ",xmlindex="217",surface_stripped_lowcase="waters",self="64737") //  <  > 
 ]
 > 
 < [ token 64738 { 201 } false (wholesurface="called ",xmlindex="218",surface_stripped_lowcase="called",self="64738") //  <  > 
 ]
 > 
 < [ token 64739 { 202 } false (wholesurface="he ",xmlindex="219",surface_stripped_lowcase="he",self="64739") //  <  > 
 ]
 > 
 < [ token 64740 { 203 } false (wholesurface="Seas: ",xmlindex="220",surface_stripped_lowcase="seas",self="64740") //  <  > 
 ]
 > 
 < [ token 64741 { 204 } false (wholesurface="and ",xmlindex="221",surface_stripped_lowcase="and",self="64741") //  <  > 
 ]
 > 
 < [ token 64742 { 205 } false (wholesurface="God ",xmlindex="222",surface_stripped_lowcase="god",self="64742") //  <  > 
 ]
 > 
 < [ token 64743 { 206 } false (wholesurface="saw ",xmlindex="223",surface_stripped_lowcase="saw",self="64743") //  <  > 
 ]
 > 
 < [ token 64744 { 207 } false (wholesurface="that ",xmlindex="224",surface_stripped_lowcase="that",self="64744") //  <  > 
 ]
 > 
 < [ token 64745 { 208 } false (wholesurface="it ",xmlindex="225",surface_stripped_lowcase="it",self="64745") //  <  > 
 ]
 > 
 < [ token 64746 { 209 } false (wholesurface="was ",xmlindex="226",surface_stripped_lowcase="was",self="64746") //  <  > 
 ]
 > 
 < [ token 64747 { 210 } false (wholesurface="good. ",xmlindex="227",surface_stripped_lowcase="good",self="64747") //  <  > 
 ]
 > 
 < [ token 64748 { 211 } false (wholesurface="And ",xmlindex="229",surface_stripped_lowcase="and",self="64748") //  <  > 
 ]
 > 
 < [ token 64749 { 212 } false (wholesurface="God ",xmlindex="230",surface_stripped_lowcase="god",self="64749") //  <  > 
 ]
 > 
 < [ token 64750 { 213 } false (wholesurface="said, ",xmlindex="231",surface_stripped_lowcase="said",self="64750") //  <  > 
 ]
 > 
 < [ token 64751 { 214 } false (wholesurface="Let ",xmlindex="232",surface_stripped_lowcase="let",self="64751") //  <  > 
 ]
 > 
 < [ token 64752 { 215 } false (wholesurface="the ",xmlindex="233",surface_stripped_lowcase="the",self="64752") //  <  > 
 ]
 > 
 < [ token 64753 { 216 } false (wholesurface="earth ",xmlindex="234",surface_stripped_lowcase="earth",self="64753") //  <  > 
 ]
 > 
 < [ token 64754 { 217 } false (wholesurface="put ",xmlindex="235",surface_stripped_lowcase="put",self="64754") //  <  > 
 ]
 > 
 < [ token 64755 { 218 } false (wholesurface="forth ",xmlindex="236",surface_stripped_lowcase="forth",self="64755") //  <  > 
 ]
 > 
 < [ token 64756 { 219 } false (wholesurface="grass, ",xmlindex="237",surface_stripped_lowcase="grass",self="64756") //  <  > 
 ]
 > 
 < [ token 64757 { 220 } false (wholesurface="herbs ",xmlindex="238",surface_stripped_lowcase="herbs",self="64757") //  <  > 
 ]
 > 
 < [ token 64758 { 221 } false (wholesurface="yielding ",xmlindex="239",surface_stripped_lowcase="yielding",self="64758") //  <  > 
 ]
 > 
 < [ token 64759 { 222 } false (wholesurface="seed, ",xmlindex="240",surface_stripped_lowcase="seed",self="64759") //  <  > 
 ]
 > 
 < [ token 64760 { 223 } false (wholesurface="and",xmlindex="242",surface_stripped_lowcase="and",self="64760") //  <  > 
 ]
 > 
 < [ token 64761 { 224 } false (wholesurface=" fruit-trees ",xmlindex="243",surface_stripped_lowcase="fruit",self="64761") //  <  > 
 ]
 > 
 < [ token 64762 { 225 } false (wholesurface="bearing ",xmlindex="244",surface_stripped_lowcase="bearing",self="64762") //  <  > 
 ]
 > 
 < [ token 64763 { 226 } false (wholesurface="fruit ",xmlindex="245",surface_stripped_lowcase="fruit",self="64763") //  <  > 
 ]
 > 
 < [ token 64764 { 227 } false (wholesurface="after ",xmlindex="246",surface_stripped_lowcase="after",self="64764") //  <  > 
 ]
 > 
 < [ token 64765 { 228 } false (wholesurface="their ",xmlindex="247",surface_stripped_lowcase="their",self="64765") //  <  > 
 ]
 > 
 < [ token 64766 { 229 } false (wholesurface="kind, ",xmlindex="248",surface_stripped_lowcase="kind",self="64766") //  <  > 
 ]
 > 
 < [ token 64767 { 230 } false (wholesurface="wherein ",xmlindex="249",surface_stripped_lowcase="wherein",self="64767") //  <  > 
 ]
 > 
 < [ token 64768 { 231 } false (wholesurface="is ",xmlindex="250",surface_stripped_lowcase="is",self="64768") //  <  > 
 ]
 > 
 < [ token 64769 { 232 } false (wholesurface="the ",xmlindex="251",surface_stripped_lowcase="the",self="64769") //  <  > 
 ]
 > 
 < [ token 64770 { 233 } false (wholesurface="seed ",xmlindex="252",surface_stripped_lowcase="seed",self="64770") //  <  > 
 ]
 > 
 < [ token 64771 { 234 } false (wholesurface="thereof, ",xmlindex="253",surface_stripped_lowcase="thereof",self="64771") //  <  > 
 ]
 > 
 < [ token 64772 { 235 } false (wholesurface="upon ",xmlindex="254",surface_stripped_lowcase="upon",self="64772") //  <  > 
 ]
 > 
 < [ token 64773 { 236 } false (wholesurface="the ",xmlindex="255",surface_stripped_lowcase="the",self="64773") //  <  > 
 ]
 > 
 < [ token 64774 { 237 } false (wholesurface="earth: ",xmlindex="256",surface_stripped_lowcase="earth",self="64774") //  <  > 
 ]
 > 
 < [ token 64775 { 238 } false (wholesurface="and ",xmlindex="257",surface_stripped_lowcase="and",self="64775") //  <  > 
 ]
 > 
 < [ token 64776 { 239 } false (wholesurface="it ",xmlindex="258",surface_stripped_lowcase="it",self="64776") //  <  > 
 ]
 > 
 < [ token 64777 { 240 } false (wholesurface="was ",xmlindex="259",surface_stripped_lowcase="was",self="64777") //  <  > 
 ]
 > 
 < [ token 64778 { 241 } false (wholesurface="so. ",xmlindex="260",surface_stripped_lowcase="so",self="64778") //  <  > 
 ]
 > 
 < [ token 64779 { 242 } false (wholesurface="And ",xmlindex="262",surface_stripped_lowcase="and",self="64779") //  <  > 
 ]
 > 
 < [ token 64780 { 243 } false (wholesurface="the ",xmlindex="263",surface_stripped_lowcase="the",self="64780") //  <  > 
 ]
 > 
 < [ token 64781 { 244 } false (wholesurface="earth ",xmlindex="264",surface_stripped_lowcase="earth",self="64781") //  <  > 
 ]
 > 
 < [ token 64782 { 245 } false (wholesurface="brought ",xmlindex="265",surface_stripped_lowcase="brought",self="64782") //  <  > 
 ]
 > 
 < [ token 64783 { 246 } false (wholesurface="forth ",xmlindex="266",surface_stripped_lowcase="forth",self="64783") //  <  > 
 ]
 > 
 < [ token 64784 { 247 } false (wholesurface="grass, ",xmlindex="267",surface_stripped_lowcase="grass",self="64784") //  <  > 
 ]
 > 
 < [ token 64785 { 248 } false (wholesurface="herbs ",xmlindex="268",surface_stripped_lowcase="herbs",self="64785") //  <  > 
 ]
 > 
 < [ token 64786 { 249 } false (wholesurface="yielding ",xmlindex="269",surface_stripped_lowcase="yielding",self="64786") //  <  > 
 ]
 > 
 < [ token 64787 { 250 } false (wholesurface="seed ",xmlindex="270",surface_stripped_lowcase="seed",self="64787") //  <  > 
 ]
 > 
 < [ token 64788 { 251 } false (wholesurface="after ",xmlindex="271",surface_stripped_lowcase="after",self="64788") //  <  > 
 ]
 > 
 < [ token 64789 { 252 } false (wholesurface="their ",xmlindex="272",surface_stripped_lowcase="their",self="64789") //  <  > 
 ]
 > 
 < [ token 64790 { 253 } false (wholesurface="kind, ",xmlindex="273",surface_stripped_lowcase="kind",self="64790") //  <  > 
 ]
 > 
 < [ token 64791 { 254 } false (wholesurface="and ",xmlindex="274",surface_stripped_lowcase="and",self="64791") //  <  > 
 ]
 > 
 < [ token 64792 { 255 } false (wholesurface="trees ",xmlindex="275",surface_stripped_lowcase="trees",self="64792") //  <  > 
 ]
 > 
 < [ token 64793 { 256 } false (wholesurface="bearing ",xmlindex="276",surface_stripped_lowcase="bearing",self="64793") //  <  > 
 ]
 > 
 < [ token 64794 { 257 } false (wholesurface="fruit, ",xmlindex="277",surface_stripped_lowcase="fruit",self="64794") //  <  > 
 ]
 > 
 < [ token 64795 { 258 } false (wholesurface="wherein ",xmlindex="278",surface_stripped_lowcase="wherein",self="64795") //  <  > 
 ]
 > 
 < [ token 64796 { 259 } false (wholesurface="is ",xmlindex="279",surface_stripped_lowcase="is",self="64796") //  <  > 
 ]
 > 
 < [ token 64797 { 260 } false (wholesurface="the ",xmlindex="280",surface_stripped_lowcase="the",self="64797") //  <  > 
 ]
 > 
 < [ token 64798 { 261 } false (wholesurface="seed ",xmlindex="281",surface_stripped_lowcase="seed",self="64798") //  <  > 
 ]
 > 
 < [ token 64799 { 262 } false (wholesurface="thereof, ",xmlindex="282",surface_stripped_lowcase="thereof",self="64799") //  <  > 
 ]
 > 
 < [ token 64800 { 263 } false (wholesurface="after ",xmlindex="283",surface_stripped_lowcase="after",self="64800") //  <  > 
 ]
 > 
 < [ token 64801 { 264 } false (wholesurface="their ",xmlindex="284",surface_stripped_lowcase="their",self="64801") //  <  > 
 ]
 > 
 < [ token 64802 { 265 } false (wholesurface="kind: ",xmlindex="285",surface_stripped_lowcase="kind",self="64802") //  <  > 
 ]
 > 
 < [ token 64803 { 266 } false (wholesurface="and ",xmlindex="286",surface_stripped_lowcase="and",self="64803") //  <  > 
 ]
 > 
 < [ token 64804 { 267 } false (wholesurface="God ",xmlindex="287",surface_stripped_lowcase="god",self="64804") //  <  > 
 ]
 > 
 < [ token 64805 { 268 } false (wholesurface="saw ",xmlindex="288",surface_stripped_lowcase="saw",self="64805") //  <  > 
 ]
 > 
 < [ token 64806 { 269 } false (wholesurface="that ",xmlindex="289",surface_stripped_lowcase="that",self="64806") //  <  > 
 ]
 > 
 < [ token 64807 { 270 } false (wholesurface="it ",xmlindex="290",surface_stripped_lowcase="it",self="64807") //  <  > 
 ]
 > 
 < [ token 64808 { 271 } false (wholesurface="was ",xmlindex="291",surface_stripped_lowcase="was",self="64808") //  <  > 
 ]
 > 
 < [ token 64809 { 272 } false (wholesurface="good. ",xmlindex="292",surface_stripped_lowcase="good",self="64809") //  <  > 
 ]
 > 
 < [ token 64810 { 273 } false (wholesurface="And ",xmlindex="294",surface_stripped_lowcase="and",self="64810") //  <  > 
 ]
 > 
 < [ token 64811 { 274 } false (wholesurface="there ",xmlindex="295",surface_stripped_lowcase="there",self="64811") //  <  > 
 ]
 > 
 < [ token 64812 { 275 } false (wholesurface="was ",xmlindex="296",surface_stripped_lowcase="was",self="64812") //  <  > 
 ]
 > 
 < [ token 64813 { 276 } false (wholesurface="evening ",xmlindex="297",surface_stripped_lowcase="evening",self="64813") //  <  > 
 ]
 > 
 < [ token 64814 { 277 } false (wholesurface="and ",xmlindex="298",surface_stripped_lowcase="and",self="64814") //  <  > 
 ]
 > 
 < [ token 64815 { 278 } false (wholesurface="there ",xmlindex="299",surface_stripped_lowcase="there",self="64815") //  <  > 
 ]
 > 
 < [ token 64816 { 279 } false (wholesurface="was ",xmlindex="300",surface_stripped_lowcase="was",self="64816") //  <  > 
 ]
 > 
 < [ token 64817 { 280 } false (wholesurface="morning, ",xmlindex="301",surface_stripped_lowcase="morning",self="64817") //  <  > 
 ]
 > 
 < [ token 64818 { 281 } false (wholesurface="a ",xmlindex="302",surface_stripped_lowcase="a",self="64818") //  <  > 
 ]
 > 
 < [ token 64819 { 282 } false (wholesurface="third ",xmlindex="303",surface_stripped_lowcase="third",self="64819") //  <  > 
 ]
 > 
 < [ token 64820 { 283 } false (wholesurface="day. ",xmlindex="304",surface_stripped_lowcase="day",self="64820") //  <  > 
 ]
 > 
 < [ token 64821 { 284 } false (wholesurface="And ",xmlindex="307",surface_stripped_lowcase="and",self="64821") //  <  > 
 ]
 > 
 < [ token 64822 { 285 } false (wholesurface="God ",xmlindex="308",surface_stripped_lowcase="god",self="64822") //  <  > 
 ]
 > 
 < [ token 64823 { 286 } false (wholesurface="said, ",xmlindex="309",surface_stripped_lowcase="said",self="64823") //  <  > 
 ]
 > 
 < [ token 64824 { 287 } false (wholesurface="Let ",xmlindex="310",surface_stripped_lowcase="let",self="64824") //  <  > 
 ]
 > 
 < [ token 64825 { 288 } false (wholesurface="there ",xmlindex="311",surface_stripped_lowcase="there",self="64825") //  <  > 
 ]
 > 
 < [ token 64826 { 289 } false (wholesurface="be ",xmlindex="312",surface_stripped_lowcase="be",self="64826") //  <  > 
 ]
 > 
 < [ token 64827 { 290 } false (wholesurface="lights ",xmlindex="313",surface_stripped_lowcase="lights",self="64827") //  <  > 
 ]
 > 
 < [ token 64828 { 291 } false (wholesurface="in ",xmlindex="314",surface_stripped_lowcase="in",self="64828") //  <  > 
 ]
 > 
 < [ token 64829 { 292 } false (wholesurface="the ",xmlindex="315",surface_stripped_lowcase="the",self="64829") //  <  > 
 ]
 > 
 < [ token 64830 { 293 } false (wholesurface="firmament ",xmlindex="316",surface_stripped_lowcase="firmament",self="64830") //  <  > 
 ]
 > 
 < [ token 64831 { 294 } false (wholesurface="of ",xmlindex="317",surface_stripped_lowcase="of",self="64831") //  <  > 
 ]
 > 
 < [ token 64832 { 295 } false (wholesurface="heaven ",xmlindex="318",surface_stripped_lowcase="heaven",self="64832") //  <  > 
 ]
 > 
 < [ token 64833 { 296 } false (wholesurface="to ",xmlindex="319",surface_stripped_lowcase="to",self="64833") //  <  > 
 ]
 > 
 < [ token 64834 { 297 } false (wholesurface="divide ",xmlindex="320",surface_stripped_lowcase="divide",self="64834") //  <  > 
 ]
 > 
 < [ token 64835 { 298 } false (wholesurface="the ",xmlindex="321",surface_stripped_lowcase="the",self="64835") //  <  > 
 ]
 > 
 < [ token 64836 { 299 } false (wholesurface="day ",xmlindex="322",surface_stripped_lowcase="day",self="64836") //  <  > 
 ]
 > 
 < [ token 64837 { 300 } false (wholesurface="from ",xmlindex="323",surface_stripped_lowcase="from",self="64837") //  <  > 
 ]
 > 
 < [ token 64838 { 301 } false (wholesurface="the ",xmlindex="324",surface_stripped_lowcase="the",self="64838") //  <  > 
 ]
 > 
 < [ token 64839 { 302 } false (wholesurface="night; ",xmlindex="325",surface_stripped_lowcase="night",self="64839") //  <  > 
 ]
 > 
 < [ token 64840 { 303 } false (wholesurface="and ",xmlindex="326",surface_stripped_lowcase="and",self="64840") //  <  > 
 ]
 > 
 < [ token 64841 { 304 } false (wholesurface="let ",xmlindex="327",surface_stripped_lowcase="let",self="64841") //  <  > 
 ]
 > 
 < [ token 64842 { 305 } false (wholesurface="them ",xmlindex="328",surface_stripped_lowcase="them",self="64842") //  <  > 
 ]
 > 
 < [ token 64843 { 306 } false (wholesurface="be ",xmlindex="329",surface_stripped_lowcase="be",self="64843") //  <  > 
 ]
 > 
 < [ token 64844 { 307 } false (wholesurface="for ",xmlindex="330",surface_stripped_lowcase="for",self="64844") //  <  > 
 ]
 > 
 < [ token 64845 { 308 } false (wholesurface="signs, ",xmlindex="331",surface_stripped_lowcase="signs",self="64845") //  <  > 
 ]
 > 
 < [ token 64846 { 309 } false (wholesurface="and ",xmlindex="332",surface_stripped_lowcase="and",self="64846") //  <  > 
 ]
 > 
 < [ token 64847 { 310 } false (wholesurface="for ",xmlindex="333",surface_stripped_lowcase="for",self="64847") //  <  > 
 ]
 > 
 < [ token 64848 { 311 } false (wholesurface="seasons, ",xmlindex="334",surface_stripped_lowcase="seasons",self="64848") //  <  > 
 ]
 > 
 < [ token 64849 { 312 } false (wholesurface="and ",xmlindex="335",surface_stripped_lowcase="and",self="64849") //  <  > 
 ]
 > 
 < [ token 64850 { 313 } false (wholesurface="for ",xmlindex="336",surface_stripped_lowcase="for",self="64850") //  <  > 
 ]
 > 
 < [ token 64851 { 314 } false (wholesurface="days ",xmlindex="337",surface_stripped_lowcase="days",self="64851") //  <  > 
 ]
 > 
 < [ token 64852 { 315 } false (wholesurface="and ",xmlindex="338",surface_stripped_lowcase="and",self="64852") //  <  > 
 ]
 > 
 < [ token 64853 { 316 } false (wholesurface="years: ",xmlindex="339",surface_stripped_lowcase="years",self="64853") //  <  > 
 ]
 > 
 < [ token 64854 { 317 } false (wholesurface="and ",xmlindex="341",surface_stripped_lowcase="and",self="64854") //  <  > 
 ]
 > 
 < [ token 64855 { 318 } false (wholesurface="let ",xmlindex="342",surface_stripped_lowcase="let",self="64855") //  <  > 
 ]
 > 
 < [ token 64856 { 319 } false (wholesurface="them ",xmlindex="343",surface_stripped_lowcase="them",self="64856") //  <  > 
 ]
 > 
 < [ token 64857 { 320 } false (wholesurface="be ",xmlindex="344",surface_stripped_lowcase="be",self="64857") //  <  > 
 ]
 > 
 < [ token 64858 { 321 } false (wholesurface="for ",xmlindex="345",surface_stripped_lowcase="for",self="64858") //  <  > 
 ]
 > 
 < [ token 64859 { 322 } false (wholesurface="lights ",xmlindex="346",surface_stripped_lowcase="lights",self="64859") //  <  > 
 ]
 > 
 < [ token 64860 { 323 } false (wholesurface="in ",xmlindex="347",surface_stripped_lowcase="in",self="64860") //  <  > 
 ]
 > 
 < [ token 64861 { 324 } false (wholesurface="the ",xmlindex="348",surface_stripped_lowcase="the",self="64861") //  <  > 
 ]
 > 
 < [ token 64862 { 325 } false (wholesurface="firmament ",xmlindex="349",surface_stripped_lowcase="firmament",self="64862") //  <  > 
 ]
 > 
 < [ token 64863 { 326 } false (wholesurface="of ",xmlindex="350",surface_stripped_lowcase="of",self="64863") //  <  > 
 ]
 > 
 < [ token 64864 { 327 } false (wholesurface="heaven ",xmlindex="351",surface_stripped_lowcase="heaven",self="64864") //  <  > 
 ]
 > 
 < [ token 64865 { 328 } false (wholesurface="to ",xmlindex="352",surface_stripped_lowcase="to",self="64865") //  <  > 
 ]
 > 
 < [ token 64866 { 329 } false (wholesurface="give ",xmlindex="353",surface_stripped_lowcase="give",self="64866") //  <  > 
 ]
 > 
 < [ token 64867 { 330 } false (wholesurface="light ",xmlindex="354",surface_stripped_lowcase="light",self="64867") //  <  > 
 ]
 > 
 < [ token 64868 { 331 } false (wholesurface="upon ",xmlindex="355",surface_stripped_lowcase="upon",self="64868") //  <  > 
 ]
 > 
 < [ token 64869 { 332 } false (wholesurface="the ",xmlindex="356",surface_stripped_lowcase="the",self="64869") //  <  > 
 ]
 > 
 < [ token 64870 { 333 } false (wholesurface="earth: ",xmlindex="357",surface_stripped_lowcase="earth",self="64870") //  <  > 
 ]
 > 
 < [ token 64871 { 334 } false (wholesurface="and ",xmlindex="358",surface_stripped_lowcase="and",self="64871") //  <  > 
 ]
 > 
 < [ token 64872 { 335 } false (wholesurface="it ",xmlindex="359",surface_stripped_lowcase="it",self="64872") //  <  > 
 ]
 > 
 < [ token 64873 { 336 } false (wholesurface="was ",xmlindex="360",surface_stripped_lowcase="was",self="64873") //  <  > 
 ]
 > 
 < [ token 64874 { 337 } false (wholesurface="so. ",xmlindex="361",surface_stripped_lowcase="so",self="64874") //  <  > 
 ]
 > 
 < [ token 64875 { 338 } false (wholesurface="And ",xmlindex="363",surface_stripped_lowcase="and",self="64875") //  <  > 
 ]
 > 
 < [ token 64876 { 339 } false (wholesurface="God ",xmlindex="364",surface_stripped_lowcase="god",self="64876") //  <  > 
 ]
 > 
 < [ token 64877 { 340 } false (wholesurface="made ",xmlindex="365",surface_stripped_lowcase="made",self="64877") //  <  > 
 ]
 > 
 < [ token 64878 { 341 } false (wholesurface="the ",xmlindex="366",surface_stripped_lowcase="the",self="64878") //  <  > 
 ]
 > 
 < [ token 64879 { 342 } false (wholesurface="two ",xmlindex="367",surface_stripped_lowcase="two",self="64879") //  <  > 
 ]
 > 
 < [ token 64880 { 343 } false (wholesurface="great ",xmlindex="368",surface_stripped_lowcase="great",self="64880") //  <  > 
 ]
 > 
 < [ token 64881 { 344 } false (wholesurface="lights; ",xmlindex="369",surface_stripped_lowcase="lights",self="64881") //  <  > 
 ]
 > 
 < [ token 64882 { 345 } false (wholesurface="the ",xmlindex="370",surface_stripped_lowcase="the",self="64882") //  <  > 
 ]
 > 
 < [ token 64883 { 346 } false (wholesurface="greater ",xmlindex="371",surface_stripped_lowcase="greater",self="64883") //  <  > 
 ]
 > 
 < [ token 64884 { 347 } false (wholesurface="light ",xmlindex="372",surface_stripped_lowcase="light",self="64884") //  <  > 
 ]
 > 
 < [ token 64885 { 348 } false (wholesurface="to ",xmlindex="373",surface_stripped_lowcase="to",self="64885") //  <  > 
 ]
 > 
 < [ token 64886 { 349 } false (wholesurface="rule ",xmlindex="374",surface_stripped_lowcase="rule",self="64886") //  <  > 
 ]
 > 
 < [ token 64887 { 350 } false (wholesurface="the ",xmlindex="375",surface_stripped_lowcase="the",self="64887") //  <  > 
 ]
 > 
 < [ token 64888 { 351 } false (wholesurface="day, ",xmlindex="376",surface_stripped_lowcase="day",self="64888") //  <  > 
 ]
 > 
 < [ token 64889 { 352 } false (wholesurface="and ",xmlindex="377",surface_stripped_lowcase="and",self="64889") //  <  > 
 ]
 > 
 < [ token 64890 { 353 } false (wholesurface="the ",xmlindex="378",surface_stripped_lowcase="the",self="64890") //  <  > 
 ]
 > 
 < [ token 64891 { 354 } false (wholesurface="lesser ",xmlindex="379",surface_stripped_lowcase="lesser",self="64891") //  <  > 
 ]
 > 
 < [ token 64892 { 355 } false (wholesurface="light ",xmlindex="380",surface_stripped_lowcase="light",self="64892") //  <  > 
 ]
 > 
 < [ token 64893 { 356 } false (wholesurface="to ",xmlindex="381",surface_stripped_lowcase="to",self="64893") //  <  > 
 ]
 > 
 < [ token 64894 { 357 } false (wholesurface="rule ",xmlindex="382",surface_stripped_lowcase="rule",self="64894") //  <  > 
 ]
 > 
 < [ token 64895 { 358 } false (wholesurface="the ",xmlindex="383",surface_stripped_lowcase="the",self="64895") //  <  > 
 ]
 > 
 < [ token 64896 { 359 } false (wholesurface="night: ",xmlindex="384",surface_stripped_lowcase="night",self="64896") //  <  > 
 ]
 > 
 < [ token 64897 { 360 } false (wholesurface="he ",xmlindex="386",surface_stripped_lowcase="he",self="64897") //  <  > 
 ]
 > 
 < [ token 64898 { 361 } false (wholesurface="made",xmlindex="387",surface_stripped_lowcase="made",self="64898") //  <  > 
 ]
 > 
 < [ token 64899 { 362 } false (wholesurface=" the ",xmlindex="388",surface_stripped_lowcase="the",self="64899") //  <  > 
 ]
 > 
 < [ token 64900 { 363 } false (wholesurface="stars ",xmlindex="389",surface_stripped_lowcase="stars",self="64900") //  <  > 
 ]
 > 
 < [ token 64901 { 364 } false (wholesurface="also. ",xmlindex="390",surface_stripped_lowcase="also",self="64901") //  <  > 
 ]
 > 
 < [ token 64902 { 365 } false (wholesurface="And ",xmlindex="392",surface_stripped_lowcase="and",self="64902") //  <  > 
 ]
 > 
 < [ token 64903 { 366 } false (wholesurface="God ",xmlindex="393",surface_stripped_lowcase="god",self="64903") //  <  > 
 ]
 > 
 < [ token 64904 { 367 } false (wholesurface="set ",xmlindex="394",surface_stripped_lowcase="set",self="64904") //  <  > 
 ]
 > 
 < [ token 64905 { 368 } false (wholesurface="them ",xmlindex="395",surface_stripped_lowcase="them",self="64905") //  <  > 
 ]
 > 
 < [ token 64906 { 369 } false (wholesurface="in ",xmlindex="396",surface_stripped_lowcase="in",self="64906") //  <  > 
 ]
 > 
 < [ token 64907 { 370 } false (wholesurface="the ",xmlindex="397",surface_stripped_lowcase="the",self="64907") //  <  > 
 ]
 > 
 < [ token 64908 { 371 } false (wholesurface="firmament ",xmlindex="398",surface_stripped_lowcase="firmament",self="64908") //  <  > 
 ]
 > 
 < [ token 64909 { 372 } false (wholesurface="of ",xmlindex="399",surface_stripped_lowcase="of",self="64909") //  <  > 
 ]
 > 
 < [ token 64910 { 373 } false (wholesurface="heaven ",xmlindex="400",surface_stripped_lowcase="heaven",self="64910") //  <  > 
 ]
 > 
 < [ token 64911 { 374 } false (wholesurface="to ",xmlindex="401",surface_stripped_lowcase="to",self="64911") //  <  > 
 ]
 > 
 < [ token 64912 { 375 } false (wholesurface="give ",xmlindex="402",surface_stripped_lowcase="give",self="64912") //  <  > 
 ]
 > 
 < [ token 64913 { 376 } false (wholesurface="light ",xmlindex="403",surface_stripped_lowcase="light",self="64913") //  <  > 
 ]
 > 
 < [ token 64914 { 377 } false (wholesurface="upon ",xmlindex="404",surface_stripped_lowcase="upon",self="64914") //  <  > 
 ]
 > 
 < [ token 64915 { 378 } false (wholesurface="the ",xmlindex="405",surface_stripped_lowcase="the",self="64915") //  <  > 
 ]
 > 
 < [ token 64916 { 379 } false (wholesurface="earth, ",xmlindex="406",surface_stripped_lowcase="earth",self="64916") //  <  > 
 ]
 > 
 < [ token 64917 { 380 } false (wholesurface="and ",xmlindex="408",surface_stripped_lowcase="and",self="64917") //  <  > 
 ]
 > 
 < [ token 64918 { 381 } false (wholesurface="to ",xmlindex="409",surface_stripped_lowcase="to",self="64918") //  <  > 
 ]
 > 
 < [ token 64919 { 382 } false (wholesurface="rule ",xmlindex="410",surface_stripped_lowcase="rule",self="64919") //  <  > 
 ]
 > 
 < [ token 64920 { 383 } false (wholesurface="over ",xmlindex="411",surface_stripped_lowcase="over",self="64920") //  <  > 
 ]
 > 
 < [ token 64921 { 384 } false (wholesurface="the ",xmlindex="412",surface_stripped_lowcase="the",self="64921") //  <  > 
 ]
 > 
 < [ token 64922 { 385 } false (wholesurface="day ",xmlindex="413",surface_stripped_lowcase="day",self="64922") //  <  > 
 ]
 > 
 < [ token 64923 { 386 } false (wholesurface="and ",xmlindex="414",surface_stripped_lowcase="and",self="64923") //  <  > 
 ]
 > 
 < [ token 64924 { 387 } false (wholesurface="over ",xmlindex="415",surface_stripped_lowcase="over",self="64924") //  <  > 
 ]
 > 
 < [ token 64925 { 388 } false (wholesurface="the ",xmlindex="416",surface_stripped_lowcase="the",self="64925") //  <  > 
 ]
 > 
 < [ token 64926 { 389 } false (wholesurface="night, ",xmlindex="417",surface_stripped_lowcase="night",self="64926") //  <  > 
 ]
 > 
 < [ token 64927 { 390 } false (wholesurface="and ",xmlindex="418",surface_stripped_lowcase="and",self="64927") //  <  > 
 ]
 > 
 < [ token 64928 { 391 } false (wholesurface="to ",xmlindex="419",surface_stripped_lowcase="to",self="64928") //  <  > 
 ]
 > 
 < [ token 64929 { 392 } false (wholesurface="divide ",xmlindex="420",surface_stripped_lowcase="divide",self="64929") //  <  > 
 ]
 > 
 < [ token 64930 { 393 } false (wholesurface="the ",xmlindex="421",surface_stripped_lowcase="the",self="64930") //  <  > 
 ]
 > 
 < [ token 64931 { 394 } false (wholesurface="light ",xmlindex="422",surface_stripped_lowcase="light",self="64931") //  <  > 
 ]
 > 
 < [ token 64932 { 395 } false (wholesurface="from ",xmlindex="423",surface_stripped_lowcase="from",self="64932") //  <  > 
 ]
 > 
 < [ token 64933 { 396 } false (wholesurface="the ",xmlindex="424",surface_stripped_lowcase="the",self="64933") //  <  > 
 ]
 > 
 < [ token 64934 { 397 } false (wholesurface="darkness: ",xmlindex="425",surface_stripped_lowcase="darkness",self="64934") //  <  > 
 ]
 > 
 < [ token 64935 { 398 } false (wholesurface="and ",xmlindex="426",surface_stripped_lowcase="and",self="64935") //  <  > 
 ]
 > 
 < [ token 64936 { 399 } false (wholesurface="God ",xmlindex="427",surface_stripped_lowcase="god",self="64936") //  <  > 
 ]
 > 
 < [ token 64937 { 400 } false (wholesurface="saw ",xmlindex="428",surface_stripped_lowcase="saw",self="64937") //  <  > 
 ]
 > 
 < [ token 64938 { 401 } false (wholesurface="that ",xmlindex="429",surface_stripped_lowcase="that",self="64938") //  <  > 
 ]
 > 
 < [ token 64939 { 402 } false (wholesurface="it ",xmlindex="430",surface_stripped_lowcase="it",self="64939") //  <  > 
 ]
 > 
 < [ token 64940 { 403 } false (wholesurface="was ",xmlindex="431",surface_stripped_lowcase="was",self="64940") //  <  > 
 ]
 > 
 < [ token 64941 { 404 } false (wholesurface="good. ",xmlindex="432",surface_stripped_lowcase="good",self="64941") //  <  > 
 ]
 > 
 < [ token 64942 { 405 } false (wholesurface="And ",xmlindex="434",surface_stripped_lowcase="and",self="64942") //  <  > 
 ]
 > 
 < [ token 64943 { 406 } false (wholesurface="there ",xmlindex="435",surface_stripped_lowcase="there",self="64943") //  <  > 
 ]
 > 
 < [ token 64944 { 407 } false (wholesurface="was ",xmlindex="436",surface_stripped_lowcase="was",self="64944") //  <  > 
 ]
 > 
 < [ token 64945 { 408 } false (wholesurface="evening ",xmlindex="437",surface_stripped_lowcase="evening",self="64945") //  <  > 
 ]
 > 
 < [ token 64946 { 409 } false (wholesurface="and ",xmlindex="438",surface_stripped_lowcase="and",self="64946") //  <  > 
 ]
 > 
 < [ token 64947 { 410 } false (wholesurface="there ",xmlindex="439",surface_stripped_lowcase="there",self="64947") //  <  > 
 ]
 > 
 < [ token 64948 { 411 } false (wholesurface="was ",xmlindex="440",surface_stripped_lowcase="was",self="64948") //  <  > 
 ]
 > 
 < [ token 64949 { 412 } false (wholesurface="morning, ",xmlindex="441",surface_stripped_lowcase="morning",self="64949") //  <  > 
 ]
 > 
 < [ token 64950 { 413 } false (wholesurface="a ",xmlindex="442",surface_stripped_lowcase="a",self="64950") //  <  > 
 ]
 > 
 < [ token 64951 { 414 } false (wholesurface="fourth ",xmlindex="443",surface_stripped_lowcase="fourth",self="64951") //  <  > 
 ]
 > 
 < [ token 64952 { 415 } false (wholesurface="day. ",xmlindex="444",surface_stripped_lowcase="day",self="64952") //  <  > 
 ]
 > 
 < [ token 64953 { 416 } false (wholesurface="And ",xmlindex="447",surface_stripped_lowcase="and",self="64953") //  <  > 
 ]
 > 
 < [ token 64954 { 417 } false (wholesurface="God ",xmlindex="448",surface_stripped_lowcase="god",self="64954") //  <  > 
 ]
 > 
 < [ token 64955 { 418 } false (wholesurface="said, ",xmlindex="449",surface_stripped_lowcase="said",self="64955") //  <  > 
 ]
 > 
 < [ token 64956 { 419 } false (wholesurface="Let ",xmlindex="450",surface_stripped_lowcase="let",self="64956") //  <  > 
 ]
 > 
 < [ token 64957 { 420 } false (wholesurface="the ",xmlindex="451",surface_stripped_lowcase="the",self="64957") //  <  > 
 ]
 > 
 < [ token 64958 { 421 } false (wholesurface="waters ",xmlindex="452",surface_stripped_lowcase="waters",self="64958") //  <  > 
 ]
 > 
 < [ token 64959 { 422 } false (wholesurface="swarm ",xmlindex="453",surface_stripped_lowcase="swarm",self="64959") //  <  > 
 ]
 > 
 < [ token 64960 { 423 } false (wholesurface="with ",xmlindex="454",surface_stripped_lowcase="with",self="64960") //  <  > 
 ]
 > 
 < [ token 64961 { 424 } false (wholesurface="swarms ",xmlindex="455",surface_stripped_lowcase="swarms",self="64961") //  <  > 
 ]
 > 
 < [ token 64962 { 425 } false (wholesurface="of ",xmlindex="456",surface_stripped_lowcase="of",self="64962") //  <  > 
 ]
 > 
 < [ token 64963 { 426 } false (wholesurface="living ",xmlindex="457",surface_stripped_lowcase="living",self="64963") //  <  > 
 ]
 > 
 < [ token 64964 { 427 } false (wholesurface="creatures, ",xmlindex="458",surface_stripped_lowcase="creatures",self="64964") //  <  > 
 ]
 > 
 < [ token 64965 { 428 } false (wholesurface="and ",xmlindex="459",surface_stripped_lowcase="and",self="64965") //  <  > 
 ]
 > 
 < [ token 64966 { 429 } false (wholesurface="let ",xmlindex="460",surface_stripped_lowcase="let",self="64966") //  <  > 
 ]
 > 
 < [ token 64967 { 430 } false (wholesurface="birds ",xmlindex="461",surface_stripped_lowcase="birds",self="64967") //  <  > 
 ]
 > 
 < [ token 64968 { 431 } false (wholesurface="fly ",xmlindex="462",surface_stripped_lowcase="fly",self="64968") //  <  > 
 ]
 > 
 < [ token 64969 { 432 } false (wholesurface="above ",xmlindex="463",surface_stripped_lowcase="above",self="64969") //  <  > 
 ]
 > 
 < [ token 64970 { 433 } false (wholesurface="the ",xmlindex="464",surface_stripped_lowcase="the",self="64970") //  <  > 
 ]
 > 
 < [ token 64971 { 434 } false (wholesurface="earth ",xmlindex="465",surface_stripped_lowcase="earth",self="64971") //  <  > 
 ]
 > 
 < [ token 64972 { 435 } false (wholesurface="in ",xmlindex="466",surface_stripped_lowcase="in",self="64972") //  <  > 
 ]
 > 
 < [ token 64973 { 436 } false (wholesurface="the ",xmlindex="467",surface_stripped_lowcase="the",self="64973") //  <  > 
 ]
 > 
 < [ token 64974 { 437 } false (wholesurface="open ",xmlindex="468",surface_stripped_lowcase="open",self="64974") //  <  > 
 ]
 > 
 < [ token 64975 { 438 } false (wholesurface="firmament ",xmlindex="469",surface_stripped_lowcase="firmament",self="64975") //  <  > 
 ]
 > 
 < [ token 64976 { 439 } false (wholesurface="of ",xmlindex="470",surface_stripped_lowcase="of",self="64976") //  <  > 
 ]
 > 
 < [ token 64977 { 440 } false (wholesurface="heaven. ",xmlindex="471",surface_stripped_lowcase="heaven",self="64977") //  <  > 
 ]
 > 
 < [ token 64978 { 441 } false (wholesurface="And ",xmlindex="473",surface_stripped_lowcase="and",self="64978") //  <  > 
 ]
 > 
 < [ token 64979 { 442 } false (wholesurface="God ",xmlindex="474",surface_stripped_lowcase="god",self="64979") //  <  > 
 ]
 > 
 < [ token 64980 { 443 } false (wholesurface="created ",xmlindex="475",surface_stripped_lowcase="created",self="64980") //  <  > 
 ]
 > 
 < [ token 64981 { 444 } false (wholesurface="the ",xmlindex="476",surface_stripped_lowcase="the",self="64981") //  <  > 
 ]
 > 
 < [ token 64982 { 445 } false (wholesurface="great ",xmlindex="477",surface_stripped_lowcase="great",self="64982") //  <  > 
 ]
 > 
 < [ token 64983 { 446 } false (wholesurface="sea-monsters, ",xmlindex="478",surface_stripped_lowcase="sea",self="64983") //  <  > 
 ]
 > 
 < [ token 64984 { 447 } false (wholesurface="and ",xmlindex="479",surface_stripped_lowcase="and",self="64984") //  <  > 
 ]
 > 
 < [ token 64985 { 448 } false (wholesurface="every ",xmlindex="480",surface_stripped_lowcase="every",self="64985") //  <  > 
 ]
 > 
 < [ token 64986 { 449 } false (wholesurface="living ",xmlindex="481",surface_stripped_lowcase="living",self="64986") //  <  > 
 ]
 > 
 < [ token 64987 { 450 } false (wholesurface="creature ",xmlindex="482",surface_stripped_lowcase="creature",self="64987") //  <  > 
 ]
 > 
 < [ token 64988 { 451 } false (wholesurface="that ",xmlindex="483",surface_stripped_lowcase="that",self="64988") //  <  > 
 ]
 > 
 < [ token 64989 { 452 } false (wholesurface="moveth, ",xmlindex="484",surface_stripped_lowcase="moveth",self="64989") //  <  > 
 ]
 > 
 < [ token 64990 { 453 } false (wholesurface="wherewith ",xmlindex="485",surface_stripped_lowcase="wherewith",self="64990") //  <  > 
 ]
 > 
 < [ token 64991 { 454 } false (wholesurface="the ",xmlindex="486",surface_stripped_lowcase="the",self="64991") //  <  > 
 ]
 > 
 < [ token 64992 { 455 } false (wholesurface="waters ",xmlindex="487",surface_stripped_lowcase="waters",self="64992") //  <  > 
 ]
 > 
 < [ token 64993 { 456 } false (wholesurface="swarmed, ",xmlindex="488",surface_stripped_lowcase="swarmed",self="64993") //  <  > 
 ]
 > 
 < [ token 64994 { 457 } false (wholesurface="after ",xmlindex="489",surface_stripped_lowcase="after",self="64994") //  <  > 
 ]
 > 
 < [ token 64995 { 458 } false (wholesurface="their ",xmlindex="490",surface_stripped_lowcase="their",self="64995") //  <  > 
 ]
 > 
 < [ token 64996 { 459 } false (wholesurface="kind, ",xmlindex="491",surface_stripped_lowcase="kind",self="64996") //  <  > 
 ]
 > 
 < [ token 64997 { 460 } false (wholesurface="and ",xmlindex="492",surface_stripped_lowcase="and",self="64997") //  <  > 
 ]
 > 
 < [ token 64998 { 461 } false (wholesurface="every ",xmlindex="493",surface_stripped_lowcase="every",self="64998") //  <  > 
 ]
 > 
 < [ token 64999 { 462 } false (wholesurface="winged ",xmlindex="494",surface_stripped_lowcase="winged",self="64999") //  <  > 
 ]
 > 
 < [ token 65000 { 463 } false (wholesurface="bird ",xmlindex="495",surface_stripped_lowcase="bird",self="65000") //  <  > 
 ]
 > 
 < [ token 65001 { 464 } false (wholesurface="after ",xmlindex="496",surface_stripped_lowcase="after",self="65001") //  <  > 
 ]
 > 
 < [ token 65002 { 465 } false (wholesurface="its ",xmlindex="497",surface_stripped_lowcase="its",self="65002") //  <  > 
 ]
 > 
 < [ token 65003 { 466 } false (wholesurface="kind: ",xmlindex="498",surface_stripped_lowcase="kind",self="65003") //  <  > 
 ]
 > 
 < [ token 65004 { 467 } false (wholesurface="and ",xmlindex="499",surface_stripped_lowcase="and",self="65004") //  <  > 
 ]
 > 
 < [ token 65005 { 468 } false (wholesurface="God ",xmlindex="500",surface_stripped_lowcase="god",self="65005") //  <  > 
 ]
 > 
 < [ token 65006 { 469 } false (wholesurface="saw ",xmlindex="501",surface_stripped_lowcase="saw",self="65006") //  <  > 
 ]
 > 
 < [ token 65007 { 470 } false (wholesurface="that ",xmlindex="502",surface_stripped_lowcase="that",self="65007") //  <  > 
 ]
 > 
 < [ token 65008 { 471 } false (wholesurface="it ",xmlindex="503",surface_stripped_lowcase="it",self="65008") //  <  > 
 ]
 > 
 < [ token 65009 { 472 } false (wholesurface="was ",xmlindex="504",surface_stripped_lowcase="was",self="65009") //  <  > 
 ]
 > 
 < [ token 65010 { 473 } false (wholesurface="good. ",xmlindex="505",surface_stripped_lowcase="good",self="65010") //  <  > 
 ]
 > 
 < [ token 65011 { 474 } false (wholesurface="And ",xmlindex="507",surface_stripped_lowcase="and",self="65011") //  <  > 
 ]
 > 
 < [ token 65012 { 475 } false (wholesurface="God ",xmlindex="508",surface_stripped_lowcase="god",self="65012") //  <  > 
 ]
 > 
 < [ token 65013 { 476 } false (wholesurface="blessed ",xmlindex="509",surface_stripped_lowcase="blessed",self="65013") //  <  > 
 ]
 > 
 < [ token 65014 { 477 } false (wholesurface="them, ",xmlindex="510",surface_stripped_lowcase="them",self="65014") //  <  > 
 ]
 > 
 < [ token 65015 { 478 } false (wholesurface="saying, ",xmlindex="511",surface_stripped_lowcase="saying",self="65015") //  <  > 
 ]
 > 
 < [ token 65016 { 479 } false (wholesurface="Be ",xmlindex="512",surface_stripped_lowcase="be",self="65016") //  <  > 
 ]
 > 
 < [ token 65017 { 480 } false (wholesurface="fruitful, ",xmlindex="513",surface_stripped_lowcase="fruitful",self="65017") //  <  > 
 ]
 > 
 < [ token 65018 { 481 } false (wholesurface="and ",xmlindex="514",surface_stripped_lowcase="and",self="65018") //  <  > 
 ]
 > 
 < [ token 65019 { 482 } false (wholesurface="multiply, ",xmlindex="515",surface_stripped_lowcase="multiply",self="65019") //  <  > 
 ]
 > 
 < [ token 65020 { 483 } false (wholesurface="and ",xmlindex="516",surface_stripped_lowcase="and",self="65020") //  <  > 
 ]
 > 
 < [ token 65021 { 484 } false (wholesurface="fill ",xmlindex="517",surface_stripped_lowcase="fill",self="65021") //  <  > 
 ]
 > 
 < [ token 65022 { 485 } false (wholesurface="the ",xmlindex="518",surface_stripped_lowcase="the",self="65022") //  <  > 
 ]
 > 
 < [ token 65023 { 486 } false (wholesurface="waters ",xmlindex="519",surface_stripped_lowcase="waters",self="65023") //  <  > 
 ]
 > 
 < [ token 65024 { 487 } false (wholesurface="in ",xmlindex="520",surface_stripped_lowcase="in",self="65024") //  <  > 
 ]
 > 
 < [ token 65025 { 488 } false (wholesurface="the ",xmlindex="521",surface_stripped_lowcase="the",self="65025") //  <  > 
 ]
 > 
 < [ token 65026 { 489 } false (wholesurface="seas, ",xmlindex="522",surface_stripped_lowcase="seas",self="65026") //  <  > 
 ]
 > 
 < [ token 65027 { 490 } false (wholesurface="and ",xmlindex="523",surface_stripped_lowcase="and",self="65027") //  <  > 
 ]
 > 
 < [ token 65028 { 491 } false (wholesurface="let ",xmlindex="524",surface_stripped_lowcase="let",self="65028") //  <  > 
 ]
 > 
 < [ token 65029 { 492 } false (wholesurface="birds ",xmlindex="525",surface_stripped_lowcase="birds",self="65029") //  <  > 
 ]
 > 
 < [ token 65030 { 493 } false (wholesurface="multiply ",xmlindex="526",surface_stripped_lowcase="multiply",self="65030") //  <  > 
 ]
 > 
 < [ token 65031 { 494 } false (wholesurface="on ",xmlindex="527",surface_stripped_lowcase="on",self="65031") //  <  > 
 ]
 > 
 < [ token 65032 { 495 } false (wholesurface="the ",xmlindex="528",surface_stripped_lowcase="the",self="65032") //  <  > 
 ]
 > 
 < [ token 65033 { 496 } false (wholesurface="earth. ",xmlindex="529",surface_stripped_lowcase="earth",self="65033") //  <  > 
 ]
 > 
 < [ token 65034 { 497 } false (wholesurface="And ",xmlindex="531",surface_stripped_lowcase="and",self="65034") //  <  > 
 ]
 > 
 < [ token 65035 { 498 } false (wholesurface="there ",xmlindex="532",surface_stripped_lowcase="there",self="65035") //  <  > 
 ]
 > 
 < [ token 65036 { 499 } false (wholesurface="was ",xmlindex="533",surface_stripped_lowcase="was",self="65036") //  <  > 
 ]
 > 
 < [ token 65037 { 500 } false (wholesurface="evening ",xmlindex="534",surface_stripped_lowcase="evening",self="65037") //  <  > 
 ]
 > 
 < [ token 65038 { 501 } false (wholesurface="and ",xmlindex="535",surface_stripped_lowcase="and",self="65038") //  <  > 
 ]
 > 
 < [ token 65039 { 502 } false (wholesurface="there ",xmlindex="536",surface_stripped_lowcase="there",self="65039") //  <  > 
 ]
 > 
 < [ token 65040 { 503 } false (wholesurface="was ",xmlindex="537",surface_stripped_lowcase="was",self="65040") //  <  > 
 ]
 > 
 < [ token 65041 { 504 } false (wholesurface="morning, ",xmlindex="538",surface_stripped_lowcase="morning",self="65041") //  <  > 
 ]
 > 
 < [ token 65042 { 505 } false (wholesurface="a ",xmlindex="539",surface_stripped_lowcase="a",self="65042") //  <  > 
 ]
 > 
 < [ token 65043 { 506 } false (wholesurface="fifth ",xmlindex="540",surface_stripped_lowcase="fifth",self="65043") //  <  > 
 ]
 > 
 < [ token 65044 { 507 } false (wholesurface="day. ",xmlindex="541",surface_stripped_lowcase="day",self="65044") //  <  > 
 ]
 > 
 < [ token 65045 { 508 } false (wholesurface="And ",xmlindex="544",surface_stripped_lowcase="and",self="65045") //  <  > 
 ]
 > 
 < [ token 65046 { 509 } false (wholesurface="God ",xmlindex="545",surface_stripped_lowcase="god",self="65046") //  <  > 
 ]
 > 
 < [ token 65047 { 510 } false (wholesurface="said, ",xmlindex="546",surface_stripped_lowcase="said",self="65047") //  <  > 
 ]
 > 
 < [ token 65048 { 511 } false (wholesurface="Let ",xmlindex="547",surface_stripped_lowcase="let",self="65048") //  <  > 
 ]
 > 
 < [ token 65049 { 512 } false (wholesurface="the ",xmlindex="548",surface_stripped_lowcase="the",self="65049") //  <  > 
 ]
 > 
 < [ token 65050 { 513 } false (wholesurface="earth ",xmlindex="549",surface_stripped_lowcase="earth",self="65050") //  <  > 
 ]
 > 
 < [ token 65051 { 514 } false (wholesurface="bring ",xmlindex="550",surface_stripped_lowcase="bring",self="65051") //  <  > 
 ]
 > 
 < [ token 65052 { 515 } false (wholesurface="forth ",xmlindex="551",surface_stripped_lowcase="forth",self="65052") //  <  > 
 ]
 > 
 < [ token 65053 { 516 } false (wholesurface="living ",xmlindex="552",surface_stripped_lowcase="living",self="65053") //  <  > 
 ]
 > 
 < [ token 65054 { 517 } false (wholesurface="creatures ",xmlindex="553",surface_stripped_lowcase="creatures",self="65054") //  <  > 
 ]
 > 
 < [ token 65055 { 518 } false (wholesurface="after ",xmlindex="554",surface_stripped_lowcase="after",self="65055") //  <  > 
 ]
 > 
 < [ token 65056 { 519 } false (wholesurface="their ",xmlindex="555",surface_stripped_lowcase="their",self="65056") //  <  > 
 ]
 > 
 < [ token 65057 { 520 } false (wholesurface="kind, ",xmlindex="556",surface_stripped_lowcase="kind",self="65057") //  <  > 
 ]
 > 
 < [ token 65058 { 521 } false (wholesurface="cattle, ",xmlindex="557",surface_stripped_lowcase="cattle",self="65058") //  <  > 
 ]
 > 
 < [ token 65059 { 522 } false (wholesurface="and ",xmlindex="558",surface_stripped_lowcase="and",self="65059") //  <  > 
 ]
 > 
 < [ token 65060 { 523 } false (wholesurface="creeping ",xmlindex="559",surface_stripped_lowcase="creeping",self="65060") //  <  > 
 ]
 > 
 < [ token 65061 { 524 } false (wholesurface="things, ",xmlindex="560",surface_stripped_lowcase="things",self="65061") //  <  > 
 ]
 > 
 < [ token 65062 { 525 } false (wholesurface="and ",xmlindex="561",surface_stripped_lowcase="and",self="65062") //  <  > 
 ]
 > 
 < [ token 65063 { 526 } false (wholesurface="beasts ",xmlindex="562",surface_stripped_lowcase="beasts",self="65063") //  <  > 
 ]
 > 
 < [ token 65064 { 527 } false (wholesurface="of ",xmlindex="563",surface_stripped_lowcase="of",self="65064") //  <  > 
 ]
 > 
 < [ token 65065 { 528 } false (wholesurface="the ",xmlindex="564",surface_stripped_lowcase="the",self="65065") //  <  > 
 ]
 > 
 < [ token 65066 { 529 } false (wholesurface="earth ",xmlindex="565",surface_stripped_lowcase="earth",self="65066") //  <  > 
 ]
 > 
 < [ token 65067 { 530 } false (wholesurface="after ",xmlindex="566",surface_stripped_lowcase="after",self="65067") //  <  > 
 ]
 > 
 < [ token 65068 { 531 } false (wholesurface="their ",xmlindex="567",surface_stripped_lowcase="their",self="65068") //  <  > 
 ]
 > 
 < [ token 65069 { 532 } false (wholesurface="kind: ",xmlindex="568",surface_stripped_lowcase="kind",self="65069") //  <  > 
 ]
 > 
 < [ token 65070 { 533 } false (wholesurface="and ",xmlindex="569",surface_stripped_lowcase="and",self="65070") //  <  > 
 ]
 > 
 < [ token 65071 { 534 } false (wholesurface="it ",xmlindex="570",surface_stripped_lowcase="it",self="65071") //  <  > 
 ]
 > 
 < [ token 65072 { 535 } false (wholesurface="was ",xmlindex="571",surface_stripped_lowcase="was",self="65072") //  <  > 
 ]
 > 
 < [ token 65073 { 536 } false (wholesurface="so. ",xmlindex="572",surface_stripped_lowcase="so",self="65073") //  <  > 
 ]
 > 
 < [ token 65074 { 537 } false (wholesurface="And ",xmlindex="574",surface_stripped_lowcase="and",self="65074") //  <  > 
 ]
 > 
 < [ token 65075 { 538 } false (wholesurface="God ",xmlindex="575",surface_stripped_lowcase="god",self="65075") //  <  > 
 ]
 > 
 < [ token 65076 { 539 } false (wholesurface="made ",xmlindex="576",surface_stripped_lowcase="made",self="65076") //  <  > 
 ]
 > 
 < [ token 65077 { 540 } false (wholesurface="the ",xmlindex="577",surface_stripped_lowcase="the",self="65077") //  <  > 
 ]
 > 
 < [ token 65078 { 541 } false (wholesurface="beasts ",xmlindex="578",surface_stripped_lowcase="beasts",self="65078") //  <  > 
 ]
 > 
 < [ token 65079 { 542 } false (wholesurface="of ",xmlindex="579",surface_stripped_lowcase="of",self="65079") //  <  > 
 ]
 > 
 < [ token 65080 { 543 } false (wholesurface="the ",xmlindex="580",surface_stripped_lowcase="the",self="65080") //  <  > 
 ]
 > 
 < [ token 65081 { 544 } false (wholesurface="earth ",xmlindex="581",surface_stripped_lowcase="earth",self="65081") //  <  > 
 ]
 > 
 < [ token 65082 { 545 } false (wholesurface="after ",xmlindex="582",surface_stripped_lowcase="after",self="65082") //  <  > 
 ]
 > 
 < [ token 65083 { 546 } false (wholesurface="their ",xmlindex="583",surface_stripped_lowcase="their",self="65083") //  <  > 
 ]
 > 
 < [ token 65084 { 547 } false (wholesurface="kind, ",xmlindex="584",surface_stripped_lowcase="kind",self="65084") //  <  > 
 ]
 > 
 < [ token 65085 { 548 } false (wholesurface="and ",xmlindex="585",surface_stripped_lowcase="and",self="65085") //  <  > 
 ]
 > 
 < [ token 65086 { 549 } false (wholesurface="the ",xmlindex="586",surface_stripped_lowcase="the",self="65086") //  <  > 
 ]
 > 
 < [ token 65087 { 550 } false (wholesurface="cattle ",xmlindex="587",surface_stripped_lowcase="cattle",self="65087") //  <  > 
 ]
 > 
 < [ token 65088 { 551 } false (wholesurface="after ",xmlindex="588",surface_stripped_lowcase="after",self="65088") //  <  > 
 ]
 > 
 < [ token 65089 { 552 } false (wholesurface="their ",xmlindex="589",surface_stripped_lowcase="their",self="65089") //  <  > 
 ]
 > 
 < [ token 65090 { 553 } false (wholesurface="kind, ",xmlindex="590",surface_stripped_lowcase="kind",self="65090") //  <  > 
 ]
 > 
 < [ token 65091 { 554 } false (wholesurface="and ",xmlindex="591",surface_stripped_lowcase="and",self="65091") //  <  > 
 ]
 > 
 < [ token 65092 { 555 } false (wholesurface="everything ",xmlindex="592",surface_stripped_lowcase="everything",self="65092") //  <  > 
 ]
 > 
 < [ token 65093 { 556 } false (wholesurface="that ",xmlindex="593",surface_stripped_lowcase="that",self="65093") //  <  > 
 ]
 > 
 < [ token 65094 { 557 } false (wholesurface="creepeth ",xmlindex="594",surface_stripped_lowcase="creepeth",self="65094") //  <  > 
 ]
 > 
 < [ token 65095 { 558 } false (wholesurface="upon ",xmlindex="595",surface_stripped_lowcase="upon",self="65095") //  <  > 
 ]
 > 
 < [ token 65096 { 559 } false (wholesurface="the ",xmlindex="596",surface_stripped_lowcase="the",self="65096") //  <  > 
 ]
 > 
 < [ token 65097 { 560 } false (wholesurface="ground ",xmlindex="597",surface_stripped_lowcase="ground",self="65097") //  <  > 
 ]
 > 
 < [ token 65098 { 561 } false (wholesurface="after ",xmlindex="598",surface_stripped_lowcase="after",self="65098") //  <  > 
 ]
 > 
 < [ token 65099 { 562 } false (wholesurface="its ",xmlindex="599",surface_stripped_lowcase="its",self="65099") //  <  > 
 ]
 > 
 < [ token 65100 { 563 } false (wholesurface="kind: ",xmlindex="600",surface_stripped_lowcase="kind",self="65100") //  <  > 
 ]
 > 
 < [ token 65101 { 564 } false (wholesurface="and ",xmlindex="601",surface_stripped_lowcase="and",self="65101") //  <  > 
 ]
 > 
 < [ token 65102 { 565 } false (wholesurface="God ",xmlindex="602",surface_stripped_lowcase="god",self="65102") //  <  > 
 ]
 > 
 < [ token 65103 { 566 } false (wholesurface="saw ",xmlindex="603",surface_stripped_lowcase="saw",self="65103") //  <  > 
 ]
 > 
 < [ token 65104 { 567 } false (wholesurface="that ",xmlindex="604",surface_stripped_lowcase="that",self="65104") //  <  > 
 ]
 > 
 < [ token 65105 { 568 } false (wholesurface="it ",xmlindex="605",surface_stripped_lowcase="it",self="65105") //  <  > 
 ]
 > 
 < [ token 65106 { 569 } false (wholesurface="was ",xmlindex="606",surface_stripped_lowcase="was",self="65106") //  <  > 
 ]
 > 
 < [ token 65107 { 570 } false (wholesurface="good. ",xmlindex="607",surface_stripped_lowcase="good",self="65107") //  <  > 
 ]
 > 
 < [ token 65108 { 571 } false (wholesurface="And ",xmlindex="609",surface_stripped_lowcase="and",self="65108") //  <  > 
 ]
 > 
 < [ token 65109 { 572 } false (wholesurface="God ",xmlindex="610",surface_stripped_lowcase="god",self="65109") //  <  > 
 ]
 > 
 < [ token 65110 { 573 } false (wholesurface="said, ",xmlindex="611",surface_stripped_lowcase="said",self="65110") //  <  > 
 ]
 > 
 < [ token 65111 { 574 } false (wholesurface="Let ",xmlindex="612",surface_stripped_lowcase="let",self="65111") //  <  > 
 ]
 > 
 < [ token 65112 { 575 } false (wholesurface="us ",xmlindex="613",surface_stripped_lowcase="us",self="65112") //  <  > 
 ]
 > 
 < [ token 65113 { 576 } false (wholesurface="make ",xmlindex="614",surface_stripped_lowcase="make",self="65113") //  <  > 
 ]
 > 
 < [ token 65114 { 577 } false (wholesurface="man ",xmlindex="615",surface_stripped_lowcase="man",self="65114") //  <  > 
 ]
 > 
 < [ token 65115 { 578 } false (wholesurface="in ",xmlindex="616",surface_stripped_lowcase="in",self="65115") //  <  > 
 ]
 > 
 < [ token 65116 { 579 } false (wholesurface="our ",xmlindex="617",surface_stripped_lowcase="our",self="65116") //  <  > 
 ]
 > 
 < [ token 65117 { 580 } false (wholesurface="image, ",xmlindex="618",surface_stripped_lowcase="image",self="65117") //  <  > 
 ]
 > 
 < [ token 65118 { 581 } false (wholesurface="after ",xmlindex="619",surface_stripped_lowcase="after",self="65118") //  <  > 
 ]
 > 
 < [ token 65119 { 582 } false (wholesurface="our ",xmlindex="620",surface_stripped_lowcase="our",self="65119") //  <  > 
 ]
 > 
 < [ token 65120 { 583 } false (wholesurface="likeness: ",xmlindex="621",surface_stripped_lowcase="likeness",self="65120") //  <  > 
 ]
 > 
 < [ token 65121 { 584 } false (wholesurface="and ",xmlindex="622",surface_stripped_lowcase="and",self="65121") //  <  > 
 ]
 > 
 < [ token 65122 { 585 } false (wholesurface="let ",xmlindex="623",surface_stripped_lowcase="let",self="65122") //  <  > 
 ]
 > 
 < [ token 65123 { 586 } false (wholesurface="them ",xmlindex="624",surface_stripped_lowcase="them",self="65123") //  <  > 
 ]
 > 
 < [ token 65124 { 587 } false (wholesurface="have ",xmlindex="625",surface_stripped_lowcase="have",self="65124") //  <  > 
 ]
 > 
 < [ token 65125 { 588 } false (wholesurface="dominion ",xmlindex="626",surface_stripped_lowcase="dominion",self="65125") //  <  > 
 ]
 > 
 < [ token 65126 { 589 } false (wholesurface="over ",xmlindex="627",surface_stripped_lowcase="over",self="65126") //  <  > 
 ]
 > 
 < [ token 65127 { 590 } false (wholesurface="the ",xmlindex="628",surface_stripped_lowcase="the",self="65127") //  <  > 
 ]
 > 
 < [ token 65128 { 591 } false (wholesurface="fish ",xmlindex="629",surface_stripped_lowcase="fish",self="65128") //  <  > 
 ]
 > 
 < [ token 65129 { 592 } false (wholesurface="of ",xmlindex="630",surface_stripped_lowcase="of",self="65129") //  <  > 
 ]
 > 
 < [ token 65130 { 593 } false (wholesurface="the ",xmlindex="631",surface_stripped_lowcase="the",self="65130") //  <  > 
 ]
 > 
 < [ token 65131 { 594 } false (wholesurface="sea, ",xmlindex="632",surface_stripped_lowcase="sea",self="65131") //  <  > 
 ]
 > 
 < [ token 65132 { 595 } false (wholesurface="and ",xmlindex="633",surface_stripped_lowcase="and",self="65132") //  <  > 
 ]
 > 
 < [ token 65133 { 596 } false (wholesurface="over ",xmlindex="634",surface_stripped_lowcase="over",self="65133") //  <  > 
 ]
 > 
 < [ token 65134 { 597 } false (wholesurface="the ",xmlindex="635",surface_stripped_lowcase="the",self="65134") //  <  > 
 ]
 > 
 < [ token 65135 { 598 } false (wholesurface="birds ",xmlindex="636",surface_stripped_lowcase="birds",self="65135") //  <  > 
 ]
 > 
 < [ token 65136 { 599 } false (wholesurface="of ",xmlindex="637",surface_stripped_lowcase="of",self="65136") //  <  > 
 ]
 > 
 < [ token 65137 { 600 } false (wholesurface="the ",xmlindex="638",surface_stripped_lowcase="the",self="65137") //  <  > 
 ]
 > 
 < [ token 65138 { 601 } false (wholesurface="heavens, ",xmlindex="639",surface_stripped_lowcase="heavens",self="65138") //  <  > 
 ]
 > 
 < [ token 65139 { 602 } false (wholesurface="and ",xmlindex="640",surface_stripped_lowcase="and",self="65139") //  <  > 
 ]
 > 
 < [ token 65140 { 603 } false (wholesurface="over ",xmlindex="641",surface_stripped_lowcase="over",self="65140") //  <  > 
 ]
 > 
 < [ token 65141 { 604 } false (wholesurface="the ",xmlindex="642",surface_stripped_lowcase="the",self="65141") //  <  > 
 ]
 > 
 < [ token 65142 { 605 } false (wholesurface="cattle, ",xmlindex="643",surface_stripped_lowcase="cattle",self="65142") //  <  > 
 ]
 > 
 < [ token 65143 { 606 } false (wholesurface="and ",xmlindex="644",surface_stripped_lowcase="and",self="65143") //  <  > 
 ]
 > 
 < [ token 65144 { 607 } false (wholesurface="over ",xmlindex="645",surface_stripped_lowcase="over",self="65144") //  <  > 
 ]
 > 
 < [ token 65145 { 608 } false (wholesurface="all ",xmlindex="646",surface_stripped_lowcase="all",self="65145") //  <  > 
 ]
 > 
 < [ token 65146 { 609 } false (wholesurface="the ",xmlindex="647",surface_stripped_lowcase="the",self="65146") //  <  > 
 ]
 > 
 < [ token 65147 { 610 } false (wholesurface="earth, ",xmlindex="648",surface_stripped_lowcase="earth",self="65147") //  <  > 
 ]
 > 
 < [ token 65148 { 611 } false (wholesurface="and ",xmlindex="649",surface_stripped_lowcase="and",self="65148") //  <  > 
 ]
 > 
 < [ token 65149 { 612 } false (wholesurface="over ",xmlindex="650",surface_stripped_lowcase="over",self="65149") //  <  > 
 ]
 > 
 < [ token 65150 { 613 } false (wholesurface="every ",xmlindex="651",surface_stripped_lowcase="every",self="65150") //  <  > 
 ]
 > 
 < [ token 65151 { 614 } false (wholesurface="creeping ",xmlindex="652",surface_stripped_lowcase="creeping",self="65151") //  <  > 
 ]
 > 
 < [ token 65152 { 615 } false (wholesurface="thing ",xmlindex="653",surface_stripped_lowcase="thing",self="65152") //  <  > 
 ]
 > 
 < [ token 65153 { 616 } false (wholesurface="that ",xmlindex="654",surface_stripped_lowcase="that",self="65153") //  <  > 
 ]
 > 
 < [ token 65154 { 617 } false (wholesurface="creepeth ",xmlindex="655",surface_stripped_lowcase="creepeth",self="65154") //  <  > 
 ]
 > 
 < [ token 65155 { 618 } false (wholesurface="upon ",xmlindex="656",surface_stripped_lowcase="upon",self="65155") //  <  > 
 ]
 > 
 < [ token 65156 { 619 } false (wholesurface="the ",xmlindex="657",surface_stripped_lowcase="the",self="65156") //  <  > 
 ]
 > 
 < [ token 65157 { 620 } false (wholesurface="earth. ",xmlindex="658",surface_stripped_lowcase="earth",self="65157") //  <  > 
 ]
 > 
 < [ token 65158 { 621 } false (wholesurface="And ",xmlindex="660",surface_stripped_lowcase="and",self="65158") //  <  > 
 ]
 > 
 < [ token 65159 { 622 } false (wholesurface="God ",xmlindex="661",surface_stripped_lowcase="god",self="65159") //  <  > 
 ]
 > 
 < [ token 65160 { 623 } false (wholesurface="created ",xmlindex="662",surface_stripped_lowcase="created",self="65160") //  <  > 
 ]
 > 
 < [ token 65161 { 624 } false (wholesurface="man ",xmlindex="663",surface_stripped_lowcase="man",self="65161") //  <  > 
 ]
 > 
 < [ token 65162 { 625 } false (wholesurface="in ",xmlindex="664",surface_stripped_lowcase="in",self="65162") //  <  > 
 ]
 > 
 < [ token 65163 { 626 } false (wholesurface="his ",xmlindex="665",surface_stripped_lowcase="his",self="65163") //  <  > 
 ]
 > 
 < [ token 65164 { 627 } false (wholesurface="own ",xmlindex="666",surface_stripped_lowcase="own",self="65164") //  <  > 
 ]
 > 
 < [ token 65165 { 628 } false (wholesurface="image, ",xmlindex="667",surface_stripped_lowcase="image",self="65165") //  <  > 
 ]
 > 
 < [ token 65166 { 629 } false (wholesurface="in ",xmlindex="668",surface_stripped_lowcase="in",self="65166") //  <  > 
 ]
 > 
 < [ token 65167 { 630 } false (wholesurface="the ",xmlindex="669",surface_stripped_lowcase="the",self="65167") //  <  > 
 ]
 > 
 < [ token 65168 { 631 } false (wholesurface="image ",xmlindex="670",surface_stripped_lowcase="image",self="65168") //  <  > 
 ]
 > 
 < [ token 65169 { 632 } false (wholesurface="of ",xmlindex="671",surface_stripped_lowcase="of",self="65169") //  <  > 
 ]
 > 
 < [ token 65170 { 633 } false (wholesurface="God ",xmlindex="672",surface_stripped_lowcase="god",self="65170") //  <  > 
 ]
 > 
 < [ token 65171 { 634 } false (wholesurface="created ",xmlindex="673",surface_stripped_lowcase="created",self="65171") //  <  > 
 ]
 > 
 < [ token 65172 { 635 } false (wholesurface="he ",xmlindex="674",surface_stripped_lowcase="he",self="65172") //  <  > 
 ]
 > 
 < [ token 65173 { 636 } false (wholesurface="him; ",xmlindex="675",surface_stripped_lowcase="him",self="65173") //  <  > 
 ]
 > 
 < [ token 65174 { 637 } false (wholesurface="male ",xmlindex="676",surface_stripped_lowcase="male",self="65174") //  <  > 
 ]
 > 
 < [ token 65175 { 638 } false (wholesurface="and ",xmlindex="677",surface_stripped_lowcase="and",self="65175") //  <  > 
 ]
 > 
 < [ token 65176 { 639 } false (wholesurface="female ",xmlindex="678",surface_stripped_lowcase="female",self="65176") //  <  > 
 ]
 > 
 < [ token 65177 { 640 } false (wholesurface="created ",xmlindex="679",surface_stripped_lowcase="created",self="65177") //  <  > 
 ]
 > 
 < [ token 65178 { 641 } false (wholesurface="he ",xmlindex="680",surface_stripped_lowcase="he",self="65178") //  <  > 
 ]
 > 
 < [ token 65179 { 642 } false (wholesurface="them. ",xmlindex="681",surface_stripped_lowcase="them",self="65179") //  <  > 
 ]
 > 
 < [ token 65180 { 643 } false (wholesurface="And ",xmlindex="683",surface_stripped_lowcase="and",self="65180") //  <  > 
 ]
 > 
 < [ token 65181 { 644 } false (wholesurface="God ",xmlindex="684",surface_stripped_lowcase="god",self="65181") //  <  > 
 ]
 > 
 < [ token 65182 { 645 } false (wholesurface="blessed ",xmlindex="685",surface_stripped_lowcase="blessed",self="65182") //  <  > 
 ]
 > 
 < [ token 65183 { 646 } false (wholesurface="them: ",xmlindex="686",surface_stripped_lowcase="them",self="65183") //  <  > 
 ]
 > 
 < [ token 65184 { 647 } false (wholesurface="and ",xmlindex="687",surface_stripped_lowcase="and",self="65184") //  <  > 
 ]
 > 
 < [ token 65185 { 648 } false (wholesurface="God ",xmlindex="688",surface_stripped_lowcase="god",self="65185") //  <  > 
 ]
 > 
 < [ token 65186 { 649 } false (wholesurface="said ",xmlindex="689",surface_stripped_lowcase="said",self="65186") //  <  > 
 ]
 > 
 < [ token 65187 { 650 } false (wholesurface="unto ",xmlindex="690",surface_stripped_lowcase="unto",self="65187") //  <  > 
 ]
 > 
 < [ token 65188 { 651 } false (wholesurface="them, ",xmlindex="691",surface_stripped_lowcase="them",self="65188") //  <  > 
 ]
 > 
 < [ token 65189 { 652 } false (wholesurface="Be ",xmlindex="692",surface_stripped_lowcase="be",self="65189") //  <  > 
 ]
 > 
 < [ token 65190 { 653 } false (wholesurface="fruitful, ",xmlindex="693",surface_stripped_lowcase="fruitful",self="65190") //  <  > 
 ]
 > 
 < [ token 65191 { 654 } false (wholesurface="and ",xmlindex="694",surface_stripped_lowcase="and",self="65191") //  <  > 
 ]
 > 
 < [ token 65192 { 655 } false (wholesurface="multiply, ",xmlindex="695",surface_stripped_lowcase="multiply",self="65192") //  <  > 
 ]
 > 
 < [ token 65193 { 656 } false (wholesurface="and ",xmlindex="696",surface_stripped_lowcase="and",self="65193") //  <  > 
 ]
 > 
 < [ token 65194 { 657 } false (wholesurface="replenish ",xmlindex="697",surface_stripped_lowcase="replenish",self="65194") //  <  > 
 ]
 > 
 < [ token 65195 { 658 } false (wholesurface="the ",xmlindex="698",surface_stripped_lowcase="the",self="65195") //  <  > 
 ]
 > 
 < [ token 65196 { 659 } false (wholesurface="earth, ",xmlindex="699",surface_stripped_lowcase="earth",self="65196") //  <  > 
 ]
 > 
 < [ token 65197 { 660 } false (wholesurface="and ",xmlindex="700",surface_stripped_lowcase="and",self="65197") //  <  > 
 ]
 > 
 < [ token 65198 { 661 } false (wholesurface="subdue ",xmlindex="701",surface_stripped_lowcase="subdue",self="65198") //  <  > 
 ]
 > 
 < [ token 65199 { 662 } false (wholesurface="it; ",xmlindex="702",surface_stripped_lowcase="it",self="65199") //  <  > 
 ]
 > 
 < [ token 65200 { 663 } false (wholesurface="and ",xmlindex="703",surface_stripped_lowcase="and",self="65200") //  <  > 
 ]
 > 
 < [ token 65201 { 664 } false (wholesurface="have ",xmlindex="704",surface_stripped_lowcase="have",self="65201") //  <  > 
 ]
 > 
 < [ token 65202 { 665 } false (wholesurface="dominion ",xmlindex="705",surface_stripped_lowcase="dominion",self="65202") //  <  > 
 ]
 > 
 < [ token 65203 { 666 } false (wholesurface="over ",xmlindex="706",surface_stripped_lowcase="over",self="65203") //  <  > 
 ]
 > 
 < [ token 65204 { 667 } false (wholesurface="the ",xmlindex="707",surface_stripped_lowcase="the",self="65204") //  <  > 
 ]
 > 
 < [ token 65205 { 668 } false (wholesurface="fish ",xmlindex="708",surface_stripped_lowcase="fish",self="65205") //  <  > 
 ]
 > 
 < [ token 65206 { 669 } false (wholesurface="of ",xmlindex="709",surface_stripped_lowcase="of",self="65206") //  <  > 
 ]
 > 
 < [ token 65207 { 670 } false (wholesurface="the ",xmlindex="710",surface_stripped_lowcase="the",self="65207") //  <  > 
 ]
 > 
 < [ token 65208 { 671 } false (wholesurface="sea, ",xmlindex="711",surface_stripped_lowcase="sea",self="65208") //  <  > 
 ]
 > 
 < [ token 65209 { 672 } false (wholesurface="and ",xmlindex="712",surface_stripped_lowcase="and",self="65209") //  <  > 
 ]
 > 
 < [ token 65210 { 673 } false (wholesurface="over ",xmlindex="713",surface_stripped_lowcase="over",self="65210") //  <  > 
 ]
 > 
 < [ token 65211 { 674 } false (wholesurface="the ",xmlindex="714",surface_stripped_lowcase="the",self="65211") //  <  > 
 ]
 > 
 < [ token 65212 { 675 } false (wholesurface="birds ",xmlindex="715",surface_stripped_lowcase="birds",self="65212") //  <  > 
 ]
 > 
 < [ token 65213 { 676 } false (wholesurface="of ",xmlindex="716",surface_stripped_lowcase="of",self="65213") //  <  > 
 ]
 > 
 < [ token 65214 { 677 } false (wholesurface="the ",xmlindex="717",surface_stripped_lowcase="the",self="65214") //  <  > 
 ]
 > 
 < [ token 65215 { 678 } false (wholesurface="heavens, ",xmlindex="718",surface_stripped_lowcase="heavens",self="65215") //  <  > 
 ]
 > 
 < [ token 65216 { 679 } false (wholesurface="and ",xmlindex="719",surface_stripped_lowcase="and",self="65216") //  <  > 
 ]
 > 
 < [ token 65217 { 680 } false (wholesurface="over ",xmlindex="720",surface_stripped_lowcase="over",self="65217") //  <  > 
 ]
 > 
 < [ token 65218 { 681 } false (wholesurface="every ",xmlindex="721",surface_stripped_lowcase="every",self="65218") //  <  > 
 ]
 > 
 < [ token 65219 { 682 } false (wholesurface="living ",xmlindex="722",surface_stripped_lowcase="living",self="65219") //  <  > 
 ]
 > 
 < [ token 65220 { 683 } false (wholesurface="thing ",xmlindex="723",surface_stripped_lowcase="thing",self="65220") //  <  > 
 ]
 > 
 < [ token 65221 { 684 } false (wholesurface="that ",xmlindex="724",surface_stripped_lowcase="that",self="65221") //  <  > 
 ]
 > 
 < [ token 65222 { 685 } false (wholesurface="moveth ",xmlindex="725",surface_stripped_lowcase="moveth",self="65222") //  <  > 
 ]
 > 
 < [ token 65223 { 686 } false (wholesurface="upon ",xmlindex="726",surface_stripped_lowcase="upon",self="65223") //  <  > 
 ]
 > 
 < [ token 65224 { 687 } false (wholesurface="the ",xmlindex="727",surface_stripped_lowcase="the",self="65224") //  <  > 
 ]
 > 
 < [ token 65225 { 688 } false (wholesurface="earth. ",xmlindex="728",surface_stripped_lowcase="earth",self="65225") //  <  > 
 ]
 > 
 < [ token 65226 { 689 } false (wholesurface="And ",xmlindex="730",surface_stripped_lowcase="and",self="65226") //  <  > 
 ]
 > 
 < [ token 65227 { 690 } false (wholesurface="God ",xmlindex="731",surface_stripped_lowcase="god",self="65227") //  <  > 
 ]
 > 
 < [ token 65228 { 691 } false (wholesurface="said, ",xmlindex="732",surface_stripped_lowcase="said",self="65228") //  <  > 
 ]
 > 
 < [ token 65229 { 692 } false (wholesurface="Behold, ",xmlindex="733",surface_stripped_lowcase="behold",self="65229") //  <  > 
 ]
 > 
 < [ token 65230 { 693 } false (wholesurface="I ",xmlindex="734",surface_stripped_lowcase="i",self="65230") //  <  > 
 ]
 > 
 < [ token 65231 { 694 } false (wholesurface="have ",xmlindex="735",surface_stripped_lowcase="have",self="65231") //  <  > 
 ]
 > 
 < [ token 65232 { 695 } false (wholesurface="given ",xmlindex="736",surface_stripped_lowcase="given",self="65232") //  <  > 
 ]
 > 
 < [ token 65233 { 696 } false (wholesurface="you ",xmlindex="737",surface_stripped_lowcase="you",self="65233") //  <  > 
 ]
 > 
 < [ token 65234 { 697 } false (wholesurface="every ",xmlindex="738",surface_stripped_lowcase="every",self="65234") //  <  > 
 ]
 > 
 < [ token 65235 { 698 } false (wholesurface="herb ",xmlindex="739",surface_stripped_lowcase="herb",self="65235") //  <  > 
 ]
 > 
 < [ token 65236 { 699 } false (wholesurface="yielding ",xmlindex="740",surface_stripped_lowcase="yielding",self="65236") //  <  > 
 ]
 > 
 < [ token 65237 { 700 } false (wholesurface="seed, ",xmlindex="741",surface_stripped_lowcase="seed",self="65237") //  <  > 
 ]
 > 
 < [ token 65238 { 701 } false (wholesurface="which ",xmlindex="742",surface_stripped_lowcase="which",self="65238") //  <  > 
 ]
 > 
 < [ token 65239 { 702 } false (wholesurface="is ",xmlindex="743",surface_stripped_lowcase="is",self="65239") //  <  > 
 ]
 > 
 < [ token 65240 { 703 } false (wholesurface="upon ",xmlindex="744",surface_stripped_lowcase="upon",self="65240") //  <  > 
 ]
 > 
 < [ token 65241 { 704 } false (wholesurface="the ",xmlindex="745",surface_stripped_lowcase="the",self="65241") //  <  > 
 ]
 > 
 < [ token 65242 { 705 } false (wholesurface="face ",xmlindex="746",surface_stripped_lowcase="face",self="65242") //  <  > 
 ]
 > 
 < [ token 65243 { 706 } false (wholesurface="of ",xmlindex="747",surface_stripped_lowcase="of",self="65243") //  <  > 
 ]
 > 
 < [ token 65244 { 707 } false (wholesurface="all ",xmlindex="748",surface_stripped_lowcase="all",self="65244") //  <  > 
 ]
 > 
 < [ token 65245 { 708 } false (wholesurface="the ",xmlindex="749",surface_stripped_lowcase="the",self="65245") //  <  > 
 ]
 > 
 < [ token 65246 { 709 } false (wholesurface="earth, ",xmlindex="750",surface_stripped_lowcase="earth",self="65246") //  <  > 
 ]
 > 
 < [ token 65247 { 710 } false (wholesurface="and ",xmlindex="751",surface_stripped_lowcase="and",self="65247") //  <  > 
 ]
 > 
 < [ token 65248 { 711 } false (wholesurface="every ",xmlindex="752",surface_stripped_lowcase="every",self="65248") //  <  > 
 ]
 > 
 < [ token 65249 { 712 } false (wholesurface="tree, ",xmlindex="753",surface_stripped_lowcase="tree",self="65249") //  <  > 
 ]
 > 
 < [ token 65250 { 713 } false (wholesurface="in ",xmlindex="754",surface_stripped_lowcase="in",self="65250") //  <  > 
 ]
 > 
 < [ token 65251 { 714 } false (wholesurface="which ",xmlindex="755",surface_stripped_lowcase="which",self="65251") //  <  > 
 ]
 > 
 < [ token 65252 { 715 } false (wholesurface="is ",xmlindex="756",surface_stripped_lowcase="is",self="65252") //  <  > 
 ]
 > 
 < [ token 65253 { 716 } false (wholesurface="the ",xmlindex="757",surface_stripped_lowcase="the",self="65253") //  <  > 
 ]
 > 
 < [ token 65254 { 717 } false (wholesurface="fruit ",xmlindex="758",surface_stripped_lowcase="fruit",self="65254") //  <  > 
 ]
 > 
 < [ token 65255 { 718 } false (wholesurface="of ",xmlindex="759",surface_stripped_lowcase="of",self="65255") //  <  > 
 ]
 > 
 < [ token 65256 { 719 } false (wholesurface="a ",xmlindex="760",surface_stripped_lowcase="a",self="65256") //  <  > 
 ]
 > 
 < [ token 65257 { 720 } false (wholesurface="tree ",xmlindex="761",surface_stripped_lowcase="tree",self="65257") //  <  > 
 ]
 > 
 < [ token 65258 { 721 } false (wholesurface="yielding ",xmlindex="762",surface_stripped_lowcase="yielding",self="65258") //  <  > 
 ]
 > 
 < [ token 65259 { 722 } false (wholesurface="seed; ",xmlindex="763",surface_stripped_lowcase="seed",self="65259") //  <  > 
 ]
 > 
 < [ token 65260 { 723 } false (wholesurface="to ",xmlindex="764",surface_stripped_lowcase="to",self="65260") //  <  > 
 ]
 > 
 < [ token 65261 { 724 } false (wholesurface="you ",xmlindex="765",surface_stripped_lowcase="you",self="65261") //  <  > 
 ]
 > 
 < [ token 65262 { 725 } false (wholesurface="it ",xmlindex="766",surface_stripped_lowcase="it",self="65262") //  <  > 
 ]
 > 
 < [ token 65263 { 726 } false (wholesurface="shall ",xmlindex="767",surface_stripped_lowcase="shall",self="65263") //  <  > 
 ]
 > 
 < [ token 65264 { 727 } false (wholesurface="be ",xmlindex="768",surface_stripped_lowcase="be",self="65264") //  <  > 
 ]
 > 
 < [ token 65265 { 728 } false (wholesurface="for ",xmlindex="769",surface_stripped_lowcase="for",self="65265") //  <  > 
 ]
 > 
 < [ token 65266 { 729 } false (wholesurface="food: ",xmlindex="770",surface_stripped_lowcase="food",self="65266") //  <  > 
 ]
 > 
 < [ token 65267 { 730 } false (wholesurface="and ",xmlindex="772",surface_stripped_lowcase="and",self="65267") //  <  > 
 ]
 > 
 < [ token 65268 { 731 } false (wholesurface="to ",xmlindex="773",surface_stripped_lowcase="to",self="65268") //  <  > 
 ]
 > 
 < [ token 65269 { 732 } false (wholesurface="every ",xmlindex="774",surface_stripped_lowcase="every",self="65269") //  <  > 
 ]
 > 
 < [ token 65270 { 733 } false (wholesurface="beast ",xmlindex="775",surface_stripped_lowcase="beast",self="65270") //  <  > 
 ]
 > 
 < [ token 65271 { 734 } false (wholesurface="of ",xmlindex="776",surface_stripped_lowcase="of",self="65271") //  <  > 
 ]
 > 
 < [ token 65272 { 735 } false (wholesurface="the ",xmlindex="777",surface_stripped_lowcase="the",self="65272") //  <  > 
 ]
 > 
 < [ token 65273 { 736 } false (wholesurface="earth, ",xmlindex="778",surface_stripped_lowcase="earth",self="65273") //  <  > 
 ]
 > 
 < [ token 65274 { 737 } false (wholesurface="and ",xmlindex="779",surface_stripped_lowcase="and",self="65274") //  <  > 
 ]
 > 
 < [ token 65275 { 738 } false (wholesurface="to ",xmlindex="780",surface_stripped_lowcase="to",self="65275") //  <  > 
 ]
 > 
 < [ token 65276 { 739 } false (wholesurface="every ",xmlindex="781",surface_stripped_lowcase="every",self="65276") //  <  > 
 ]
 > 
 < [ token 65277 { 740 } false (wholesurface="bird ",xmlindex="782",surface_stripped_lowcase="bird",self="65277") //  <  > 
 ]
 > 
 < [ token 65278 { 741 } false (wholesurface="of ",xmlindex="783",surface_stripped_lowcase="of",self="65278") //  <  > 
 ]
 > 
 < [ token 65279 { 742 } false (wholesurface="the ",xmlindex="784",surface_stripped_lowcase="the",self="65279") //  <  > 
 ]
 > 
 < [ token 65280 { 743 } false (wholesurface="heavens, ",xmlindex="785",surface_stripped_lowcase="heavens",self="65280") //  <  > 
 ]
 > 
 < [ token 65281 { 744 } false (wholesurface="and ",xmlindex="786",surface_stripped_lowcase="and",self="65281") //  <  > 
 ]
 > 
 < [ token 65282 { 745 } false (wholesurface="to ",xmlindex="787",surface_stripped_lowcase="to",self="65282") //  <  > 
 ]
 > 
 < [ token 65283 { 746 } false (wholesurface="everything ",xmlindex="788",surface_stripped_lowcase="everything",self="65283") //  <  > 
 ]
 > 
 < [ token 65284 { 747 } false (wholesurface="that ",xmlindex="789",surface_stripped_lowcase="that",self="65284") //  <  > 
 ]
 > 
 < [ token 65285 { 748 } false (wholesurface="creepeth ",xmlindex="790",surface_stripped_lowcase="creepeth",self="65285") //  <  > 
 ]
 > 
 < [ token 65286 { 749 } false (wholesurface="upon ",xmlindex="791",surface_stripped_lowcase="upon",self="65286") //  <  > 
 ]
 > 
 < [ token 65287 { 750 } false (wholesurface="the ",xmlindex="792",surface_stripped_lowcase="the",self="65287") //  <  > 
 ]
 > 
 < [ token 65288 { 751 } false (wholesurface="earth, ",xmlindex="793",surface_stripped_lowcase="earth",self="65288") //  <  > 
 ]
 > 
 < [ token 65289 { 752 } false (wholesurface="wherein ",xmlindex="794",surface_stripped_lowcase="wherein",self="65289") //  <  > 
 ]
 > 
 < [ token 65290 { 753 } false (wholesurface="there ",xmlindex="795",surface_stripped_lowcase="there",self="65290") //  <  > 
 ]
 > 
 < [ token 65291 { 754 } false (wholesurface="is ",xmlindex="796",surface_stripped_lowcase="is",self="65291") //  <  > 
 ]
 > 
 < [ token 65292 { 755 } false (wholesurface="life, ",xmlindex="797",surface_stripped_lowcase="life",self="65292") //  <  > 
 ]
 > 
 < [ token 65293 { 756 } false (wholesurface="I ",xmlindex="799",surface_stripped_lowcase="i",self="65293") //  <  > 
 ]
 > 
 < [ token 65294 { 757 } false (wholesurface="have ",xmlindex="800",surface_stripped_lowcase="have",self="65294") //  <  > 
 ]
 > 
 < [ token 65295 { 758 } false (wholesurface="given",xmlindex="801",surface_stripped_lowcase="given",self="65295") //  <  > 
 ]
 > 
 < [ token 65296 { 759 } false (wholesurface=" every ",xmlindex="802",surface_stripped_lowcase="every",self="65296") //  <  > 
 ]
 > 
 < [ token 65297 { 760 } false (wholesurface="green ",xmlindex="803",surface_stripped_lowcase="green",self="65297") //  <  > 
 ]
 > 
 < [ token 65298 { 761 } false (wholesurface="herb ",xmlindex="804",surface_stripped_lowcase="herb",self="65298") //  <  > 
 ]
 > 
 < [ token 65299 { 762 } false (wholesurface="for ",xmlindex="805",surface_stripped_lowcase="for",self="65299") //  <  > 
 ]
 > 
 < [ token 65300 { 763 } false (wholesurface="food: ",xmlindex="806",surface_stripped_lowcase="food",self="65300") //  <  > 
 ]
 > 
 < [ token 65301 { 764 } false (wholesurface="and ",xmlindex="807",surface_stripped_lowcase="and",self="65301") //  <  > 
 ]
 > 
 < [ token 65302 { 765 } false (wholesurface="it ",xmlindex="808",surface_stripped_lowcase="it",self="65302") //  <  > 
 ]
 > 
 < [ token 65303 { 766 } false (wholesurface="was ",xmlindex="809",surface_stripped_lowcase="was",self="65303") //  <  > 
 ]
 > 
 < [ token 65304 { 767 } false (wholesurface="so. ",xmlindex="810",surface_stripped_lowcase="so",self="65304") //  <  > 
 ]
 > 
 < [ token 65305 { 768 } false (wholesurface="And ",xmlindex="812",surface_stripped_lowcase="and",self="65305") //  <  > 
 ]
 > 
 < [ token 65306 { 769 } false (wholesurface="God ",xmlindex="813",surface_stripped_lowcase="god",self="65306") //  <  > 
 ]
 > 
 < [ token 65307 { 770 } false (wholesurface="saw ",xmlindex="814",surface_stripped_lowcase="saw",self="65307") //  <  > 
 ]
 > 
 < [ token 65308 { 771 } false (wholesurface="everything ",xmlindex="815",surface_stripped_lowcase="everything",self="65308") //  <  > 
 ]
 > 
 < [ token 65309 { 772 } false (wholesurface="that ",xmlindex="816",surface_stripped_lowcase="that",self="65309") //  <  > 
 ]
 > 
 < [ token 65310 { 773 } false (wholesurface="he ",xmlindex="817",surface_stripped_lowcase="he",self="65310") //  <  > 
 ]
 > 
 < [ token 65311 { 774 } false (wholesurface="had ",xmlindex="818",surface_stripped_lowcase="had",self="65311") //  <  > 
 ]
 > 
 < [ token 65312 { 775 } false (wholesurface="made, ",xmlindex="819",surface_stripped_lowcase="made",self="65312") //  <  > 
 ]
 > 
 < [ token 65313 { 776 } false (wholesurface="and, ",xmlindex="820",surface_stripped_lowcase="and",self="65313") //  <  > 
 ]
 > 
 < [ token 65314 { 777 } false (wholesurface="behold, ",xmlindex="821",surface_stripped_lowcase="behold",self="65314") //  <  > 
 ]
 > 
 < [ token 65315 { 778 } false (wholesurface="it ",xmlindex="822",surface_stripped_lowcase="it",self="65315") //  <  > 
 ]
 > 
 < [ token 65316 { 779 } false (wholesurface="was ",xmlindex="823",surface_stripped_lowcase="was",self="65316") //  <  > 
 ]
 > 
 < [ token 65317 { 780 } false (wholesurface="very ",xmlindex="824",surface_stripped_lowcase="very",self="65317") //  <  > 
 ]
 > 
 < [ token 65318 { 781 } false (wholesurface="good. ",xmlindex="825",surface_stripped_lowcase="good",self="65318") //  <  > 
 ]
 > 
 < [ token 65319 { 782 } false (wholesurface="And ",xmlindex="826",surface_stripped_lowcase="and",self="65319") //  <  > 
 ]
 > 
 < [ token 65320 { 783 } false (wholesurface="there ",xmlindex="827",surface_stripped_lowcase="there",self="65320") //  <  > 
 ]
 > 
 < [ token 65321 { 784 } false (wholesurface="was ",xmlindex="828",surface_stripped_lowcase="was",self="65321") //  <  > 
 ]
 > 
 < [ token 65322 { 785 } false (wholesurface="evening ",xmlindex="829",surface_stripped_lowcase="evening",self="65322") //  <  > 
 ]
 > 
 < [ token 65323 { 786 } false (wholesurface="and ",xmlindex="830",surface_stripped_lowcase="and",self="65323") //  <  > 
 ]
 > 
 < [ token 65324 { 787 } false (wholesurface="there ",xmlindex="831",surface_stripped_lowcase="there",self="65324") //  <  > 
 ]
 > 
 < [ token 65325 { 788 } false (wholesurface="was ",xmlindex="832",surface_stripped_lowcase="was",self="65325") //  <  > 
 ]
 > 
 < [ token 65326 { 789 } false (wholesurface="morning, ",xmlindex="833",surface_stripped_lowcase="morning",self="65326") //  <  > 
 ]
 > 
 < [ token 65327 { 790 } false (wholesurface="the ",xmlindex="834",surface_stripped_lowcase="the",self="65327") //  <  > 
 ]
 > 
 < [ token 65328 { 791 } false (wholesurface="sixth ",xmlindex="835",surface_stripped_lowcase="sixth",self="65328") //  <  > 
 ]
 > 
 < [ token 65329 { 792 } false (wholesurface="day. ",xmlindex="836",surface_stripped_lowcase="day",self="65329") //  <  > 
 ]
 > 
 > 
---- answer

++++ query selecting from bookcase_verse_index_token_mdf_wholesurface_index
SELECT ALL OBJECTS 
WHERE 
[bookcase_verse_index_token_mdf_wholesurface_index
    GET feature_value, monad_set
]
GO
++++ answer
 //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65330 { 8-17 } false (feature_value="and",monad_set="?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65331 { 8-17 } false (feature_value="beginning",monad_set=":") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65332 { 8-17 } false (feature_value="created",monad_set="<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65333 { 8-17 } false (feature_value="earth",monad_set="A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65334 { 8-17 } false (feature_value="god",monad_set=";") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65335 { 8-17 } false (feature_value="heavens",monad_set=">") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65336 { 8-17 } false (feature_value="in",monad_set="8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65337 { 18-45 } false (feature_value="and",monad_set="By5y2y9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65338 { 18-45 } false (feature_value="darkness",monad_set="J") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65339 { 18-45 } false (feature_value="deep",monad_set="Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65340 { 18-45 } false (feature_value="earth",monad_set="D") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65341 { 18-45 } false (feature_value="face",monad_set="Ny<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65342 { 18-45 } false (feature_value="god",monad_set="V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65343 { 18-45 } false (feature_value="moved",monad_set="W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65344 { 18-45 } false (feature_value="spirit",monad_set="T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65345 { 18-45 } false (feature_value="upon",monad_set="Ly<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65346 { 18-45 } false (feature_value="void",monad_set="H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65347 { 18-45 } false (feature_value="was",monad_set="Ey6") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65348 { 18-45 } false (feature_value="waste",monad_set="F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65349 { 18-45 } false (feature_value="waters",monad_set="]") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65350 { 46-56 } false (feature_value="and",monad_set="^y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65351 { 46-56 } false (feature_value="be",monad_set="c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65352 { 46-56 } false (feature_value="god",monad_set="_") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65353 { 46-56 } false (feature_value="let",monad_set="a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65354 { 46-56 } false (feature_value="light",monad_set="dy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65355 { 46-56 } false (feature_value="said",monad_set="`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65356 { 46-56 } false (feature_value="there",monad_set="by4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65357 { 46-56 } false (feature_value="was",monad_set="g") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65358 { 57-73 } false (feature_value="and",monad_set="iy9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65359 { 57-73 } false (feature_value="darkness",monad_set="19") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65360 { 57-73 } false (feature_value="divided",monad_set="14") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65361 { 57-73 } false (feature_value="from",monad_set="17") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65362 { 57-73 } false (feature_value="god",monad_set="jy9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65363 { 57-73 } false (feature_value="good",monad_set="11") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65364 { 57-73 } false (feature_value="it",monad_set="o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65365 { 57-73 } false (feature_value="light",monad_set="my9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65366 { 57-73 } false (feature_value="saw",monad_set="k") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65367 { 57-73 } false (feature_value="that",monad_set="n") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65368 { 57-73 } false (feature_value="was",monad_set="10") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65369 { 74-95 } false (feature_value="and",monad_set="1:y6y6y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65370 { 74-95 } false (feature_value="called",monad_set="1<y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65371 { 74-95 } false (feature_value="darkness",monad_set="1B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65372 { 74-95 } false (feature_value="day",monad_set="1?y@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65373 { 74-95 } false (feature_value="evening",monad_set="1I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65374 { 74-95 } false (feature_value="god",monad_set="1;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65375 { 74-95 } false (feature_value="he",monad_set="1C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65376 { 74-95 } false (feature_value="light",monad_set="1>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65377 { 74-95 } false (feature_value="morning",monad_set="1M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65378 { 74-95 } false (feature_value="night",monad_set="1E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65379 { 74-95 } false (feature_value="one",monad_set="1N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65380 { 74-95 } false (feature_value="there",monad_set="1Gy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65381 { 74-95 } false (feature_value="was",monad_set="1Hy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65382 { 96-118 } false (feature_value="and",monad_set="1Py>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65383 { 96-118 } false (feature_value="be",monad_set="1U") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65384 { 96-118 } false (feature_value="divide",monad_set="1a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65385 { 96-118 } false (feature_value="firmament",monad_set="1W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65386 { 96-118 } false (feature_value="from",monad_set="1d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65387 { 96-118 } false (feature_value="god",monad_set="1Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65388 { 96-118 } false (feature_value="in",monad_set="1X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65389 { 96-118 } false (feature_value="it",monad_set="1`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65390 { 96-118 } false (feature_value="let",monad_set="1Sy<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65391 { 96-118 } false (feature_value="midst",monad_set="1Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65392 { 96-118 } false (feature_value="said",monad_set="1R") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65393 { 96-118 } false (feature_value="there",monad_set="1T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65394 { 96-118 } false (feature_value="waters",monad_set="1]y6y3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65395 { 119-144 } false (feature_value="above",monad_set="2:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65396 { 119-144 } false (feature_value="and",monad_set="1gy5yA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65397 { 119-144 } false (feature_value="divided",monad_set="1m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65398 { 119-144 } false (feature_value="firmament",monad_set="1ky9y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65399 { 119-144 } false (feature_value="from",monad_set="25") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65400 { 119-144 } false (feature_value="god",monad_set="1h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65401 { 119-144 } false (feature_value="it",monad_set="2>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65402 { 119-144 } false (feature_value="made",monad_set="1i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65403 { 119-144 } false (feature_value="so",monad_set="2@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65404 { 119-144 } false (feature_value="under",monad_set="22") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65405 { 119-144 } false (feature_value="was",monad_set="2?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65406 { 119-144 } false (feature_value="waters",monad_set="1oy8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65407 { 119-144 } false (feature_value="were",monad_set="21y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65408 { 119-144 } false (feature_value="which",monad_set="20y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65409 { 145-161 } false (feature_value="and",monad_set="2Ay6y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65410 { 145-161 } false (feature_value="called",monad_set="2C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65411 { 145-161 } false (feature_value="day",monad_set="2Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65412 { 145-161 } false (feature_value="evening",monad_set="2J") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65413 { 145-161 } false (feature_value="firmament",monad_set="2E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65414 { 145-161 } false (feature_value="god",monad_set="2B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65415 { 145-161 } false (feature_value="heaven",monad_set="2F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65416 { 145-161 } false (feature_value="morning",monad_set="2N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65417 { 145-161 } false (feature_value="second",monad_set="2P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65418 { 145-161 } false (feature_value="there",monad_set="2Hy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65419 { 145-161 } false (feature_value="was",monad_set="2Iy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65420 { 162-186 } false (feature_value="and",monad_set="2Ry?y6") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65421 { 162-186 } false (feature_value="appear",monad_set="2f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65422 { 162-186 } false (feature_value="be",monad_set="2[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65423 { 162-186 } false (feature_value="dry",monad_set="2d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65424 { 162-186 } false (feature_value="gathered",monad_set="2\\") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65425 { 162-186 } false (feature_value="god",monad_set="2S") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65426 { 162-186 } false (feature_value="heavens",monad_set="2Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65427 { 162-186 } false (feature_value="it",monad_set="2h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65428 { 162-186 } false (feature_value="land",monad_set="2e") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65429 { 162-186 } false (feature_value="let",monad_set="2Uy=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65430 { 162-186 } false (feature_value="one",monad_set="2_") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65431 { 162-186 } false (feature_value="place",monad_set="2`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65432 { 162-186 } false (feature_value="said",monad_set="2T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65433 { 162-186 } false (feature_value="so",monad_set="2j") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65434 { 162-186 } false (feature_value="together",monad_set="2]") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65435 { 162-186 } false (feature_value="under",monad_set="2X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65436 { 162-186 } false (feature_value="unto",monad_set="2^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65437 { 162-186 } false (feature_value="was",monad_set="2i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65438 { 162-186 } false (feature_value="waters",monad_set="2W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65439 { 187-210 } false (feature_value="and",monad_set="2ky7y:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65440 { 187-210 } false (feature_value="called",monad_set="2my<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65441 { 187-210 } false (feature_value="dry",monad_set="2o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65442 { 187-210 } false (feature_value="earth",monad_set="31") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65443 { 187-210 } false (feature_value="gathering",monad_set="34") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65444 { 187-210 } false (feature_value="god",monad_set="2lyA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65445 { 187-210 } false (feature_value="good",monad_set="3B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65446 { 187-210 } false (feature_value="he",monad_set="3:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65447 { 187-210 } false (feature_value="it",monad_set="3@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65448 { 187-210 } false (feature_value="land",monad_set="30") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65449 { 187-210 } false (feature_value="saw",monad_set="3>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65450 { 187-210 } false (feature_value="seas",monad_set="3;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65451 { 187-210 } false (feature_value="that",monad_set="3?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65452 { 187-210 } false (feature_value="together",monad_set="35") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65453 { 187-210 } false (feature_value="was",monad_set="3A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65454 { 187-210 } false (feature_value="waters",monad_set="38") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65455 { 211-241 } false (feature_value="after",monad_set="3S") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65456 { 211-241 } false (feature_value="and",monad_set="3Cy<y?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65457 { 211-241 } false (feature_value="bearing",monad_set="3Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65458 { 211-241 } false (feature_value="earth",monad_set="3HyE") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65459 { 211-241 } false (feature_value="forth",monad_set="3J") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65460 { 211-241 } false (feature_value="fruit",monad_set="3R") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65461 { 211-241 } false (feature_value="fruit-trees",monad_set="3P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65462 { 211-241 } false (feature_value="god",monad_set="3D") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65463 { 211-241 } false (feature_value="grass",monad_set="3K") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65464 { 211-241 } false (feature_value="herbs",monad_set="3L") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65465 { 211-241 } false (feature_value="is",monad_set="3W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65466 { 211-241 } false (feature_value="it",monad_set="3_") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65467 { 211-241 } false (feature_value="kind",monad_set="3U") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65468 { 211-241 } false (feature_value="let",monad_set="3F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65469 { 211-241 } false (feature_value="put",monad_set="3I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65470 { 211-241 } false (feature_value="said",monad_set="3E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65471 { 211-241 } false (feature_value="seed",monad_set="3Ny;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65472 { 211-241 } false (feature_value="so",monad_set="3a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65473 { 211-241 } false (feature_value="their",monad_set="3T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65474 { 211-241 } false (feature_value="thereof",monad_set="3Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65475 { 211-241 } false (feature_value="upon",monad_set="3[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65476 { 211-241 } false (feature_value="was",monad_set="3`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65477 { 211-241 } false (feature_value="wherein",monad_set="3V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65478 { 211-241 } false (feature_value="yielding",monad_set="3M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65479 { 242-272 } false (feature_value="after",monad_set="3ky<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65480 { 242-272 } false (feature_value="and",monad_set="3by<y<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65481 { 242-272 } false (feature_value="bearing",monad_set="40") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65482 { 242-272 } false (feature_value="brought",monad_set="3e") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65483 { 242-272 } false (feature_value="earth",monad_set="3d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65484 { 242-272 } false (feature_value="forth",monad_set="3f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65485 { 242-272 } false (feature_value="fruit",monad_set="41") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65486 { 242-272 } false (feature_value="god",monad_set="4;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65487 { 242-272 } false (feature_value="good",monad_set="4@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65488 { 242-272 } false (feature_value="grass",monad_set="3g") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65489 { 242-272 } false (feature_value="herbs",monad_set="3h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65490 { 242-272 } false (feature_value="is",monad_set="43") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65491 { 242-272 } false (feature_value="it",monad_set="4>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65492 { 242-272 } false (feature_value="kind",monad_set="3my<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65493 { 242-272 } false (feature_value="saw",monad_set="4<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65494 { 242-272 } false (feature_value="seed",monad_set="3jy;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65495 { 242-272 } false (feature_value="that",monad_set="4=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65496 { 242-272 } false (feature_value="their",monad_set="3ly<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65497 { 242-272 } false (feature_value="thereof",monad_set="46") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65498 { 242-272 } false (feature_value="trees",monad_set="3o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65499 { 242-272 } false (feature_value="was",monad_set="4?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65500 { 242-272 } false (feature_value="wherein",monad_set="42") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65501 { 242-272 } false (feature_value="yielding",monad_set="3i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65502 { 273-283 } false (feature_value="and",monad_set="4Ay4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65503 { 273-283 } false (feature_value="day",monad_set="4K") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65504 { 273-283 } false (feature_value="evening",monad_set="4D") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65505 { 273-283 } false (feature_value="morning",monad_set="4H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65506 { 273-283 } false (feature_value="there",monad_set="4By4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65507 { 273-283 } false (feature_value="third",monad_set="4J") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65508 { 273-283 } false (feature_value="was",monad_set="4Cy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65509 { 284-316 } false (feature_value="and",monad_set="4LyCy6y3y3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65510 { 284-316 } false (feature_value="be",monad_set="4QyA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65511 { 284-316 } false (feature_value="day",monad_set="4[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65512 { 284-316 } false (feature_value="days",monad_set="4j") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65513 { 284-316 } false (feature_value="divide",monad_set="4Y") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65514 { 284-316 } false (feature_value="firmament",monad_set="4U") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65515 { 284-316 } false (feature_value="for",monad_set="4cy3y3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65516 { 284-316 } false (feature_value="from",monad_set="4\\") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65517 { 284-316 } false (feature_value="god",monad_set="4M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65518 { 284-316 } false (feature_value="heaven",monad_set="4W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65519 { 284-316 } false (feature_value="in",monad_set="4S") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65520 { 284-316 } false (feature_value="let",monad_set="4OyA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65521 { 284-316 } false (feature_value="lights",monad_set="4R") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65522 { 284-316 } false (feature_value="night",monad_set="4^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65523 { 284-316 } false (feature_value="said",monad_set="4N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65524 { 284-316 } false (feature_value="seasons",monad_set="4g") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65525 { 284-316 } false (feature_value="signs",monad_set="4d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65526 { 284-316 } false (feature_value="them",monad_set="4a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65527 { 284-316 } false (feature_value="there",monad_set="4P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65528 { 284-316 } false (feature_value="to",monad_set="4X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65529 { 284-316 } false (feature_value="years",monad_set="4l") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65530 { 317-337 } false (feature_value="and",monad_set="4myA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65531 { 317-337 } false (feature_value="be",monad_set="50") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65532 { 317-337 } false (feature_value="earth",monad_set="5=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65533 { 317-337 } false (feature_value="firmament",monad_set="55") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65534 { 317-337 } false (feature_value="for",monad_set="51") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65535 { 317-337 } false (feature_value="give",monad_set="59") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65536 { 317-337 } false (feature_value="heaven",monad_set="57") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65537 { 317-337 } false (feature_value="in",monad_set="53") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65538 { 317-337 } false (feature_value="it",monad_set="5?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65539 { 317-337 } false (feature_value="let",monad_set="4n") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65540 { 317-337 } false (feature_value="light",monad_set="5:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65541 { 317-337 } false (feature_value="lights",monad_set="52") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65542 { 317-337 } false (feature_value="so",monad_set="5A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65543 { 317-337 } false (feature_value="them",monad_set="4o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65544 { 317-337 } false (feature_value="to",monad_set="58") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65545 { 317-337 } false (feature_value="upon",monad_set="5;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65546 { 317-337 } false (feature_value="was",monad_set="5@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65547 { 338-364 } false (feature_value="also",monad_set="5\\") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65548 { 338-364 } false (feature_value="and",monad_set="5By>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65549 { 338-364 } false (feature_value="day",monad_set="5O") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65550 { 338-364 } false (feature_value="god",monad_set="5C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65551 { 338-364 } false (feature_value="great",monad_set="5G") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65552 { 338-364 } false (feature_value="greater",monad_set="5J") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65553 { 338-364 } false (feature_value="he",monad_set="5X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65554 { 338-364 } false (feature_value="lesser",monad_set="5R") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65555 { 338-364 } false (feature_value="light",monad_set="5Ky8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65556 { 338-364 } false (feature_value="lights",monad_set="5H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65557 { 338-364 } false (feature_value="made",monad_set="5DyE") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65558 { 338-364 } false (feature_value="night",monad_set="5W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65559 { 338-364 } false (feature_value="rule",monad_set="5My8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65560 { 338-364 } false (feature_value="stars",monad_set="5[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65561 { 338-364 } false (feature_value="to",monad_set="5Ly8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65562 { 338-364 } false (feature_value="two",monad_set="5F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65563 { 365-379 } false (feature_value="and",monad_set="5]") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65564 { 365-379 } false (feature_value="earth",monad_set="5k") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65565 { 365-379 } false (feature_value="firmament",monad_set="5c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65566 { 365-379 } false (feature_value="give",monad_set="5g") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65567 { 365-379 } false (feature_value="god",monad_set="5^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65568 { 365-379 } false (feature_value="heaven",monad_set="5e") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65569 { 365-379 } false (feature_value="in",monad_set="5a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65570 { 365-379 } false (feature_value="light",monad_set="5h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65571 { 365-379 } false (feature_value="set",monad_set="5_") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65572 { 365-379 } false (feature_value="them",monad_set="5`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65573 { 365-379 } false (feature_value="to",monad_set="5f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65574 { 365-379 } false (feature_value="upon",monad_set="5i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65575 { 380-404 } false (feature_value="and",monad_set="5ly6y4y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65576 { 380-404 } false (feature_value="darkness",monad_set="6=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65577 { 380-404 } false (feature_value="day",monad_set="61") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65578 { 380-404 } false (feature_value="divide",monad_set="68") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65579 { 380-404 } false (feature_value="from",monad_set="6;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65580 { 380-404 } false (feature_value="god",monad_set="6?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65581 { 380-404 } false (feature_value="good",monad_set="6D") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65582 { 380-404 } false (feature_value="it",monad_set="6B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65583 { 380-404 } false (feature_value="light",monad_set="6:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65584 { 380-404 } false (feature_value="night",monad_set="65") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65585 { 380-404 } false (feature_value="over",monad_set="5oy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65586 { 380-404 } false (feature_value="rule",monad_set="5n") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65587 { 380-404 } false (feature_value="saw",monad_set="6@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65588 { 380-404 } false (feature_value="that",monad_set="6A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65589 { 380-404 } false (feature_value="to",monad_set="5my:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65590 { 380-404 } false (feature_value="was",monad_set="6C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65591 { 405-415 } false (feature_value="and",monad_set="6Ey4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65592 { 405-415 } false (feature_value="day",monad_set="6O") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65593 { 405-415 } false (feature_value="evening",monad_set="6H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65594 { 405-415 } false (feature_value="fourth",monad_set="6N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65595 { 405-415 } false (feature_value="morning",monad_set="6L") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65596 { 405-415 } false (feature_value="there",monad_set="6Fy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65597 { 405-415 } false (feature_value="was",monad_set="6Gy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65598 { 416-440 } false (feature_value="above",monad_set="6`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65599 { 416-440 } false (feature_value="and",monad_set="6Py<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65600 { 416-440 } false (feature_value="birds",monad_set="6^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65601 { 416-440 } false (feature_value="creatures",monad_set="6[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65602 { 416-440 } false (feature_value="earth",monad_set="6b") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65603 { 416-440 } false (feature_value="firmament",monad_set="6f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65604 { 416-440 } false (feature_value="fly",monad_set="6_") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65605 { 416-440 } false (feature_value="god",monad_set="6Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65606 { 416-440 } false (feature_value="heaven",monad_set="6h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65607 { 416-440 } false (feature_value="in",monad_set="6c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65608 { 416-440 } false (feature_value="let",monad_set="6Sy:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65609 { 416-440 } false (feature_value="living",monad_set="6Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65610 { 416-440 } false (feature_value="open",monad_set="6e") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65611 { 416-440 } false (feature_value="said",monad_set="6R") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65612 { 416-440 } false (feature_value="swarm",monad_set="6V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65613 { 416-440 } false (feature_value="swarms",monad_set="6X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65614 { 416-440 } false (feature_value="waters",monad_set="6U") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65615 { 416-440 } false (feature_value="with",monad_set="6W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65616 { 441-473 } false (feature_value="after",monad_set="79y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65617 { 441-473 } false (feature_value="and",monad_set="6iy6y=y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65618 { 441-473 } false (feature_value="bird",monad_set="7?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65619 { 441-473 } false (feature_value="created",monad_set="6k") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65620 { 441-473 } false (feature_value="creature",monad_set="72") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65621 { 441-473 } false (feature_value="every",monad_set="70y=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65622 { 441-473 } false (feature_value="god",monad_set="6jyJ") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65623 { 441-473 } false (feature_value="good",monad_set="7I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65624 { 441-473 } false (feature_value="great",monad_set="6m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65625 { 441-473 } false (feature_value="it",monad_set="7G") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65626 { 441-473 } false (feature_value="its",monad_set="7A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65627 { 441-473 } false (feature_value="kind",monad_set="7;y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65628 { 441-473 } false (feature_value="living",monad_set="71") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65629 { 441-473 } false (feature_value="moveth",monad_set="74") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65630 { 441-473 } false (feature_value="saw",monad_set="7E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65631 { 441-473 } false (feature_value="sea-monsters",monad_set="6n") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65632 { 441-473 } false (feature_value="swarmed",monad_set="78") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65633 { 441-473 } false (feature_value="that",monad_set="73yC") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65634 { 441-473 } false (feature_value="their",monad_set="7:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65635 { 441-473 } false (feature_value="was",monad_set="7H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65636 { 441-473 } false (feature_value="waters",monad_set="77") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65637 { 441-473 } false (feature_value="wherewith",monad_set="75") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65638 { 441-473 } false (feature_value="winged",monad_set="7>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65639 { 474-496 } false (feature_value="and",monad_set="7Jy7y2y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65640 { 474-496 } false (feature_value="be",monad_set="7O") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65641 { 474-496 } false (feature_value="birds",monad_set="7\\") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65642 { 474-496 } false (feature_value="blessed",monad_set="7L") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65643 { 474-496 } false (feature_value="earth",monad_set="7`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65644 { 474-496 } false (feature_value="fill",monad_set="7T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65645 { 474-496 } false (feature_value="fruitful",monad_set="7P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65646 { 474-496 } false (feature_value="god",monad_set="7K") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65647 { 474-496 } false (feature_value="in",monad_set="7W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65648 { 474-496 } false (feature_value="let",monad_set="7[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65649 { 474-496 } false (feature_value="multiply",monad_set="7Ry;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65650 { 474-496 } false (feature_value="on",monad_set="7^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65651 { 474-496 } false (feature_value="saying",monad_set="7N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65652 { 474-496 } false (feature_value="seas",monad_set="7Y") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65653 { 474-496 } false (feature_value="them",monad_set="7M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65654 { 474-496 } false (feature_value="waters",monad_set="7V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65655 { 497-507 } false (feature_value="and",monad_set="7ay4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65656 { 497-507 } false (feature_value="day",monad_set="7k") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65657 { 497-507 } false (feature_value="evening",monad_set="7d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65658 { 497-507 } false (feature_value="fifth",monad_set="7j") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65659 { 497-507 } false (feature_value="morning",monad_set="7h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65660 { 497-507 } false (feature_value="there",monad_set="7by4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65661 { 497-507 } false (feature_value="was",monad_set="7cy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65662 { 508-536 } false (feature_value="after",monad_set="86y<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65663 { 508-536 } false (feature_value="and",monad_set="7ly>y3y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65664 { 508-536 } false (feature_value="beasts",monad_set="8>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65665 { 508-536 } false (feature_value="bring",monad_set="82") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65666 { 508-536 } false (feature_value="cattle",monad_set="89") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65667 { 508-536 } false (feature_value="creatures",monad_set="85") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65668 { 508-536 } false (feature_value="creeping",monad_set="8;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65669 { 508-536 } false (feature_value="earth",monad_set="81y@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65670 { 508-536 } false (feature_value="forth",monad_set="83") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65671 { 508-536 } false (feature_value="god",monad_set="7m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65672 { 508-536 } false (feature_value="it",monad_set="8F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65673 { 508-536 } false (feature_value="kind",monad_set="88y<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65674 { 508-536 } false (feature_value="let",monad_set="7o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65675 { 508-536 } false (feature_value="living",monad_set="84") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65676 { 508-536 } false (feature_value="said",monad_set="7n") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65677 { 508-536 } false (feature_value="so",monad_set="8H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65678 { 508-536 } false (feature_value="their",monad_set="87y<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65679 { 508-536 } false (feature_value="things",monad_set="8<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65680 { 508-536 } false (feature_value="was",monad_set="8G") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65681 { 537-570 } false (feature_value="after",monad_set="8Qy6y:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65682 { 537-570 } false (feature_value="and",monad_set="8Iy;y6y:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65683 { 537-570 } false (feature_value="beasts",monad_set="8M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65684 { 537-570 } false (feature_value="cattle",monad_set="8V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65685 { 537-570 } false (feature_value="creepeth",monad_set="8]") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65686 { 537-570 } false (feature_value="earth",monad_set="8P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65687 { 537-570 } false (feature_value="everything",monad_set="8[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65688 { 537-570 } false (feature_value="god",monad_set="8JyK") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65689 { 537-570 } false (feature_value="good",monad_set="8j") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65690 { 537-570 } false (feature_value="ground",monad_set="8`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65691 { 537-570 } false (feature_value="it",monad_set="8h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65692 { 537-570 } false (feature_value="its",monad_set="8b") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65693 { 537-570 } false (feature_value="kind",monad_set="8Sy6y:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65694 { 537-570 } false (feature_value="made",monad_set="8K") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65695 { 537-570 } false (feature_value="saw",monad_set="8f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65696 { 537-570 } false (feature_value="that",monad_set="8\\y;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65697 { 537-570 } false (feature_value="their",monad_set="8Ry6") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65698 { 537-570 } false (feature_value="upon",monad_set="8^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65699 { 537-570 } false (feature_value="was",monad_set="8i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65700 { 571-620 } false (feature_value="after",monad_set="95") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65701 { 571-620 } false (feature_value="all",monad_set="9P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65702 { 571-620 } false (feature_value="and",monad_set="8ky=y;y7y4y5") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65703 { 571-620 } false (feature_value="birds",monad_set="9F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65704 { 571-620 } false (feature_value="cattle",monad_set="9M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65705 { 571-620 } false (feature_value="creepeth",monad_set="9Y") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65706 { 571-620 } false (feature_value="creeping",monad_set="9V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65707 { 571-620 } false (feature_value="dominion",monad_set="9<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65708 { 571-620 } false (feature_value="earth",monad_set="9Ry:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65709 { 571-620 } false (feature_value="every",monad_set="9U") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65710 { 571-620 } false (feature_value="fish",monad_set="9?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65711 { 571-620 } false (feature_value="god",monad_set="8l") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65712 { 571-620 } false (feature_value="have",monad_set="9;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65713 { 571-620 } false (feature_value="heavens",monad_set="9I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65714 { 571-620 } false (feature_value="image",monad_set="94") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65715 { 571-620 } false (feature_value="in",monad_set="92") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65716 { 571-620 } false (feature_value="let",monad_set="8ny;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65717 { 571-620 } false (feature_value="likeness",monad_set="97") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65718 { 571-620 } false (feature_value="make",monad_set="90") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65719 { 571-620 } false (feature_value="man",monad_set="91") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65720 { 571-620 } false (feature_value="our",monad_set="93y3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65721 { 571-620 } false (feature_value="over",monad_set="9=y7y7y4y5") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65722 { 571-620 } false (feature_value="said",monad_set="8m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65723 { 571-620 } false (feature_value="sea",monad_set="9B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65724 { 571-620 } false (feature_value="that",monad_set="9X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65725 { 571-620 } false (feature_value="them",monad_set="9:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65726 { 571-620 } false (feature_value="thing",monad_set="9W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65727 { 571-620 } false (feature_value="upon",monad_set="9Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65728 { 571-620 } false (feature_value="us",monad_set="8o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65729 { 621-642 } false (feature_value="and",monad_set="9]yA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65730 { 621-642 } false (feature_value="created",monad_set="9_y;y6") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65731 { 621-642 } false (feature_value="female",monad_set="9o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65732 { 621-642 } false (feature_value="god",monad_set="9^y;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65733 { 621-642 } false (feature_value="he",monad_set="9ky6") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65734 { 621-642 } false (feature_value="him",monad_set="9l") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65735 { 621-642 } false (feature_value="his",monad_set="9b") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65736 { 621-642 } false (feature_value="image",monad_set="9dy3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65737 { 621-642 } false (feature_value="in",monad_set="9ay4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65738 { 621-642 } false (feature_value="male",monad_set="9m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65739 { 621-642 } false (feature_value="man",monad_set="9`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65740 { 621-642 } false (feature_value="own",monad_set="9c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65741 { 621-642 } false (feature_value="them",monad_set=":2") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65742 { 643-688 } false (feature_value="and",monad_set=":3y4y7y2y4y3y9y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65743 { 643-688 } false (feature_value="be",monad_set=":<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65744 { 643-688 } false (feature_value="birds",monad_set=":S") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65745 { 643-688 } false (feature_value="blessed",monad_set=":5") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65746 { 643-688 } false (feature_value="dominion",monad_set=":I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65747 { 643-688 } false (feature_value="earth",monad_set=":CyM") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65748 { 643-688 } false (feature_value="every",monad_set=":Y") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65749 { 643-688 } false (feature_value="fish",monad_set=":L") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65750 { 643-688 } false (feature_value="fruitful",monad_set=":=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65751 { 643-688 } false (feature_value="god",monad_set=":4y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65752 { 643-688 } false (feature_value="have",monad_set=":H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65753 { 643-688 } false (feature_value="heavens",monad_set=":V") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65754 { 643-688 } false (feature_value="it",monad_set=":F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65755 { 643-688 } false (feature_value="living",monad_set=":Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65756 { 643-688 } false (feature_value="moveth",monad_set=":]") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65757 { 643-688 } false (feature_value="multiply",monad_set=":?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65758 { 643-688 } false (feature_value="over",monad_set=":Jy7y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65759 { 643-688 } false (feature_value="replenish",monad_set=":A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65760 { 643-688 } false (feature_value="said",monad_set=":9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65761 { 643-688 } false (feature_value="sea",monad_set=":O") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65762 { 643-688 } false (feature_value="subdue",monad_set=":E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65763 { 643-688 } false (feature_value="that",monad_set=":\\") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65764 { 643-688 } false (feature_value="them",monad_set=":6y5") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65765 { 643-688 } false (feature_value="thing",monad_set=":[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65766 { 643-688 } false (feature_value="unto",monad_set="::") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65767 { 643-688 } false (feature_value="upon",monad_set=":^") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65768 { 689-729 } false (feature_value="all",monad_set=";3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65769 { 689-729 } false (feature_value="and",monad_set=":ayE") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65770 { 689-729 } false (feature_value="be",monad_set=";G") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65771 { 689-729 } false (feature_value="behold",monad_set=":d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65772 { 689-729 } false (feature_value="earth",monad_set=";5") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65773 { 689-729 } false (feature_value="every",monad_set=":iy>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65774 { 689-729 } false (feature_value="face",monad_set=";1") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65775 { 689-729 } false (feature_value="food",monad_set=";I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65776 { 689-729 } false (feature_value="for",monad_set=";H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65777 { 689-729 } false (feature_value="fruit",monad_set=";=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65778 { 689-729 } false (feature_value="given",monad_set=":g") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65779 { 689-729 } false (feature_value="god",monad_set=":b") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65780 { 689-729 } false (feature_value="have",monad_set=":f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65781 { 689-729 } false (feature_value="herb",monad_set=":j") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65782 { 689-729 } false (feature_value="i",monad_set=":e") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65783 { 689-729 } false (feature_value="in",monad_set=";9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65784 { 689-729 } false (feature_value="is",monad_set=":ny=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65785 { 689-729 } false (feature_value="it",monad_set=";E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65786 { 689-729 } false (feature_value="said",monad_set=":c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65787 { 689-729 } false (feature_value="seed",monad_set=":lyF") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65788 { 689-729 } false (feature_value="shall",monad_set=";F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65789 { 689-729 } false (feature_value="to",monad_set=";C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65790 { 689-729 } false (feature_value="tree",monad_set=";8y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65791 { 689-729 } false (feature_value="upon",monad_set=":o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65792 { 689-729 } false (feature_value="which",monad_set=":my=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65793 { 689-729 } false (feature_value="yielding",monad_set=":kyF") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65794 { 689-729 } false (feature_value="you",monad_set=":hyL") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65795 { 730-767 } false (feature_value="and",monad_set=";Jy7y7yD") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65796 { 730-767 } false (feature_value="beast",monad_set=";M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65797 { 730-767 } false (feature_value="bird",monad_set=";T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65798 { 730-767 } false (feature_value="creepeth",monad_set=";\\") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65799 { 730-767 } false (feature_value="earth",monad_set=";Py?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65800 { 730-767 } false (feature_value="every",monad_set=";Ly7yD") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65801 { 730-767 } false (feature_value="everything",monad_set=";Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65802 { 730-767 } false (feature_value="food",monad_set=";k") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65803 { 730-767 } false (feature_value="for",monad_set=";j") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65804 { 730-767 } false (feature_value="given",monad_set=";f") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65805 { 730-767 } false (feature_value="green",monad_set=";h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65806 { 730-767 } false (feature_value="have",monad_set=";e") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65807 { 730-767 } false (feature_value="heavens",monad_set=";W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65808 { 730-767 } false (feature_value="herb",monad_set=";i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65809 { 730-767 } false (feature_value="i",monad_set=";d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65810 { 730-767 } false (feature_value="is",monad_set=";b") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65811 { 730-767 } false (feature_value="it",monad_set=";m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65812 { 730-767 } false (feature_value="life",monad_set=";c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65813 { 730-767 } false (feature_value="so",monad_set=";o") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65814 { 730-767 } false (feature_value="that",monad_set=";[") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65815 { 730-767 } false (feature_value="there",monad_set=";a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65816 { 730-767 } false (feature_value="to",monad_set=";Ky7y7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65817 { 730-767 } false (feature_value="upon",monad_set=";]") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65818 { 730-767 } false (feature_value="was",monad_set=";n") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65819 { 730-767 } false (feature_value="wherein",monad_set=";`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65820 { 768-792 } false (feature_value="and",monad_set="<0y8y6y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65821 { 768-792 } false (feature_value="behold",monad_set="<9") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65822 { 768-792 } false (feature_value="day",monad_set="<H") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65823 { 768-792 } false (feature_value="evening",monad_set="<A") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65824 { 768-792 } false (feature_value="everything",monad_set="<3") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65825 { 768-792 } false (feature_value="god",monad_set="<1") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65826 { 768-792 } false (feature_value="good",monad_set="<=") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65827 { 768-792 } false (feature_value="had",monad_set="<6") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65828 { 768-792 } false (feature_value="he",monad_set="<5") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65829 { 768-792 } false (feature_value="it",monad_set="<:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65830 { 768-792 } false (feature_value="made",monad_set="<7") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65831 { 768-792 } false (feature_value="morning",monad_set="<E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65832 { 768-792 } false (feature_value="saw",monad_set="<2") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65833 { 768-792 } false (feature_value="sixth",monad_set="<G") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65834 { 768-792 } false (feature_value="that",monad_set="<4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65835 { 768-792 } false (feature_value="there",monad_set="<?y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65836 { 768-792 } false (feature_value="very",monad_set="<<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65837 { 768-792 } false (feature_value="was",monad_set="<;y5y4") //  <  > 
 ]
 > 
 > 
---- answer

++++ query selecting something specific from bookcase_verse_index_token_mdf_wholesurface_index
SELECT ALL OBJECTS 
WHERE 
[bookcase_verse_index_token_mdf_wholesurface_index
    feature_value = 'in'
    GET feature_value, monad_set
]
GO
++++ answer
 //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65336 { 8-17 } false (feature_value="in",monad_set="8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65388 { 96-118 } false (feature_value="in",monad_set="1X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65519 { 284-316 } false (feature_value="in",monad_set="4S") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65537 { 317-337 } false (feature_value="in",monad_set="53") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65569 { 365-379 } false (feature_value="in",monad_set="5a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65607 { 416-440 } false (feature_value="in",monad_set="6c") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65647 { 474-496 } false (feature_value="in",monad_set="7W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65715 { 571-620 } false (feature_value="in",monad_set="92") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65737 { 621-642 } false (feature_value="in",monad_set="9ay4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65783 { 689-729 } false (feature_value="in",monad_set=";9") //  <  > 
 ]
 > 
 > 
---- answer

++++ query selecting something based on more than one criterion
select all objects
where
[verse
 chapter = 1 and verse >= 3 and verse <= 11
 GET osisID
]
++++ answer
 //  <  < [ verse 33438 { 46-56 } false (osisID=" Gen.1.3 ") //  <  > 
 ]
 > 
 < [ verse 33439 { 57-73 } false (osisID=" Gen.1.4 ") //  <  > 
 ]
 > 
 < [ verse 33440 { 74-95 } false (osisID=" Gen.1.5 ") //  <  > 
 ]
 > 
 < [ verse 33441 { 96-118 } false (osisID=" Gen.1.6 ") //  <  > 
 ]
 > 
 < [ verse 33442 { 119-144 } false (osisID=" Gen.1.7 ") //  <  > 
 ]
 > 
 < [ verse 33443 { 145-161 } false (osisID=" Gen.1.8 ") //  <  > 
 ]
 > 
 < [ verse 33444 { 162-186 } false (osisID=" Gen.1.9 ") //  <  > 
 ]
 > 
 < [ verse 33445 { 187-210 } false (osisID=" Gen.1.10 ") //  <  > 
 ]
 > 
 < [ verse 33446 { 211-241 } false (osisID=" Gen.1.11 ") //  <  > 
 ]
 > 
 > 
---- answer

++++ query selecting a verse based on a single osisID
select all objects
where
[verse
 osisID = " Gen.1.23 "
 GET osisID, osisBook, chapter, verse
]
++++ answer
 //  <  < [ verse 33458 { 497-507 } false (osisID=" Gen.1.23 ",osisBook="Gen",chapter="1",verse="23") //  <  > 
 ]
 > 
 > 
---- answer

++++ query getting verses with monads in {100-150}
get objects having monads in { 100-150 }
[verse
 GET osisID, osisBook, chapter, verse
]
++++ answer
 // <  < [ verse 33441 { 96-118 } false (osisID=" Gen.1.6 ",osisBook="Gen",chapter="1",verse="6") //  <  > 
 ]
[ verse 33442 { 119-144 } false (osisID=" Gen.1.7 ",osisBook="Gen",chapter="1",verse="7") //  <  > 
 ]
[ verse 33443 { 145-161 } false (osisID=" Gen.1.8 ",osisBook="Gen",chapter="1",verse="8") //  <  > 
 ]
 > 
 >
---- answer

++++ query get objects having monads in {100-150} for chapter
get objects having monads in { 100-150 }
[chapter
 GET osisID, osisBook, chapter
]
++++ answer
 // <  < [ chapter 1778 { 8-792 } false (osisID="Gen.1",osisBook="Gen",chapter="1") //  <  > 
 ]
 > 
 >
---- answer

++++ query get objects having monads in {6-150} for chapter
get objects having monads in { 6-150 }
[chapter
 GET osisID, osisBook, chapter
]
++++ answer
 // <  < [ chapter 1778 { 8-792 } false (osisID="Gen.1",osisBook="Gen",chapter="1") //  <  > 
 ]
 > 
 >
---- answer

++++ query get objects having monads in {1} for chapter
get objects having monads in { 1 }
[chapter
 GET osisID, osisBook, chapter
]
++++ answer
 // <  <  > 
 >
---- answer

++++ query get objects having monads in {10000} for chapter
get objects having monads in { 10000 }
[chapter
 GET osisID, osisBook, chapter
]
++++ answer
 // <  <  > 
 >
---- answer

++++ query get objects having monads in {8} for chapter
get objects having monads in { 8 }
[chapter
 GET osisID, osisBook, chapter
]
++++ answer
 // <  < [ chapter 1778 { 8-792 } false (osisID="Gen.1",osisBook="Gen",chapter="1") //  <  > 
 ]
 > 
 >
---- answer

++++ query SELECT MAX_M
select max_m go
++++ answer
+-----------------+
| max_m : monad_m |
+-----------------+
| 792             |
+-----------------+
---- answer

++++ query SELECT MIN_M
select min_m go
++++ answer
+-----------------+
| min_m : monad_m |
+-----------------+
| 1               |
+-----------------+
---- answer

++++ query selecting [chapter[verse[token]]]
select all objects
where
[chapter
 [verse verse >= 5 and verse <= 8
   [token GET wholesurface]
 ]
]
GO
++++ answer
 //  <  < [ chapter 1778 { 8-792 } false  //  <  < [ verse 33440 { 74-95 } false  //  <  < [ token 64611 { 74 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 64612 { 75 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 64613 { 76 } false (wholesurface="called ") //  <  > 
 ]
 > 
 < [ token 64614 { 77 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64615 { 78 } false (wholesurface="light ") //  <  > 
 ]
 > 
 < [ token 64616 { 79 } false (wholesurface="Day, ") //  <  > 
 ]
 > 
 < [ token 64617 { 80 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 64618 { 81 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64619 { 82 } false (wholesurface="darkness ") //  <  > 
 ]
 > 
 < [ token 64620 { 83 } false (wholesurface="he ") //  <  > 
 ]
 > 
 < [ token 64621 { 84 } false (wholesurface="called ") //  <  > 
 ]
 > 
 < [ token 64622 { 85 } false (wholesurface="Night. ") //  <  > 
 ]
 > 
 < [ token 64623 { 86 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 64624 { 87 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 64625 { 88 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 64626 { 89 } false (wholesurface="evening ") //  <  > 
 ]
 > 
 < [ token 64627 { 90 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 64628 { 91 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 64629 { 92 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 64630 { 93 } false (wholesurface="morning, ") //  <  > 
 ]
 > 
 < [ token 64631 { 94 } false (wholesurface="one ") //  <  > 
 ]
 > 
 < [ token 64632 { 95 } false (wholesurface="day. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33441 { 96-118 } false  //  <  < [ token 64633 { 96 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 64634 { 97 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 64635 { 98 } false (wholesurface="said, ") //  <  > 
 ]
 > 
 < [ token 64636 { 99 } false (wholesurface="Let ") //  <  > 
 ]
 > 
 < [ token 64637 { 100 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 64638 { 101 } false (wholesurface="be ") //  <  > 
 ]
 > 
 < [ token 64639 { 102 } false (wholesurface="a ") //  <  > 
 ]
 > 
 < [ token 64640 { 103 } false (wholesurface="firmament ") //  <  > 
 ]
 > 
 < [ token 64641 { 104 } false (wholesurface="in ") //  <  > 
 ]
 > 
 < [ token 64642 { 105 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64643 { 106 } false (wholesurface="midst ") //  <  > 
 ]
 > 
 < [ token 64644 { 107 } false (wholesurface="of ") //  <  > 
 ]
 > 
 < [ token 64645 { 108 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64646 { 109 } false (wholesurface="waters, ") //  <  > 
 ]
 > 
 < [ token 64647 { 110 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 64648 { 111 } false (wholesurface="let ") //  <  > 
 ]
 > 
 < [ token 64649 { 112 } false (wholesurface="it ") //  <  > 
 ]
 > 
 < [ token 64650 { 113 } false (wholesurface="divide ") //  <  > 
 ]
 > 
 < [ token 64651 { 114 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64652 { 115 } false (wholesurface="waters ") //  <  > 
 ]
 > 
 < [ token 64653 { 116 } false (wholesurface="from ") //  <  > 
 ]
 > 
 < [ token 64654 { 117 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64655 { 118 } false (wholesurface="waters. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33442 { 119-144 } false  //  <  < [ token 64656 { 119 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 64657 { 120 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 64658 { 121 } false (wholesurface="made ") //  <  > 
 ]
 > 
 < [ token 64659 { 122 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64660 { 123 } false (wholesurface="firmament, ") //  <  > 
 ]
 > 
 < [ token 64661 { 124 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 64662 { 125 } false (wholesurface="divided ") //  <  > 
 ]
 > 
 < [ token 64663 { 126 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64664 { 127 } false (wholesurface="waters ") //  <  > 
 ]
 > 
 < [ token 64665 { 128 } false (wholesurface="which ") //  <  > 
 ]
 > 
 < [ token 64666 { 129 } false (wholesurface="were ") //  <  > 
 ]
 > 
 < [ token 64667 { 130 } false (wholesurface="under ") //  <  > 
 ]
 > 
 < [ token 64668 { 131 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64669 { 132 } false (wholesurface="firmament ") //  <  > 
 ]
 > 
 < [ token 64670 { 133 } false (wholesurface="from ") //  <  > 
 ]
 > 
 < [ token 64671 { 134 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64672 { 135 } false (wholesurface="waters ") //  <  > 
 ]
 > 
 < [ token 64673 { 136 } false (wholesurface="which ") //  <  > 
 ]
 > 
 < [ token 64674 { 137 } false (wholesurface="were ") //  <  > 
 ]
 > 
 < [ token 64675 { 138 } false (wholesurface="above ") //  <  > 
 ]
 > 
 < [ token 64676 { 139 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64677 { 140 } false (wholesurface="firmament: ") //  <  > 
 ]
 > 
 < [ token 64678 { 141 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 64679 { 142 } false (wholesurface="it ") //  <  > 
 ]
 > 
 < [ token 64680 { 143 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 64681 { 144 } false (wholesurface="so. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33443 { 145-161 } false  //  <  < [ token 64682 { 145 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 64683 { 146 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 64684 { 147 } false (wholesurface="called ") //  <  > 
 ]
 > 
 < [ token 64685 { 148 } false (wholesurface="the ") //  <  > 
 ]
 > 
 < [ token 64686 { 149 } false (wholesurface="firmament ") //  <  > 
 ]
 > 
 < [ token 64687 { 150 } false (wholesurface="Heaven. ") //  <  > 
 ]
 > 
 < [ token 64688 { 151 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 64689 { 152 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 64690 { 153 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 64691 { 154 } false (wholesurface="evening ") //  <  > 
 ]
 > 
 < [ token 64692 { 155 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 64693 { 156 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 64694 { 157 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 64695 { 158 } false (wholesurface="morning, ") //  <  > 
 ]
 > 
 < [ token 64696 { 159 } false (wholesurface="a ") //  <  > 
 ]
 > 
 < [ token 64697 { 160 } false (wholesurface="second ") //  <  > 
 ]
 > 
 < [ token 64698 { 161 } false (wholesurface="day. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query selecting [chapter[verse[bookcase_verse_index_token_mdf_wholesurface_index]]]
select all objects
where
[chapter
 [verse verse >= 5 and verse <= 8
   [bookcase_verse_index_token_mdf_wholesurface_index GET feature_value, monad_set]
 ]
]
GO
++++ answer
 //  <  < [ chapter 1778 { 8-792 } false  //  <  < [ verse 33440 { 74-95 } false  //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65369 { 74-95 } false (feature_value="and",monad_set="1:y6y6y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65370 { 74-95 } false (feature_value="called",monad_set="1<y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65371 { 74-95 } false (feature_value="darkness",monad_set="1B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65372 { 74-95 } false (feature_value="day",monad_set="1?y@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65373 { 74-95 } false (feature_value="evening",monad_set="1I") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65374 { 74-95 } false (feature_value="god",monad_set="1;") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65375 { 74-95 } false (feature_value="he",monad_set="1C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65376 { 74-95 } false (feature_value="light",monad_set="1>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65377 { 74-95 } false (feature_value="morning",monad_set="1M") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65378 { 74-95 } false (feature_value="night",monad_set="1E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65379 { 74-95 } false (feature_value="one",monad_set="1N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65380 { 74-95 } false (feature_value="there",monad_set="1Gy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65381 { 74-95 } false (feature_value="was",monad_set="1Hy4") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33441 { 96-118 } false  //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65382 { 96-118 } false (feature_value="and",monad_set="1Py>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65383 { 96-118 } false (feature_value="be",monad_set="1U") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65384 { 96-118 } false (feature_value="divide",monad_set="1a") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65385 { 96-118 } false (feature_value="firmament",monad_set="1W") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65386 { 96-118 } false (feature_value="from",monad_set="1d") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65387 { 96-118 } false (feature_value="god",monad_set="1Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65388 { 96-118 } false (feature_value="in",monad_set="1X") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65389 { 96-118 } false (feature_value="it",monad_set="1`") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65390 { 96-118 } false (feature_value="let",monad_set="1Sy<") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65391 { 96-118 } false (feature_value="midst",monad_set="1Z") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65392 { 96-118 } false (feature_value="said",monad_set="1R") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65393 { 96-118 } false (feature_value="there",monad_set="1T") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65394 { 96-118 } false (feature_value="waters",monad_set="1]y6y3") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33442 { 119-144 } false  //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65395 { 119-144 } false (feature_value="above",monad_set="2:") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65396 { 119-144 } false (feature_value="and",monad_set="1gy5yA") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65397 { 119-144 } false (feature_value="divided",monad_set="1m") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65398 { 119-144 } false (feature_value="firmament",monad_set="1ky9y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65399 { 119-144 } false (feature_value="from",monad_set="25") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65400 { 119-144 } false (feature_value="god",monad_set="1h") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65401 { 119-144 } false (feature_value="it",monad_set="2>") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65402 { 119-144 } false (feature_value="made",monad_set="1i") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65403 { 119-144 } false (feature_value="so",monad_set="2@") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65404 { 119-144 } false (feature_value="under",monad_set="22") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65405 { 119-144 } false (feature_value="was",monad_set="2?") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65406 { 119-144 } false (feature_value="waters",monad_set="1oy8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65407 { 119-144 } false (feature_value="were",monad_set="21y8") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65408 { 119-144 } false (feature_value="which",monad_set="20y8") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33443 { 145-161 } false  //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65409 { 145-161 } false (feature_value="and",monad_set="2Ay6y4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65410 { 145-161 } false (feature_value="called",monad_set="2C") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65411 { 145-161 } false (feature_value="day",monad_set="2Q") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65412 { 145-161 } false (feature_value="evening",monad_set="2J") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65413 { 145-161 } false (feature_value="firmament",monad_set="2E") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65414 { 145-161 } false (feature_value="god",monad_set="2B") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65415 { 145-161 } false (feature_value="heaven",monad_set="2F") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65416 { 145-161 } false (feature_value="morning",monad_set="2N") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65417 { 145-161 } false (feature_value="second",monad_set="2P") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65418 { 145-161 } false (feature_value="there",monad_set="2Hy4") //  <  > 
 ]
 > 
 < [ bookcase_verse_index_token_mdf_wholesurface_index 65419 { 145-161 } false (feature_value="was",monad_set="2Iy4") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query selecting 'the' from bookcase_verse_index_token_mdf_wholesurface_index
SELECT ALL OBJECTS 
WHERE 
[bookcase_verse_index_token_mdf_wholesurface_index
    feature_value = 'the'
    GET feature_value, monad_set
]
GO
++++ answer
 // 
---- answer

++++ query selecting 'day' from bookcase_verse_index_token_mdf_wholesurface_index
SELECT ALL OBJECTS 
WHERE 
[verse GET osisID
  [bookcase_verse_index_token_mdf_wholesurface_index
      feature_value = 'day'
      GET feature_value, monad_set
  ]
]
GO
++++ answer
 //  <  < [ verse 33440 { 74-95 } false (osisID=" Gen.1.5 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65372 { 74-95 } false (feature_value="day",monad_set="1?y@") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33443 { 145-161 } false (osisID=" Gen.1.8 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65411 { 145-161 } false (feature_value="day",monad_set="2Q") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33448 { 273-283 } false (osisID=" Gen.1.13 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65503 { 273-283 } false (feature_value="day",monad_set="4K") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33449 { 284-316 } false (osisID=" Gen.1.14 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65511 { 284-316 } false (feature_value="day",monad_set="4[") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33451 { 338-364 } false (osisID=" Gen.1.16 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65549 { 338-364 } false (feature_value="day",monad_set="5O") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33453 { 380-404 } false (osisID=" Gen.1.18 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65577 { 380-404 } false (feature_value="day",monad_set="61") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33454 { 405-415 } false (osisID=" Gen.1.19 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65592 { 405-415 } false (feature_value="day",monad_set="6O") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33458 { 497-507 } false (osisID=" Gen.1.23 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65656 { 497-507 } false (feature_value="day",monad_set="7k") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 33466 { 768-792 } false (osisID=" Gen.1.31 ") //  <  < [ bookcase_verse_index_token_mdf_wholesurface_index 65822 { 768-792 } false (feature_value="day",monad_set="<H") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query newdb CREATING Token object type
CREATE ENUMERATION boolean_t = {
   false = 0,
   true
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
[Token
	surface : STRING DEFAULT "boo";
	surface_set : STRING FROM SET DEFAULT "blof";
	surface_a : ASCII DEFAULT "blah";
	surface_a_set : STRING FROM SET DEFAULT "baf";
	myint : INTEGER DEFAULT -1;
	myint2 : INTEGER DEFAULT 2;
	boolean : boolean_t;
	bool_list : LIST OF BOOLEAN_T;
	Parent : id_d;
	Parents : LIST OF ID_D;
]
GO

CREATE OBJECTS WITH OBJECT TYPE [Token]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
	parents := (1,1);
	parent := 1;
	bool_list := (false, true);
	boolean := true;
	myint2 := 3;
	myint := 4;
	surface_a_set := "";
	surface_a := "";
	surface_set := "b";
	surface := "b";
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
	parents := (2,1);
	parent := 2;
	bool_list := (true);
	boolean := true;
	surface_a_set := "c";
	surface_a := "d";
	surface_set := "a";
	surface := "f";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer

++++ dumpdb

++++ query querying just created tokens
GET OBJECTS HAVING MONADS IN {1-3}[Token GET ALL] GO
++++ answer
 // <  < [ Token 1 { 1 } false (parents="",parent="0",bool_list="",boolean="false",myint2="2",myint="-1",surface_a_set="baf",surface_a="blah",surface_set="blof",surface="boo",self="1") //  <  > 
 ]
[ Token 2 { 2 } false (parents=" 1 1 ",parent="1",bool_list=" false true ",boolean="true",myint2="3",myint="4",surface_a_set="",surface_a="",surface_set="b",surface="b",self="2") //  <  > 
 ]
[ Token 3 { 3 } false (parents=" 2 1 ",parent="2",bool_list=" true ",boolean="true",myint2="2",myint="-1",surface_a_set="c",surface_a="d",surface_set="a",surface="f",self="3") //  <  > 
 ]
 > 
 >
---- answer

++++ query newdb creating realistic DB schema
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Clause]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph]
GO
++++ answer
---- answer
++++ query nobpt creating realistic Word objects
CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[
   surface :="The";
   pos := def_article;
   parent := 10;
   lemma := "the";
   parents := (10,17,20,22,23);
   magic := 2;
]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
   surface :="door,";
   pos := noun;
   parent := 10;
   lemma := "door";
   parents := (10,17,20,22,23);
   magic := 1;
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
   surface :="which";
   pos := relative_pronoun;
   parent := 11;
   lemma := "which";
   parents := (11,18,21,22,23);
   magic := 3;
]
CREATE OBJECT FROM MONADS = {4}
WITH ID_D = 4
[
   surface :="opened";
   pos := verb;
   parent := 12;
   lemma := "open";
   parents := (12,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {5}
WITH ID_D = 5
[
   surface :="towards";
   pos := preposition;
   parent := 13;
   lemma := "towards";
   parents := (13,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {6}
WITH ID_D = 6
[
   surface :="the";
   pos := def_article;
   parent := 14;
   lemma := "the";
   parents := (14,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {7}
WITH ID_D = 7
[
   surface :="East,";
   pos := noun;
   parent := 14;
   lemma := "east";
   parents := (14,18,21,22,23);
   magic := 9;
]
CREATE OBJECT FROM MONADS = {8}
WITH ID_D = 8
[
   surface :="was";
   pos := verb;
   parent := 15;
   lemma := "be";
   parents := (15,19,20,22,23);
   magic := 6;
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 9
[
   surface :="blue.";
   pos := adjective;
   parent := 16;
   lemma := "blue";
   parents := (16,19,20,22,23);
   magic := 11;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 9                      |
+------------------------+
---- answer
++++ query nobpt creating realistic Phrase objects
CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 10
[
  phrase_type := NP;
  phrase_function := (Subj);
]
CREATE OBJECT FROM MONADS = {3-3}
WITH ID_D = 11
[
  phrase_type := NP;
  phrase_function := (Rela,Subj);
]
CREATE OBJECT FROM MONADS = {4-4}
WITH ID_D = 12
[
  phrase_type := VP;
  phrase_function := (Pred);
]
CREATE OBJECT FROM MONADS = {6-7}
WITH ID_D = 14
[
  phrase_type := NP;
  phrase_function := (NA);
]
CREATE OBJECT FROM MONADS = {5-7}
WITH ID_D = 13
[
  phrase_type := PP;
  phrase_function := (Loca);
]
CREATE OBJECT FROM MONADS = {8-8}
WITH ID_D = 15
[
  phrase_type := VP;
  phrase_function := (PreC);
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 16
[
  phrase_type := AP;
  phrase_function := (Attr);
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 7                      |
+------------------------+
---- answer
++++ query nobpt creating realistic Clause_atom objects
CREATE OBJECTS WITH OBJECT TYPE [Clause_atom]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 17
[]
CREATE OBJECT FROM MONADS = {3-7}
WITH ID_D = 18
[]
CREATE OBJECT FROM MONADS = {8-9}
WITH ID_D = 19
[]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer
++++ query nobpt creating realistic Clause objects
CREATE OBJECTS WITH OBJECT TYPE [Clause]
CREATE OBJECT FROM MONADS = {1-2,8-9}
WITH ID_D = 20
[]
CREATE OBJECT FROM MONADS = {3-7}
WITH ID_D = 21
[]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 2                      |
+------------------------+
---- answer
++++ query nobpt creating realistic Sentence object
CREATE OBJECT FROM MONADS = {1-9}
WITH ID_D = 22
[Sentence]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 22          |
+-------------+
---- answer
++++ query nobpt creating realistic Paragraph object
CREATE OBJECT FROM MONADS = {1-9}
WITH ID_D = 23
[Paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 23          |
+-------------+
---- answer

++++ dumpdb

++++ query GET OBJECTS HAVING MOANDS IN from single monad objects 'Word' with GET monads, self, monads, self
GET OBJECTS HAVING MONADS IN {2-100}
[Word GET monads, self, monads, self]
GO
++++ answer
 // <  < [ Word 2 { 2 } false (monads=" { 2 } ",self="2",monads=" { 2 } ",self="2") //  <  > 
 ]
[ Word 3 { 3 } false (monads=" { 3 } ",self="3",monads=" { 3 } ",self="3") //  <  > 
 ]
[ Word 4 { 4 } false (monads=" { 4 } ",self="4",monads=" { 4 } ",self="4") //  <  > 
 ]
[ Word 5 { 5 } false (monads=" { 5 } ",self="5",monads=" { 5 } ",self="5") //  <  > 
 ]
[ Word 6 { 6 } false (monads=" { 6 } ",self="6",monads=" { 6 } ",self="6") //  <  > 
 ]
[ Word 7 { 7 } false (monads=" { 7 } ",self="7",monads=" { 7 } ",self="7") //  <  > 
 ]
[ Word 8 { 8 } false (monads=" { 8 } ",self="8",monads=" { 8 } ",self="8") //  <  > 
 ]
[ Word 9 { 9 } false (monads=" { 9 } ",self="9",monads=" { 9 } ",self="9") //  <  > 
 ]
 > 
 >
---- answer

++++ query GET OBJECTS HAVING MOANDS IN from single range objects 'Paragraph' with GET monads, self, monads, self
GET OBJECTS HAVING MONADS IN {2-100}
[Paragraph GET monads, self, monads, self]
GO
++++ answer
 // <  < [ Paragraph 23 { 1-9 } false (monads=" { 1-9 } ",self="23",monads=" { 1-9 } ",self="23") //  <  > 
 ]
 > 
 >
---- answer

++++ query GET OBJECTS HAVING MOANDS IN from single range objects 'Clause' with GET monads, self, monads, self
GET OBJECTS HAVING MONADS IN {2-100}
[Clause GET monads, self, monads, self]
GO
++++ answer
 // <  < [ Clause 20 { 1-2, 8-9 } false (monads=" { 1-2, 8-9 } ",self="20",monads=" { 1-2, 8-9 } ",self="20") //  <  > 
 ]
[ Clause 21 { 3-7 } false (monads=" { 3-7 } ",self="21",monads=" { 3-7 } ",self="21") //  <  > 
 ]
 > 
 >
---- answer

++++ query SELECT ALL OBJECTS IN from simple range objects 'Word' with GET monads, self, monads, self
SELECT ALL OBJECTS 
IN {1-100}
WHERE
[Word GET monads, self, monads, self]
GO
++++ answer
 //  <  < [ word 1 { 1 } false (monads=" { 1 } ",self="1",monads=" { 1 } ",self="1") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (monads=" { 2 } ",self="2",monads=" { 2 } ",self="2") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (monads=" { 3 } ",self="3",monads=" { 3 } ",self="3") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (monads=" { 4 } ",self="4",monads=" { 4 } ",self="4") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (monads=" { 5 } ",self="5",monads=" { 5 } ",self="5") //  <  > 
 ]
 > 
 < [ word 6 { 6 } false (monads=" { 6 } ",self="6",monads=" { 6 } ",self="6") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (monads=" { 7 } ",self="7",monads=" { 7 } ",self="7") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (monads=" { 8 } ",self="8",monads=" { 8 } ",self="8") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (monads=" { 9 } ",self="9",monads=" { 9 } ",self="9") //  <  > 
 ]
 > 
 > 
---- answer


++++ query SELECT ALL OBJECTS IN from simple range objects 'Paragraph' with GET monads, self, monads, self
SELECT ALL OBJECTS
IN {1-100}
WHERE
[Paragraph GET monads, self, monads, self]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false (monads=" { 1-9 } ",self="23",monads=" { 1-9 } ",self="23") //  <  > 
 ]
 > 
 > 
---- answer


++++ query SELECT ALL OBJECTS IN from multiple range objects 'Clause' with GET monads, self, monads, self
SELECT ALL OBJECTS
IN {1-100}
WHERE
[Clause GET monads, self, monads, self]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false (monads=" { 1-2, 8-9 } ",self="20",monads=" { 1-2, 8-9 } ",self="20") //  <  > 
 ]
 > 
 < [ clause 21 { 3-7 } false (monads=" { 3-7 } ",self="21",monads=" { 3-7 } ",self="21") //  <  > 
 ]
 > 
 > 
---- answer

++++ query selecting object types
SELECT OBJECT TYPES GO
++++ answer
+----------------------+
| object type : string |
+----------------------+
| word                 |
| phrase               |
| clause_atom          |
| clause               |
| sentence             |
| paragraph            |
+----------------------+
---- answer

++++ query selecting features from object type
SELECT FEATURES FROM OBJECT TYPE [Token] GO
++++ answer failcompiler
Symbolchecking failed with compiler error
---- answer

++++ query selecting features from object type
SELECT FEATURES FROM OBJECT TYPE [Word] GO
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| magic                 | integer       | '42'             | false           |
| parents               | list of id_d  | ''               | false           |
| lemma                 | string        | ''               | false           |
| parent                | id_d          | '0'              | false           |
| pos                   | pos_t         | 'def_article'    | false           |
| surface               | string        | ''               | false           |
| self                  | id_d          | '0'              | true            |
+-----------------------+---------------+------------------+-----------------+
---- answer

++++ query selecting enumerations
SELECT ENUMERATIONS GO
++++ answer
+--------------------+
| enum name : string |
+--------------------+
| pos_t              |
| phrase_type_t      |
| phrase_function_t  |
+--------------------+
---- answer

++++ query selecting enumeration constants
SELECT ENUMERATION CONSTANTS 
FROM ENUMERATION phrase_types_t 
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration phrase_types_t did not exist.
---- answer

++++ query selecting enumeration constants
SELECT ENUMERATION CONSTANTS 
FROM ENUMERATION phrase_type_t 
GO
++++ answer
+---------------------+-----------------+----------------+
| enum const : string | value : integer | default : bool |
+---------------------+-----------------+----------------+
| AP                  | 4               | false          |
| NP                  | 1               | true           |
| PP                  | 3               | false          |
| VP                  | 2               | false          |
+---------------------+-----------------+----------------+
---- answer

#++++ query selecting object types using enumerations
#SELECT OBJECT TYPES 
#USING ENUMERATION pos_t GO
#++++ answer
#+---------------------------+
#| object type name : string |
#+---------------------------+
#| word                      |
#+---------------------------+
#---- answer

++++ query selecting min_m
SELECT min_m GO
++++ answer
+-----------------+
| min_m : monad_m |
+-----------------+
| 1               |
+-----------------+
---- answer

++++ query selecting max_m
SELECT max_m GO
++++ answer
+-----------------+
| max_m : monad_m |
+-----------------+
| 9               |
+-----------------+
---- answer

++++ query selecting monad sets when there are none
SELECT MONAD SETS GO
++++ answer
+-------------------------+
| monad_set_name : string |
+-------------------------+
+-------------------------+
---- answer

++++ query getting monad sets when there are none
GET MONAD SETS ALL GO
++++ answer
+-------------------------+---------------------+--------------------+
| monad_set_name : string | mse_first : monad_m | mse_last : monad_m |
+-------------------------+---------------------+--------------------+
+-------------------------+---------------------+--------------------+
---- answer

#++++ query getting monads from clause object with id_ds
#GET MONADS FROM OBJECTS
#WITH ID_DS = 20, 21
#[Clause]
#GO
#++++ answer
#+--------------------+---------------------+--------------------+
#| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
#+--------------------+---------------------+--------------------+
#| 20                 | 1                   | 2                  |
#| 20                 | 8                   | 9                  |
#| 21                 | 3                   | 7                  |
#+--------------------+---------------------+--------------------+
#---- answer

#++++ query getting monads from phrase object with id_ds
#GET MONADS FROM OBJECTS
#WITH ID_DS = 10, 13, 14, 15, 16
#[Phrase]
#GO
#++++ answer
#+--------------------+---------------------+--------------------+
#| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
#+--------------------+---------------------+--------------------+
#| 10                 | 1                   | 2                  |
#| 13                 | 5                   | 7                  |
#| 14                 | 6                   | 7                  |
#| 15                 | 8                   | 8                  |
#| 16                 | 9                   | 9                  |
#+--------------------+---------------------+--------------------+
#---- answer

#++++ query getting monads from word object with id_ds
#GET MONADS FROM OBJECTS
#WITH ID_DS = 1, 3, 4, 7, 9
#[Word]
#GO
#++++ answer
#+--------------------+---------------------+--------------------+
#| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
#+--------------------+---------------------+--------------------+
#| 1                  | 1                   | 1                  |
#| 3                  | 3                   | 3                  |
#| 4                  | 4                   | 4                  |
#| 7                  | 7                   | 7                  |
#| 9                  | 9                   | 9                  |
#+--------------------+---------------------+--------------------+
#---- answer

#++++ query getting monads from sentence object with id_ds
#GET MONADS FROM OBJECTS
#WITH ID_DS = 22
#[Sentence]
#GO
#++++ answer
#+--------------------+---------------------+--------------------+
#| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
#+--------------------+---------------------+--------------------+
#| 22                 | 1                   | 9                  |
#+--------------------+---------------------+--------------------+
#---- answer

#++++ query getting monads from paragraph object with id_ds
#GET MONADS FROM OBJECTS
#WITH ID_DS = 23
#[Paragraph]
#GO
#++++ answer
#+--------------------+---------------------+--------------------+
#| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
#+--------------------+---------------------+--------------------+
#| 23                 | 1                   | 9                  |
#+--------------------+---------------------+--------------------+
#---- answer

#++++ query getting features from word object 1
#GET FEATURES surface, pos, parent
#FROM OBJECTS WITH ID_DS = 2,5
#[Word]
#GO
#++++ answer
#+-------------+------------------+-------------------+---------------+
#| id_d : id_d | surface : string | pos : enum(pos_t) | parent : id_d |
#+-------------+------------------+-------------------+---------------+
#| 2           | door,            | noun              | 10            |
#| 5           | towards          | preposition       | 13            |
#+-------------+------------------+-------------------+---------------+
#---- answer

#++++ query getting features from word object 2
#GET FEATURES surface, pos, parent
#FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
#[Word]
#GO
#++++ answer
#+-------------+------------------+-------------------+---------------+
#| id_d : id_d | surface : string | pos : enum(pos_t) | parent : id_d |
#+-------------+------------------+-------------------+---------------+
#| 1           | The              | def_article       | 10            |
#| 2           | door,            | noun              | 10            |
#| 3           | which            | relative_pronoun  | 11            |
#| 4           | opened           | verb              | 12            |
#+-------------+------------------+-------------------+---------------+
#---- answer

#++++ query getting features from word object 2.1
#GET FEATURES surface, pos, parent
#FROM OBJECTS WITH ID_DS = 4,3,3,2,2,2,2,1
#[Word]
#GO
#++++ answer
#+-------------+------------------+-------------------+---------------+
#| id_d : id_d | surface : string | pos : enum(pos_t) | parent : id_d |
#+-------------+------------------+-------------------+---------------+
#| 1           | The              | def_article       | 10            |
#| 2           | door,            | noun              | 10            |
#| 3           | which            | relative_pronoun  | 11            |
#| 4           | opened           | verb              | 12            |
#+-------------+------------------+-------------------+---------------+
#---- answer

#++++ query getting features from word object 3
#GET FEATURES parent, pos
#FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
#[Word]
#GO
#++++ answer
#+-------------+---------------+-------------------+
#| id_d : id_d | parent : id_d | pos : enum(pos_t) |
#+-------------+---------------+-------------------+
#| 1           | 10            | def_article       |
#| 2           | 10            | noun              |
#| 3           | 11            | relative_pronoun  |
#| 4           | 12            | verb              |
#+-------------+---------------+-------------------+
#---- answer

#++++ query getting features from word object 4
#GET FEATURES parent, sploinks
#FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
#[Word]
#GO
#++++ answer failcompiler
#Symbolchecking failed with compiler error
#Feature 'sploinks' does not exist for the given object type.
#---- answer

#++++ query getting features from word object 4.5
#GET FEATURES parent,lemma
#FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
#[Word]
#GO
#++++ answer
#+-------------+---------------+----------------+
#| id_d : id_d | parent : id_d | lemma : string |
#+-------------+---------------+----------------+
#| 1           | 10            | the            |
#| 2           | 10            | door           |
#| 3           | 11            | which          |
#| 4           | 12            | open           |
#+-------------+---------------+----------------+
#---- answer

#++++ query getting features from word object 5
#GET FEATURES parent, surface
#FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
#[Sploinks]
#GO
#++++ answer failcompiler
#Symbolchecking failed with compiler error
#Object type name 'Sploinks' does not exist.
#---- answer

#++++ query getting string set from word.surface
#GET SET FROM FEATURE surface
#[word]
#GO
#++++ answer   
#+----------------+
#| value : string |
#+----------------+
#| The            |
#| door,          |
#| which          |
#| opened         |
#| towards        |
#| the            |
#| East,          |
#| was            |
#| blue.          |
#+----------------+
#---- answer

#++++ query getting string set from word.lemma
#GET SET FROM FEATURE lemma
#[word]
#GO
#++++ answer   
#+----------------+
#| value : string |
#+----------------+
#| the            |
#| door           |
#| which          |
#| open           |
#| towards        |
#| east           |
#| be             |
#| blue           |
#+----------------+
---- answer

++++ query selecting all objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[ALL]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| word                      | 1                 | 1           |
| word                      | 2                 | 2           |
| word                      | 6                 | 6           |
| word                      | 7                 | 7           |
| phrase                    | 1                 | 10          |
| phrase                    | 6                 | 13          |
| phrase                    | 6                 | 14          |
| clause_atom               | 1                 | 17          |
| clause_atom               | 6                 | 18          |
| clause                    | 1                 | 20          |
| clause                    | 6                 | 21          |
| sentence                  | 1                 | 22          |
| paragraph                 | 1                 | 23          |
+---------------------------+-------------------+-------------+
---- answer

++++ query selecting word objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[word]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| word                      | 1                 | 1           |
| word                      | 2                 | 2           |
| word                      | 6                 | 6           |
| word                      | 7                 | 7           |
+---------------------------+-------------------+-------------+
---- answer

++++ query selecting phrase objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[phrase]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| phrase                    | 1                 | 10          |
| phrase                    | 6                 | 13          |
| phrase                    | 6                 | 14          |
+---------------------------+-------------------+-------------+
---- answer

++++ query selecting clause_atom objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[clause_atom]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| clause_atom               | 1                 | 17          |
| clause_atom               | 6                 | 18          |
+---------------------------+-------------------+-------------+
---- answer

++++ query selecting clause objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[clause]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| clause                    | 1                 | 20          |
| clause                    | 6                 | 21          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting sentence objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[sentence]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| sentence                  | 1                 | 22          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting paragraph objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[paragraph]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| paragraph                 | 1                 | 23          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting word objects at
SELECT OBJECTS AT MONAD = 7
[word]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 7           |
+-------------+
---- answer
++++ query selecting phrase objects at 1
SELECT OBJECTS AT MONAD = 7
[phrase]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer
++++ query selecting phrase objects at 2
SELECT OBJECTS AT MONAD = 1
[phrase]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
+-------------+
---- answer
++++ query selecting clause objects at
SELECT OBJECTS AT MONAD = 1
[clause]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 20          |
+-------------+
---- answer
++++ query selecting clause_atom objects at
SELECT OBJECTS AT MONAD = 1
[clause_atom]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 17          |
+-------------+
---- answer
++++ query selecting sentence objects at
SELECT OBJECTS AT MONAD = 1
[sentence]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 22          |
+-------------+
---- answer
++++ query selecting paragraph objects at
SELECT OBJECTS AT MONAD = 1
[paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 23          |
+-------------+
---- answer
++++ query selecting objects having monads in: all
SELECT OBJECTS HAVING MONADS IN {1-2, 4-7}
[ALL]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| word                      | 1                 | 1           |
| word                      | 2                 | 2           |
| word                      | 4                 | 4           |
| word                      | 5                 | 5           |
| word                      | 6                 | 6           |
| word                      | 7                 | 7           |
| phrase                    | 1                 | 10          |
| phrase                    | 4                 | 12          |
| phrase                    | 5                 | 13          |
| phrase                    | 6                 | 14          |
| clause_atom               | 1                 | 17          |
| clause_atom               | 4                 | 18          |
| clause                    | 1                 | 20          |
| clause                    | 4                 | 21          |
| sentence                  | 1                 | 22          |
| paragraph                 | 1                 | 23          |
+---------------------------+-------------------+-------------+
---- answer
########################################################################
########################################################################
###
### Here ends the first batch of "realistic database" queries.
###
### What apears below are some SELECT ALL OBJECTS statements on this db.
###
########################################################################
########################################################################
++++ query topographic query on realistic db number 1
SELECT ALL OBJECTS
WHERE
[Paragraph
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 1.1
SELECT ALL OBJECTS
WHERE
[Paragraph
  [word]*
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
#
++++ query topographic query on realistic db number 1.2
SELECT ALL OBJECTS
WHERE
[Paragraph
  [word pos=def_article]
  [word]*{1,3}
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 1.3
SELECT ALL OBJECTS
WHERE
[Paragraph
  [word pos=def_article]
  [word]*{0-1}
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 2
SELECT ALL OBJECTS
WHERE
[Sentence
]
GO
++++ answer
 //  <  < [ sentence 22 { 1-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 2.1
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.1.1
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap? retrieve]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.1.2
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap focus]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.1.3
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap? focus]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.2
SELECT ALL OBJECTS
WHERE
[Sentence
  [Clause
     [gap? retrieve
        [clause_atom]
     ]
  ]
]
GO
++++ answer
 //  <  < [ sentence 22 { 1-9 } false  //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ pow_m { 3-7 } false  //  <  < [ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 3
SELECT ALL OBJECTS
WHERE
[Clause
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.1
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
      [phrase first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.1.1
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
      [phrase first phrase_function = Rela]
   ]
]
GO
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with an enumeration constant, but the comparison operator is not HAS, as it should be.
---- answer
++++ query topographic query on realistic db number 3.1.2
SELECT ALL OBJECTS
WHERE
[Clause
   [gap retrieve
      [phrase first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ pow_m { 3-7 } false  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.2
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
      [phrase phrase_type=NP]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.3
SELECT ALL OBJECTS
WHERE
[Clause_atom
   [gap]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.4
SELECT ALL OBJECTS
WHERE
[Clause_atom
   [gap?]
]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 < [ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 3.5
SELECT ALL OBJECTS
WHERE
[Phrase
   [word lemma = "DoesNotExist"]
   [word lemma = "AlsoDoesNotExist"]
   OR
   [Word lemma = "CertainlyDoesNotExist"]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.6
SELECT ALL OBJECTS
WHERE
[Phrase
   [word lemma = "DoesNotExist"]
   [word lemma = "AlsoDoesNotExist"]
   OR
   [Word lemma = "door"]
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.7
SELECT ALL OBJECTS
WHERE
[Clause
   [gap?]
   [Word lemma = "DoesNotExist"]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.8
SELECT ALL OBJECTS
WHERE
[Clause
   [gap]
   [Word lemma = "DoesNotExist"]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.9
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
     [Word lemma = "DoesNotExist"]
   ]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.10
SELECT ALL OBJECTS
WHERE
[Phrase
  [word first and last
     lemma="be"
  ]
]
GO
++++ answer
 //  <  < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 4
SELECT ALL OBJECTS
WHERE
[Clause_atom
]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 < [ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 5
SELECT ALL OBJECTS
WHERE
[Phrase
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 6
SELECT ALL OBJECTS
WHERE
[Word
]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 7
SELECT ALL OBJECTS
WHERE
[Word first
]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 7.1
SELECT ALL OBJECTS
WHERE
[Word first]
.. < 3
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 7.2
SELECT ALL OBJECTS
WHERE
[Word first]
.. <= 3
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 7.3
SELECT ALL OBJECTS
WHERE
[Word first]
.. BETWEEN 2 AND 3
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 7.4
SELECT ALL OBJECTS
WHERE
[Word first]
.. BETWEEN 2 AND 120
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 8
SELECT ALL OBJECTS
WHERE
[Word last
]
GO
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 9
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [word parent = p1.self]
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 9.1
SELECT ALL OBJECTS
WHERE
[word as w1
   [Phrase self = w1.parent]
]
GO
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 10
SELECT ALL OBJECTS
WHERE
[Phrase as p1
   [Phrase parent = p1.self]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature parent does not exist on its enclosing object type.
---- answer
++++ query topographic query on realistic db number 11
SELECT ALL OBJECTS
WHERE
[Phrase first GET phrase_function, phrase_type
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Subj ",phrase_type="NP") //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 11.1
SELECT ALL OBJECTS
WHERE
[Word first GET surface, pos, lemma, parent
]
GO
++++ answer
 //  <  < [ word 1 { 1 } false (surface="The",pos="def_article",lemma="the",parent="10") //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 11.2
SELECT ALL OBJECTS
WHERE
[Phrase last GET self, phrase_type
  [Word first GET self]
]
GO
++++ answer
 //  <  < [ phrase 16 { 9 } false (self="16",phrase_type="AP") //  <  < [ word 9 { 9 } false (self="9") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 12
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Clause
     [Clause_atom
        [Phrase
           [Word]
        ]
     ]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ clause_atom 18 { 3-7 } false  //  <  < [ phrase 11 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 12.1
SELECT ALL OBJECTS
RETURNING FLAT SHEAF
WHERE
[Paragraph
  [Clause
     [Clause_atom
        [Phrase
           [Word]
        ]
     ]
  ]
]
++++ answer
 // <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 1-2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
[ phrase 11 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
[ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
[ clause 21 { 3-7 } false  //  <  > 
 ]
 > 
 < [ paragraph 23 { 1-9 } false  //  <  > 
 ]
 > 
 >
---- answer
++++ query topographic query on realistic db number 13
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (Subj,Attr)]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 13.1
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (VP) OR phrase_type IN (PP,AP)]
GO
++++ answer
 //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.2
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (NP,AP)]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.3
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (NP) AND phrase_function HAS Subj]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.4
SELECT ALL OBJECTS
WHERE
[phrase NOT (NOT phrase_type IN (NP) OR NOT phrase_function HAS Subj)]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.5
SELECT ALL OBJECTS
WHERE
[phrase NOT phrase_type IN (AP,NP,PP)]
GO
++++ answer
 //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.6
SELECT ALL OBJECTS
WHERE
[phrase NOT (phrase_type IN (VP) AND (phrase_function HAS Pred OR phrase_function HAS PreC))]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14
SELECT ALL OBJECTS
WHERE
[word surface ~ '^[Tt]']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.1
SELECT ALL OBJECTS
WHERE
[word surface ~ 'h$']
GO
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.2
SELECT ALL OBJECTS
WHERE
[word lemma ~ 'e$']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.3
SELECT ALL OBJECTS
WHERE
[word lemma !~ 'e$']
GO
++++ answer
 //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.4
SELECT ALL OBJECTS
WHERE
[word NOT lemma !~ 'e$']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.5
SELECT ALL OBJECTS
WHERE
[word NOT NOT NOT lemma !~ 'e$']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.6
SELECT ALL OBJECTS
WHERE
[word NOT NOT NOT pos !~ 'e$']
GO
++++ answer failcompiler
Typechecking failed with compiler error
The feature pos is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15
SELECT ALL OBJECTS
WHERE
GO
++++ answer failcompiler
Parsing failed
syntax error near the token 'go'
---- answer
++++ query topographic query on realistic db number 15.1
SELECT ALL OBJECTS
WHERE
[Clause
  [Word]
  [gap focus
     [Phrase first]
  ]
  [Phrase]
  [Phrase last]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.2
SELECT ALL OBJECTS
IN {1-2, 8-9}
WHERE
[Clause_atom]
OR
[Clause]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.3
SELECT ALL OBJECTS
IN {1-2, 7-8}
WHERE
[Clause_atom]
OR
[Clause]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.4
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word as p1]
]
OR
[Phrase
  [Word surface=p1.surface]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.5
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word as p1]*
]
++++ answer failcompiler
Weeding failed with compiler error
You may not have an object reference on an object block with a * operator.
---- answer
++++ query topographic query on realistic db number 15.6
SELECT ALL OBJECTS
WHERE
[Phrase 
  [Word]
  [Word first]
]
++++ answer failcompiler
Weeding failed with compiler error
The 'first' modifier must only be used for the first object block in a blocks.
---- answer
++++ query topographic query on realistic db number 15.7
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word last]
  [Word]
]
++++ answer failcompiler
Weeding failed with compiler error
The 'last' modifier must only be used for the last object block in a blocks.
---- answer
++++ query topographic query on realistic db number 15.8
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word self = p1.self]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The object reference has not been declared in the object reference usage 'p1.self'.
---- answer
++++ query topographic query on realistic db number 15.9
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Word parent = p1.does_not_exist]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature does not exist on the object type of the object reference
in the object reference usage 'p1.does_not_exist'.
---- answer
++++ query topographic query on realistic db number 15.10
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type = DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant DoesNotExist does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.11
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ ""]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.12
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type !~ ""]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.13
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type !~ blah]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.14
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ blah]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.15
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type !~ 1]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.16
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ 1]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.17
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ NIL]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.18
SELECT ALL OBJECTS
WHERE
[Phrase p1 phrase_function = p1.self]
++++ answer failcompiler
Parsing failed
syntax error near the string 'phrase_function'
---- answer
++++ query topographic query on realistic db number 15.19
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type IN (NP, Subj, DoesNotExist)]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.20
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type IN (NP, DoesNotExist)]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant DoesNotExist does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.21
SELECT ALL OBJECTS
WHERE
[Clause_atom
  [Phrase
     [Word as p1]
  ]*
  [Word surface = p1.surface]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.22
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function = Subj]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with an enumeration constant, but the comparison operator is not HAS, as it should be.
---- answer
++++ query topographic query on realistic db number 15.23
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type HAS Subj]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.24
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type < Pred]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Pred does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.25
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function IN (1,2,3)]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared with a list of integers.  The feature is neither of type INTEGER, nor of type ID_D, or of type LIST OF INTEGER, nor of type LIST OF ID_D.
---- answer
++++ query topographic query on realistic db number 15.26
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function HAS 1]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with a integer using the HAS operator, but the list is neither a list of integers, nor a list of id_ds.
---- answer
++++ query topographic query on realistic db number 15.27
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type > 1]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with an integer.  The feature is neither an integer nor an id_d.
---- answer
++++ query topographic query on realistic db number 15.28
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type <= "a"]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.29
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Phrase phrase_function HAS p1.phrase_type]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared
using HAS and an object reference usage. The feature is a list of enum
constants, but the object reference usage is not the same enum.
---- answer
++++ query topographic query on realistic db number 15.30
SELECT ALL OBJECTS
WHERE
[Word as w1
  [Phrase phrase_function HAS w1.surface]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared
using HAS and an object reference usage. The feature is a list of enum
constants, but the object reference usage is not an enum.
---- answer
++++ query topographic query on realistic db number 15.31
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Phrase phrase_function HAS p1.phrase_function]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared
using HAS and an object reference usage.
The feature is a list, but so is the object reference usage.
The HAS operator is only for comparing lists with atomic values.
---- answer
++++ query topographic query on realistic db number 15.32
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Phrase phrase_type HAS p1.phrase_function]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared
using HAS and an object reference usage.
The feature is not a list.
The HAS operator is only for comparing lists with atomic values.
---- answer
++++ query topographic query on realistic db number 15.33
SELECT ALL OBJECTS
WHERE
[Word surface IN (1,2,3)]
++++ answer failcompiler
Typechecking failed with compiler error
The feature surface is being compared with a list of integers.  The feature is neither of type INTEGER, nor of type ID_D, or of type LIST OF INTEGER, nor of type LIST OF ID_D.
---- answer
++++ query topographic query on realistic db number 15.34
SELECT ALL OBJECTS
WHERE
[DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.35
SELECT ALL OBJECTS
WHERE
NOTEXIST [Word]*
++++ answer failcompiler
Weeding failed with compiler error
You may not have a NOTEXIST on an object block with a * operator.
---- answer
++++ query topographic query on realistic db number 15.36
SELECT ALL OBJECTS
WHERE
[Word as p1]*
++++ answer failcompiler
Weeding failed with compiler error
You may not have an object reference on an object block with a * operator.
---- answer
++++ query topographic query on realistic db number 15.37
SELECT ALL OBJECTS
WHERE
[word]
[word first and last]
[word]
++++ answer failcompiler
Weeding failed with compiler error
The 'first and last' modifier must only be used object blocks that are both first and last in their blocks.
---- answer
++++ query topographic query on realistic db number 15.38
SELECT ALL OBJECTS
WHERE
[phrase as p1]
[phrase as p1]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object reference p1 has already been declared once.  An object reference must not be declared more than once.
---- answer
++++ query topographic query on realistic db number 15.39
SELECT ALL OBJECTS
WHERE
[Word]
.. < -1
[Word]
++++ answer failcompiler
Parsing failed
syntax error near the token '-'
---- answer
++++ query topographic query on realistic db number 15.40
SELECT ALL OBJECTS
WHERE
[Word]
.. <= -1
[Word]
++++ answer failcompiler
Parsing failed
syntax error near the token '-'
---- answer
++++ query topographic query on realistic db number 15.41
SELECT ALL OBJECTS
WHERE
[Word]
.. BETWEEN 5 and 3
[Word]
++++ answer failcompiler
Weeding failed with compiler error
Error: Something wrong with a restrictor on a power block ("..").
If the restrictor is "< integer", the integer must not be 0.
If the restrictor is "between X and Y", then X must be less than or
equal to Y.
---- answer
++++ query topographic query on realistic db number 15.42
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap]
   [gap]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.43
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap?]
   [gap?]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.44
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap?]
   [gap]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.45
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap]
   [gap?]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.46
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   [gap]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.47
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   [gap?]
]
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.48
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   NOTEXIST [Word]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.49
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   ..
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two power blocks (i.e., "..") next to each other.
---- answer
++++ query topographic query on realistic db number 15.50
SELECT ALL OBJECTS
WHERE
[Clause
   [Gap
      [DoesNotExist]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.51
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   [Gap
      [Word lemma = p1.self]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.52
SELECT ALL OBJECTS
WHERE
[Clause
   [Gap
      [Word lemma = 1]
   ]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature lemma is being compared with an integer.  The feature is neither an integer nor an id_d.
---- answer
++++ query topographic query on realistic db number 15.53
SELECT ALL OBJECTS
WHERE
[Clause
   [gap?
      [DoesNotExist]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.54
SELECT ALL OBJECTS
WHERE
[Clause
   NOTEXIST [DoesNotExist]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.55
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   [Gap?
      [Word lemma = p1.self]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.56
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   NOTEXIST [Word
      [Word lemma = p1.self]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.57
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   [Word
      [Word lemma = p1.self]
   ]*
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.58
SELECT ALL OBJECTS
WHERE
[Clause
   [Gap?
      [Word lemma = 1]
   ]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature lemma is being compared with an integer.  The feature is neither an integer nor an id_d.
---- answer
++++ query topographic query on realistic db number 15.59
SELECT ALL OBJECTS
WHERE
[Phrase as p1]
OR
[Phrase phrase_function HAS p1.phrase_function]
OR
[Phrase]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.60
SELECT ALL OBJECTS
WHERE
[Phrase DoesNotExist = 1]
OR
[Phrase]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature DoesNotExist does not exist on its enclosing object type.
---- answer
++++ query topographic query on realistic db number 15.61
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function HAS 1]
OR
[Phrase]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with a integer using the HAS operator, but the list is neither a list of integers, nor a list of id_ds.
---- answer
++++ query topographic query on realistic db number 15.62
SELECT ALL OBJECTS
WHERE
[Word surface ~'[Th']
++++ answer failcompiler
Weeding failed with compiler error
Error compiling regular expression.  PCRE reported:
missing terminating ] for character class
Error occured at characterposition 3 in the pattern.
---- answer
++++ query topographic query on realistic db number 15.63
SELECT ALL OBJECTS
WHERE
[DoesNotExist]*
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.64
SELECT ALL OBJECTS
WHERE
[Word
  NOT lemma <> "be"
]
++++ answer
 //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.65
SELECT ALL OBJECTS
WHERE
[Word
  lemma IN (Bah, Bah, Black, Sheep)
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature 'lemma' is not an enumeration, yet the left-hand-side is a list of enumeration constants.
---- answer
++++ query topographic query on realistic db number 15.66
SELECT ALL OBJECTS
WHERE
[Phrase
   phrase_function = 1
]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with an integer, but the comparison operator is not HAS, as it should be.
---- answer
++++ query topographic query on realistic db number 15.67
SELECT ALL OBJECTS
WHERE
[word parents HAS Sheep
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Sheep does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.68
SELECT ALL OBJECTS
WHERE
[Phrase
   phrase_function HAS Sheep
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Sheep does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.69
SELECT ALL OBJECTS
WHERE
[Word
  NOT magic <> 11
]
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.70
SELECT ALL OBJECTS
WHERE
[Word
  parents HAS def_article
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant def_article does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.71
SELECT ALL OBJECTS
WHERE
[Phrase
   phrase_function HAS def_article
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant def_article does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.72
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents HAS p1.lemma]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared
using HAS and an object reference usage. The feature is a list of id_d, but
the object reference usage is not an id_d.
---- answer
++++ query topographic query on realistic db number 15.73
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word magic IN p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature magic is being compared
using IN and an object reference usage. The feature is an integer, but
the object reference usage is not a list of integer.
---- answer
++++ query topographic query on realistic db number 15.74
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word self in p1.parents]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.75
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Phrase phrase_type IN p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared
using IN and an object reference usage. The feature is an enum,
but the object reference usage is not a list of enum.
---- answer
++++ query topographic query on realistic db number 15.76
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Phrase self in p1.parents]
]
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.77
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word self in p1.lemma]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared
using IN and an object reference usage.
The object reference usage is not a list.
The IN operator is only for comparing atomic values with lists.
---- answer
++++ query topographic query on realistic db number 15.78
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents IN p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared
using IN and an object reference usage.
The object reference usage is a list, but so is the feature.
The IN operator is only for comparing atomic values with lists.
---- answer
++++ query topographic query on realistic db number 15.79
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents IN p1.lemma]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared
using IN and an object reference usage.
The object reference usage is not a list.
The IN operator is only for comparing atomic values with lists.
---- answer
++++ query topographic query on realistic db number 15.80
SELECT ALL OBJECTS
WHERE
[Phrase as p1
    [Word self in p1.phrase_function]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared
using IN and an object reference usage. The feature is an id_d, but
the object reference usage is not a list of id_d.
---- answer
++++ query topographic query on realistic db number 15.81
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word self = p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared with an object reference usage whose feature is of a different type.
---- answer
++++ query topographic query on realistic db number 15.82
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents <> p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared with an object reference usage. Both are lists, so you must use either IN, HAS, or = as the comparison operator.
---- answer
++++ query topographic query on realistic db number 15.83
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents = p1.parents]
]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.84
SELECT ALL OBJECTS
WHERE
[Word 
   self = "not_an_id" AND self = NIL
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.85
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word self = NIL AND self = p1.self]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.86
SELECT ALL OBJECTS
WHERE
[Word 
   self = "not_an_id" OR self = NIL
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.87
SELECT ALL OBJECTS
WHERE
[Word 
   surface ~ '[Th' AND self = NIL
]
++++ answer failcompiler
Weeding failed with compiler error
Error compiling regular expression.  PCRE reported:
missing terminating ] for character class
Error occured at characterposition 3 in the pattern.
---- answer
++++ query topographic query on realistic db number 15.88
SELECT ALL OBJECTS
WHERE
[Word 
   surface ~ '[Th' OR self = NIL
]
++++ answer failcompiler
Weeding failed with compiler error
Error compiling regular expression.  PCRE reported:
missing terminating ] for character class
Error occured at characterposition 3 in the pattern.
---- answer
++++ query topographic query on realistic db number 15.89
SELECT ALL OBJECTS
IN {1}
WHERE
[Word as p1
   [Word NOT (self = p1.self AND self = NIL)]
]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.90
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT (self = p1.self OR self = NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.91
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word self = p1.self AND self = NIL]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.92
SELECT ALL OBJECTS
IN { 3 }
WHERE
[Word as p1
   [Word self = p1.self OR self = NIL]
]
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.93
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
   [Word self = NIL OR self = p1.self]
]
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.94
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (Subj,Attr) AND self = NIL]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.95
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
]
OR
[Word
   self = p1.self OR self = NIL
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.96
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
]
OR
[Word
   self = p1.self AND self = NIL
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.97
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
]
OR
[Word
   self = p1.self AND self = NIL
]
[Word]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.98
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT self <> p1.self AND self = NIL]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.99
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word self = p1.self AND (self = NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.100
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT (self = p1.self AND self <> NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.101
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT ((self = p1.self) AND self <> NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.102
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT ((self = p1.self) AND (self <> NIL AND self <> NIL))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.103
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word self = p1.self AND self = p1.self]
]
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.104
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word self = p1.self OR self = p1.self]
]
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.105
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self = p1.self OR (self = p1.self OR self = p1.self))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.106
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self <> NIL OR (self = p1.self OR self = p1.self))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.107
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self <> NIL OR (self = NIL OR self = p1.self))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.108
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self <> NIL OR (self = p1.self OR self = NIL))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.109
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type = DoesNotExist OR self = NIL]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant DoesNotExist does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.110
SELECT ALL OBJECTS
WHERE
[Phrase GET does_not_exist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature 'does_not_exist' does not exist for the given object type.
Compiler error occurred while symbol checking
object block [phrase]
---- answer
++++ query topographic query on realistic db number 15.111
SELECT ALL OBJECTS
WHERE
[Phrase
   [word]
   [gap?]
   [gap?]
   [word]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.112
SELECT ALL OBJECTS
WHERE
[Phrase GET does_not_exist]
[Phrase]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature 'does_not_exist' does not exist for the given object type.
Compiler error occurred while symbol checking
object block [phrase]
---- answer
	

++++ query topographic query on realistic db number 15.113
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   ..
   [Word]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two power blocks (i.e., "..") next to each other!
---- answer
++++ query topographic query on realistic db number 15.114
SELECT ALL OBJECTS
WHERE
[Clause
   [
      ..
      [Word]
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 15.115
SELECT ALL OBJECTS
WHERE
[Clause
   [
      [Word]
      ..
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
Error: The power block cannot appear at the beginning or end.
---- answer
++++ query topographic query on realistic db number 15.116
SELECT ALL OBJECTS
WHERE
[Clause
   ..
   [
      [Word]
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 15.117
SELECT ALL OBJECTS
WHERE
[Clause
   [
      [Word]
   ]
   [gap]
   ..
]
GO
++++ answer failcompiler
Weeding failed with compiler error
Error: The power block cannot appear at the beginning or end.
---- answer
++++ query topographic query on realistic db number 15.118
SELECT ALL OBJECTS
WHERE
[Clause
   [
      [Word]
      ..
   ]
   [gap]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have a power block (i.e., "..") at the end!
---- answer
++++ query topographic query on realistic db number 15.119
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
      ..
      [Word]
   ]
   [gap]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 15.120
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
      [Word]
   ]
   [gap
      ..
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 16
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    NOTEXIST [Word pos IN (adjective, verb)]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.1
SELECT ALL OBJECTS
WHERE
NOTEXIST [Sentence self = 22]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.2
SELECT ALL OBJECTS
WHERE
NOTEXIST [Sentence self = 23]
++++ answer
 //  <  > 
---- answer
++++ query topographic query on realistic db number 16.3
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    NOTEXIST [Word pos IN (adjective, verb)]
    [Word pos=def_article]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.4
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word NOT pos IN (def_article,noun)]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.4.1
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word NOT pos IN (def_article)]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.5
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word pos IN (adjective, verb)]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.6
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word pos IN (adjective, verb)]
    [Word pos=def_article]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.7
SELECT ALL OBJECTS
WHERE
[Paragraph
  NOTEXIST [Phrase
    NOTEXIST [Word pos IN (adjective, verb)]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.8
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = NP
    NOTEXIST [Phrase
      NOTEXIST [Word pos IN (adjective, verb)]
    ]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.9
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = PP
    NOTEXIST [Phrase phrase_type = VP OR phrase_type = AP
      NOTEXIST [Word pos IN (adjective, verb)]
    ]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 16.10
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = PP
    NOTEXIST [Phrase phrase_type = VP]
    NOTEXIST [Phrase phrase_type = AP]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.11
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = PP
    NOTEXIST [Phrase phrase_type = VP]
    NOTEXIST [Phrase phrase_type = NP]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.12
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = PP
    NOTEXIST [Phrase phrase_type = VP]
    [Word pos=preposition]
    NOTEXIST [Phrase phrase_type = NP]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.13
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = PP
    NOTEXIST [Phrase phrase_type = VP]
    [Word pos=preposition]
    NOTEXIST [Phrase phrase_type = AP]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 17
SELECT ALL OBJECTS
WHERE
[Paragraph`para
  [word`w1`w2 pos=def_article]
  [word`w3`w4`w5]*{0-1}
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false `para  //  <  < [ word 1 { 1 } false `w1`w2  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false `w1`w2  //  <  > 
 ]
[ word 2 { 2 } false `w3`w4`w5  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false `w1`w2  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false `w1`w2  //  <  > 
 ]
[ word 7 { 7 } false `w3`w4`w5  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 18
SELECT ALL OBJECTS
WHERE
[Sentence`yellow
]
GO
++++ answer
 //  <  < [ sentence 22 { 1-9 } false `yellow  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 18.1
SELECT ALL OBJECTS
WHERE
[Clause`green
   [clause_atom`envious]
   [clause_atom`slippery`slope]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `green  //  <  < [ clause_atom 17 { 1-2 } false `envious  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false `slippery`slope  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 18.1.1
SELECT ALL OBJECTS
WHERE
[Clause`turquoise
   [clause_atom]
   [gap?`blue retrieve]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `turquoise  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false `blue  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 18.1.2
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap`my`gaps`are`nice focus]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true `my`gaps`are`nice  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19
SELECT ALL OBJECTS
WHERE
[Clause`flash
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `flash  //  <  > 
 ]
 > 
 < [ clause 21 { 3-7 } false `flash  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19.1
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [gap`Gordon retrieve
      [phrase`Flash_Gordon first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ pow_m { 3-7 } false `Gordon  //  <  < [ phrase 11 { 3 } false `Flash_Gordon  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19.2
SELECT ALL OBJECTS WHERE
[Clause`Flash
   [phrase`Rela phrase_function HAS Rela GET phrase_function ]
   OR
   [phrase`PreC phrase_function HAS PreC GET phrase_function ] 
   OR
   [phrase`PreC phrase_function HAS Attr GET phrase_function ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 15 { 8 } false `PreC (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false `PreC (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela (phrase_function=" Rela Subj ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19.3
SELECT ALL OBJECTS WHERE
[Clause`Flash
   [phrase`Rela phrase_function HAS Rela GET phrase_function ]
   OR
   [phrase`PreC phrase_function HAS PreC GET phrase_function ] 
   OR
   [phrase`PreC phrase_function HAS Attr GET phrase_function ]
   OR
   [phrase`PreC phrase_function HAS Loca GET phrase_function ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 15 { 8 } false `PreC (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false `PreC (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela (phrase_function=" Rela Subj ") //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false `PreC (phrase_function=" Loca ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 20.1
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [
      [phrase`Flash_Gordon first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Flash_Gordon  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.2
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [Phrase`Rela phrase_function HAS Rela]
   [
      [phrase`Pred phrase_function HAS Pred]
      OR
      [phrase`PP phrase_function HAS Loca]
   ]
]
GO
++++ answer
 //  <  < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela  //  <  > 
 ]
[ phrase 12 { 4 } false `Pred  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.3
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [Phrase`Rela phrase_function HAS Rela]
   [
      [phrase`Pred phrase_function HAS Pred]
      ..
      [phrase`PP phrase_function HAS Loca]
   ]
]
GO
++++ answer
 //  <  < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela  //  <  > 
 ]
[ phrase 12 { 4 } false `Pred  //  <  > 
 ]
[ phrase 13 { 5-7 } false `PP  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.4
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [Phrase`Subj phrase_function HAS Subj]
   [
      [phrase`Rela phrase_function HAS Rela]
      OR
      [phrase`PreC phrase_function HAS PreC]
      OR
      [phrase`Attr phrase_function HAS Attr]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 10 { 1-2 } false `Subj  //  <  > 
 ]
[ phrase 15 { 8 } false `PreC  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.5
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [
      [phrase`first GET phrase_function]
   ]
   [phrase`second GET phrase_function]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 10 { 1-2 } false `first (phrase_function=" Subj ") //  <  > 
 ]
[ phrase 15 { 8 } false `second (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false `first (phrase_function=" PreC ") //  <  > 
 ]
[ phrase 16 { 9 } false `second (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 12 { 4 } false `second (phrase_function=" Pred ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false `first (phrase_function=" Pred ") //  <  > 
 ]
[ phrase 13 { 5-7 } false `second (phrase_function=" Loca ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.6
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [
      [phrase`first GET phrase_function]
   ]
   ..
   [phrase`second GET phrase_function]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 10 { 1-2 } false `first (phrase_function=" Subj ") //  <  > 
 ]
[ phrase 15 { 8 } false `second (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 10 { 1-2 } false `first (phrase_function=" Subj ") //  <  > 
 ]
[ phrase 16 { 9 } false `second (phrase_function=" Attr ") //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false `first (phrase_function=" PreC ") //  <  > 
 ]
[ phrase 16 { 9 } false `second (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 12 { 4 } false `second (phrase_function=" Pred ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 13 { 5-7 } false `second (phrase_function=" Loca ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 14 { 6-7 } false `second (phrase_function=" NA ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false `first (phrase_function=" Pred ") //  <  > 
 ]
[ phrase 13 { 5-7 } false `second (phrase_function=" Loca ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false `first (phrase_function=" Pred ") //  <  > 
 ]
[ phrase 14 { 6-7 } false `second (phrase_function=" NA ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.7
SELECT ALL OBJECTS
WHERE
[Phrase as p1
   [
      [word parents HAS p1.self]
   ]
   [Word parents HAS p1.self]
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.8
SELECT ALL OBJECTS
WHERE
[Phrase as p1
   [
      [word parents HAS p1.self]
      OR
      [Phrase self = p1.self]
   ]
   [Word parents HAS p1.self] * {0,1}
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	





++++ query topographic query on realistic db number 20.9
SELECT ALL OBJECTS
WHERE
[Clause
   [
	[Word GET POS]
        ..
        [Word GET POS]
   ] * { 1-3 }
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false (POS="def_article") //  <  > 
 ]
[ word 2 { 2 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (POS="def_article") //  <  > 
 ]
[ word 8 { 8 } false (POS="verb") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (POS="def_article") //  <  > 
 ]
[ word 9 { 9 } false (POS="adjective") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (POS="noun") //  <  > 
 ]
[ word 8 { 8 } false (POS="verb") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (POS="noun") //  <  > 
 ]
[ word 9 { 9 } false (POS="adjective") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (POS="verb") //  <  > 
 ]
[ word 9 { 9 } false (POS="adjective") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 4 { 4 } false (POS="verb") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.10
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.11
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.12
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
	..
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.13
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
   ]
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.14
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Word]
	[Word]
   ]
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.15
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   ..
   [
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.16
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   ..
   [
	[Phrase]
   ]
   ..
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.17
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Word]
	..
	[
		[Phrase]
	]
   ]
   ..
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.18
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]!
   [
     [gap retrieve]
     [word]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.19
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]!
   [
	[Word]
	[Gap retrieve]
	[Phrase]
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.20
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]!
   [
	[gap? retrieve]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 21.1
SELECT ALL OBJECTS
WHERE
[Word surface HAS 'a']
GO
++++ answer failcompiler
Typechecking failed with compiler error
The feature 'surface' is being compared with a string,
but the comparison operator is not one of: =, <>, <, <=, >, >=, ~, !~.
---- answer

++++ query newdb REcreating realistic DB schema
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
WITHOUT UNIQUE MONADS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
WITHOUT UNIQUE MONADS
[Clause]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph]
GO
++++ answer
---- answer
++++ query nobpt UPDATING object type Phrase
UPDATE OBJECT TYPE
[Phrase
   REMOVE phrase_function;
   ADD surface: STRING FROM SET;
   ADD pos : pos_t;
   ADD parent : id_d;
   ADD lemma : STRING FROM SET WITH INDEX;
   ADD parents : LIST OF id_d;
   ADD magic : integer DEFAULT 42;
]
++++ answer
---- answer

++++ dumpdb

++++ query selecting features from newly updated Phrase object type
SELECT FEATURES FROM TYPE [Phrase]
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| phrase_type           | phrase_type_t | 'NP'             | false           |
| self                  | id_d          | '0'              | true            |
| surface               | string        | ''               | false           |
| pos                   | pos_t         | 'def_article'    | false           |
| parent                | id_d          | '0'              | false           |
| lemma                 | string        | ''               | false           |
| parents               | list of id_d  | ''               | false           |
| magic                 | integer       | '42'             | false           |
+-----------------------+---------------+------------------+-----------------+
---- answer

++++ query nobpt UPDATING object type Word, removing all features
UPDATE TYPE
[Word
   REMOVE surface;
   REMOVE pos;
   REMOVE parent;
   REMOVE lemma;
   REMOVE parents;
   REMOVE magic;
]
++++ answer
---- answer

++++ dumpdb

++++ query selecting features from newly updated Word object type
SELECT FEATURES FROM TYPE [Word]
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| self                  | id_d          | '0'              | true            |
+-----------------------+---------------+------------------+-----------------+
---- answer

++++ query nobpt UPDATING object type Word, adding a lot of features...
UPDATE TYPE
[Word
    ADD myinteger : INTEGER DEFAULT 23;
    ADD myintegerwithindex : INTEGER WITH INDEX DEFAULT -133;
    ADD myid_d : ID_D DEFAULT 2;
    ADD myid_dwithindex : ID_D WITH INDEX DEFAULT 1;
    ADD mystring : STRING DEFAULT "blah";
    ADD mystringwithindex : STRING WITH INDEX DEFAULT "blof";
    ADD mystringfromset : STRING FROM SET DEFAULT "bloat";
    ADD mystringfromsetwithindex : STRING FROM SET WITH INDEX DEFAULT "float";
    ADD myascii : ASCII DEFAULT "blah";
    ADD myasciiwithindex : ASCII WITH INDEX DEFAULT "blof";
    ADD myasciifromset : ASCII FROM SET DEFAULT "bloat";
    ADD myasciifromsetwithindex : ASCII FROM SET WITH INDEX DEFAULT "float";
    ADD myphrasefunction : Phrase_Function_T DEFAULT Subj;
    ADD mylistofinteger : LIST OF INTEGER;
    ADD mylistofid_d : LIST OF ID_D;
    ADD mylistofenum : LIST OF Phrase_Function_T;
]
++++ answer
---- answer

++++ dumpdb

++++ query selecting features from newly updated Word object type
SELECT FEATURES FROM TYPE [Word]
++++ answer
+--------------------------+---------------------------+------------------+-----------------+
| feature name : string    | type : string             | default : string | computed : bool |
+--------------------------+---------------------------+------------------+-----------------+
| self                     | id_d                      | '0'              | true            |
| myinteger                | integer                   | '23'             | false           |
| myintegerwithindex       | integer                   | '-133'           | false           |
| myid_d                   | id_d                      | '2'              | false           |
| myid_dwithindex          | id_d                      | '1'              | false           |
| mystring                 | string                    | 'blah'           | false           |
| mystringwithindex        | string                    | 'blof'           | false           |
| mystringfromset          | string                    | 'bloat'          | false           |
| mystringfromsetwithindex | string                    | 'float'          | false           |
| myascii                  | ascii                     | 'blah'           | false           |
| myasciiwithindex         | ascii                     | 'blof'           | false           |
| myasciifromset           | ascii                     | 'bloat'          | false           |
| myasciifromsetwithindex  | ascii                     | 'float'          | false           |
| myphrasefunction         | phrase_function_t         | 'Subj'           | false           |
| mylistofinteger          | list of integer           | ''               | false           |
| mylistofid_d             | list of id_d              | ''               | false           |
| mylistofenum             | list of phrase_function_t | ''               | false           |
+--------------------------+---------------------------+------------------+-----------------+
---- answer

++++ query nobpt UPDATE OBJECT TYPE fail: Cannot assign number less than 0 to id_d.
UPDATE OBJECT TYPE
[Paragraph
   ADD myid_d : id_d DEFAULT -1;
]
++++ answer failcompiler
Typechecking failed with compiler error
You cannot assign a number below 0 to an id_d.
Feature myid_d is not type-compatible with its default value.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot REMOVE self.
UPDATE OBJECT TYPE
[Paragraph
   REMOVE self;
]
++++ answer failcompiler
Weeding failed with compiler error
Cannot remove feature 'self'.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot ADD self.
UPDATE OBJECT TYPE
[Paragraph
   ADD self : STRING from set;
]
++++ answer failcompiler
Weeding failed with compiler error
Feature 'self' is implicitly declared and cannot be declared explicitly.
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot declare self.
CREATE OBJECT TYPE
[WillNotBeCreated
   self : STRING from set;
]
++++ answer failcompiler
Weeding failed with compiler error
Feature 'self' is implicitly declared and cannot be declared explicitly.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot add feature with non-existent enum
UPDATE OBJECT TYPE
[Paragraph
   ADD featurewillnotbeadded : enumwhichdoesnotexist_t;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumwhichdoesnotexist_t used as the type of feature featurewillnotbeadded does not exist.
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot add feature with non-existent enum
CREATE OBJECT TYPE
[WillNotBeCreated
   featurewillnotbecreated : enumwhichdoesnotexist_t;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumwhichdoesnotexist_t used as the type of feature featurewillnotbecreated does not exist.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot add feature with non-existent enum constant
UPDATE OBJECT TYPE
[Paragraph
   ADD featurewillnotbeadded : Phrase_Type_t DEFAULT NotApplicable;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant NotApplicable does not exist in the enumeration Phrase_Type_t used as the type of feature featurewillnotbeadded.
---- answer
++++ query nobpt DELETE OBJECTS from an object type with no objects
DELETE OBJECTS 
BY MONADS = { 1 - 210000000 }
[Paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot add feature with non-existent enum constant
CREATE OBJECT TYPE
[WillNotBeCreated
   featurewillnotbeadded : Phrase_Type_t DEFAULT NotApplicable;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant NotApplicable does not exist in the enumeration Phrase_Type_t used as the type of feature featurewillnotbeadded.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot add feature which exists already
UPDATE OBJECT TYPE
[Word
    ADD myinteger : INTEGER DEFAULT 150;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature myinteger exists already.  Cannot add again.
---- answer
++++ query nobpt DROP OBJECT TYPE fail: Cannot remove non-existent object type
DROP TYPE [DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type DoesNotExist does not exist.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot update non-existent object type
UPDATE TYPE [DoesNotExist
	ADD willnotbeadded : integer;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type DoesNotExist does not exist.
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot create already-existent object type
CREATE TYPE [Word]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type Word exists already.
---- answer
++++ query nobpt CREATE ENUMERATION fail: Cannot have two defaults
CREATE ENUMERATION will_not_be_created_t = {
   DEFAULT blah = 1,
   DEFAULT blof = 2
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query nobpt CREATE ENUMERATION fail: Cannot have two constants with the same name
CREATE ENUMERATION will_not_be_created_t = {
   blah = 1,
   blah = 2
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant blah is declared more than once.
This is not allowed.
---- answer
++++ query nobpt CREATE ENUMERATION fail: Cannot have two constants with the same value
CREATE ENUMERATION will_not_be_created_t = {
   blah = 1,
   blof = 1
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Value 1 is assigned to more than one label.
This is not allowed.
---- answer
++++ query nobpt CREATE ENUMERATION enumtest_t
CREATE ENUMERATION enumtest_t = {
    DEFAULT one = 1,
    two = 2,
    three = 3
}
++++ answer
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t: Cannot remove default without specifying new default
UPDATE ENUMERATION enumtest_t = {
    REMOVE one
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Default is removed without specifying new default.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot have more than one default: ADD ADD
UPDATE ENUMERATION enumtest_t = {
    ADD DEFAULT four = 4,
    ADD DEFAULT five = 5
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot have more than one default: ADD UPDATE
UPDATE ENUMERATION enumtest_t = {
    ADD DEFAULT four = 4,
    UPDATE DEFAULT three = 5
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot add already-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    ADD three = 4
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant three exists already.  Cannot add.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot update non-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    UPDATE DEFAULT ten = 10
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant ten does not exist.  Cannot update.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot remove non-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    REMOVE ten
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant ten does not exist.  Cannot remove.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t success
UPDATE ENUMERATION enumtest_t = {
    REMOVE one,
    ADD DEFAULT four = 4,
    UPDATE three = 5
}
++++ answer
---- answer

++++ dumpdb

++++ query nobpt SELECT ENUMERATION CONSTANTS enumtest_t
SELECT ENUMERATION CONSTANTS FROM ENUMERATION enumtest_t
++++ answer
+---------------------+-----------------+----------------+
| enum const : string | value : integer | default : bool |
+---------------------+-----------------+----------------+
| four                | 4               | true           |
| three               | 5               | false          |
| two                 | 2               | false          |
+---------------------+-----------------+----------------+
---- answer
++++ query nobpt DROP ENUMERATION fail: enum must exist
DROP ENUMERATION DoesNotExist_t
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration DoesNotExist_t did not exist.
---- answer
++++ query nobpt DROP ENUMERATION enumtest_t
DROP ENUMERATION enumtest_t
++++ answer
---- answer

++++ dumpdb

++++ query SELECT ENUMERATION CONSTANTS enumtest_t fail: Does not exist
SELECT ENUMERATION CONSTANTS FROM ENUMERATION enumtest_t
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumtest_t did not exist.
---- answer
++++ query nobpt CREATE SEGMENT
CREATE SEGMENT one_five RANGE = 1 - 5
++++ answer
---- answer
++++ query nobpt CREATE SEGMENT fail: Cannot create backwards range
CREATE SEGMENT five_one RANGE = 5 - 1
++++ answer failcompiler
Weeding failed with compiler error
Range in monad set must be monotonic (i.e., in 'A - B',
B must be greater than or equal to A).
The offending mse was 5-1.
---- answer
++++ query nobpt CREATE SEGMENT fail: Cannot create existing segment
CREATE SEGMENT one_five RANGE = 1 - 6
++++ answer failcompiler
Symbolchecking failed with compiler error
monad set with name 'one_five' exists already.
Cannot create.
---- answer




++++ query nobpt CREATE OBJECT TYPE foobar
CREATE OBJECT TYPE [foobar] GO
++++ answer
---- answer
++++ query nobpt DELETE OBJECTS on foobar, which has no objects
DELETE OBJECTS BY MONADS = { 1-10 } [foobar] GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer




++++ query newdb creating small database for testing object reference machinery
CREATE OBJECT TYPE [Phrase] GO
CREATE OBJECT TYPE [Word psp : INTEGER;] GO
CREATE OBJECT FROM MONADS = {1} [Word psp := 5;] GO
CREATE OBJECT FROM MONADS = {2} [Word psp := 0;] GO
CREATE OBJECT FROM MONADS = {3} [Word psp := 1;] GO
CREATE OBJECT FROM MONADS = {1-3} [Phrase]GO
CREATE OBJECT FROM MONADS = {4} [Word psp := 0;] GO
CREATE OBJECT FROM MONADS = {5} [Word psp := 1;] GO
CREATE OBJECT FROM MONADS = {4-5} [Phrase] GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 7           |
+-------------+
---- answer

++++ dumpdb

++++ query testing the object reference machinery #1
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word psp=5]
  ..
  [Word AS w1 psp=0 OR psp=1]
]
[Phrase
  [Word psp=w1.psp]
]
GO
++++ answer
 //  <  < [ phrase 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ phrase 7 { 4-5 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query newdb creating small database for testing object reference machinery #2
CREATE ENUMERATION pos_t = {
       V,
       N,
       P,
       A,
       PRON,
       NEG
}
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Clause
   mother : id_d;
   parent : id_d;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Phrase
    parent : id_d;
]
GO

CREATE OBJECT TYPE 
WITH SINGLE MONAD OBJECTS
[Word
    surface : STRING;
    pos : pos_t;
    myint : INTEGER;
    parent : id_d;
    mother : id_d;
]
GO





CREATE OBJECT FROM MONADS = {1-10}
WITH ID_D = 16
[Sentence]
GO


CREATE OBJECT FROM MONADS = {1-3}
WITH ID_D = 4
[Clause
   mother := NIL;
   parent := 16;
]
GO



CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {1}
WITH ID_D = 10
[
    parent := 4;
]
CREATE OBJECT
FROM MONADS = {2}
WITH ID_D = 11
[
    parent := 4;
]
CREATE OBJECT
FROM MONADS = {3}
WITH ID_D = 12
[
    parent := 4;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {1}
WITH ID_D = 1
[
    surface := "I";
    pos := PRON;
    myint := 1;
    parent := 10;
    mother := NIL;
]
CREATE OBJECT
FROM MONADS = {2}
WITH ID_D = 2
[
    surface := "am";
    pos := V;
    myint := 2;
    parent := 11;
    mother := 1;
]
CREATE OBJECT
FROM MONADS = {3}
WITH ID_D = 3
[
    surface := "he.";
    pos := PRON;
    myint := 3;
    parent := 12;
    mother := 2;
]
GO








CREATE OBJECT FROM MONADS = {4-7}
WITH ID_D = 9
[Clause
   mother := 4;
   parent := 16;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {4}
WITH ID_D = 13
[
    parent := 9;
]
CREATE OBJECT
FROM MONADS = {5}
WITH ID_D = 14
[
    parent := 9;
]
CREATE OBJECT
FROM MONADS = {6-7}
WITH ID_D = 15
[
    parent := 9;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {4}
WITH ID_D = 5
[
    surface := "He";
    pos := PRON;
    myint := 1;
    parent := 13;
    mother := 10;
]
CREATE OBJECT
FROM MONADS = {5}
WITH ID_D = 6
[
    surface := "is";
    pos := V;
    myint := 2;
    parent := 14;
    mother := 11;
]
CREATE OBJECT
FROM MONADS = {6}
WITH ID_D = 7
[
    surface := "not";
    pos := NEG;
    myint := 1;
    parent := 15;
    mother := 12;
]
CREATE OBJECT
FROM MONADS = {7}
WITH ID_D = 8
[
    surface := "she.";
    pos := PRON;
    myint := 1;
    parent := 15;
    mother := 4;
]
GO

++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 4                      |
+------------------------+
---- answer

++++ dumpdb

++++ query testing object reference machinery #2
SELECT ALL OBJECTS IN { 1-7 }
WHERE 
[Clause
  [Word AS w1 GET pos]
]
[Clause
  [Word pos=w1.pos AND myint=1 GET myint, pos]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (myint="1",pos="PRON") //  <  > 
 ]
 > 
 < [ word 8 { 7 } false (myint="1",pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query testing object reference machinery #3
SELECT ALL OBJECTS 
WHERE 
[Clause
  [Word AS w1]
]
[Clause
  [Word pos=w1.pos AND myint=2 GET pos,myint]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 6 { 5 } false (pos="V",myint="2") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query testing object reference machinery #4
SELECT ALL OBJECTS IN {1-7}
WHERE 
[Clause as c1
  [Phrase as p1
    parent = c1.self
    [Word as w1
        parent = p1.self
    ]
  ]
]
[Clause
  [Phrase
    [Word]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 6-7 } false  //  <  < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #5
SELECT ALL OBJECTS IN {1-7}
WHERE 
[Clause as c1
  [Phrase as p1
    parent = c1.self
    [Word AS w1
       parent = p1.self
       GET parent
    ]
  ]
]
[Clause as c2
  [Phrase as p2
    parent = c2.self
    [Word AS w2
       parent = p2.self AND pos = w1.pos
    ]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false (parent="10") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false (parent="11") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false (parent="12") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 6-7 } false  //  <  < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #6
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]
[Clause as c2
  mother = c1.self
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
[ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #7
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]*
[Clause as c2
  mother = c1.self
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'c1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer


++++ query testing object reference machinery #8
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]
OR
[Clause as c2
  mother = c1.self
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'c1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer


++++ query testing object reference machinery #9
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1
       [phrase as p1
         [word as w1]
       ]
    ]
  ]
]
[Clause as c2
  mother = c1.self
  [phrase as p2
     parent = c2.self
     [word as w2
        parent = p2.self AND mother = p1.self AND pos = w1.pos
     ]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query testing object reference machinery #10
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
   [Clause as c1
      [Word as w1 GET pos]
      ..
      [word as w2 GET pos]
   ]
]
[Clause
   [Word pos = w1.pos GET pos]
   ..
   [Word pos = w2.pos GET pos]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
[ word 2 { 2 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
[ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (pos="PRON") //  <  > 
 ]
[ word 6 { 5 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 5 { 4 } false (pos="PRON") //  <  > 
 ]
[ word 8 { 7 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 8 { 7 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query nobpt creating more objects for testing object reference machinery
CREATE OBJECT FROM MONADS = {8-10}
WITH ID_D = 17
[Clause
   mother := 9;
   parent := 16;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {8-9}
WITH ID_D = 18
[
    parent := 17;
]
CREATE OBJECT
FROM MONADS = {10}
WITH ID_D = 19
[
    parent := 17;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {8}
WITH ID_D = 20
[
    surface := "He";
    pos := PRON;
    myint := 1;
    parent := 18;
    mother := 10;
]
CREATE OBJECT
FROM MONADS = {9}
WITH ID_D = 21
[
    surface := "is";
    pos := V;
    myint := 2;
    parent := 18;
    mother := 11;
]
CREATE OBJECT
FROM MONADS = {10}
WITH ID_D = 23
[
    surface := "not";
    pos := NEG;
    myint := 1;
    parent := 19;
    mother := 12;
]
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer

++++ dumpdb

++++ query doing extended querying for object references #1
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1]
   ]
]
[Clause as c2
   [Word as w2 pos <> w1.pos]
]
[Clause as c3
   [Phrase as p1
      [Word (pos = w1.pos AND pos = w2.pos) AND mother = w2.mother]
   ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 18 { 8-9 } false  //  <  < [ word 20 { 8 } false  //  <  > 
 ]
 > 
 < [ word 21 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query doing extended querying for object references #2
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1]
   ]
]
[Clause as c2
   [Word as w2 pos = NEG]
]
[Clause as c3
   [Phrase as p1
      [Word (pos = w1.pos OR pos = w2.pos) AND mother = w2.mother]
   ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 19 { 10 } false  //  <  < [ word 23 { 10 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query doing extended querying for object references #3
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1 GET pos, mother]
   ]
]
..
[Clause as c2
   [Phrase as p1 
      parent = c2.self
      [Word pos = w1.pos AND mother = w1.mother GET pos, mother]
   ]
]
++++ answer
 //  <  < [ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (pos="PRON",mother="10") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V",mother="11") //  <  > 
 ]
 > 
 < [ word 7 { 6 } false (pos="NEG",mother="12") //  <  > 
 ]
 > 
 < [ word 8 { 7 } false (pos="PRON",mother="4") //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 18 { 8-9 } false  //  <  < [ word 20 { 8 } false (pos="PRON",mother="10") //  <  > 
 ]
 > 
 < [ word 21 { 9 } false (pos="V",mother="11") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 19 { 10 } false  //  <  < [ word 23 { 10 } false (pos="NEG",mother="12") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query doing WITH MAX RANGE 3 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 3 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 5 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 5 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 6 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 6 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 7 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 7 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 1000 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 1000 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE FEATURE MONADS FROM [Phrase] 
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE FEATURE MONADS FROM [Phrase]
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE FEATURE MONADS FROM [Clause] 
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE FEATURE MONADS FROM [Clause]
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer




# This tests that it is possible to have an object reference usage which
# points to the same object block.
++++ query
SELECT ALL OBJECTS IN {1-4}
WHERE
[word as w1 pos = w1.pos]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
---- answer

# This tests the part_of(substrate) thing.
++++ query
SELECT ALL OBJECTS IN {3-7}
WHERE
[clause part_of(substrate)]
++++ answer
 //  <  < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(substrate) thing.
++++ query
SELECT ALL OBJECTS 
IN {2-7}
WHERE
[clause overlap(substrate)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the part_of(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3, 7-10}
WHERE
[clause part_of(universe)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3,7-9}
WHERE
[clause overlap(universe)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3,8-9}
WHERE
[clause overlap(substrate)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query newdb creating realistic DB schema (2)
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr, Adju, Time
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t WITH INDEX;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Phrase
  phrase_type : phrase_type_t WITH INDEX;
  phrase_function : LIST OF phrase_function_t;
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom
  other_monads : set of monads;
]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Clause
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph
  other_monads : set of monads;
]
GO
++++ answer
---- answer
++++ query nobpt creating realistic Word objects
CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[
   surface :="The";
   pos := def_article;
   parent := 10;
   lemma := "the";
   parents := (10,17,20,22,23);
   magic := 2;
]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
   surface :="door,";
   pos := noun;
   parent := 10;
   lemma := "door";
   parents := (10,17,20,22,23);
   magic := 1;
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
   surface :="which";
   pos := relative_pronoun;
   parent := 11;
   lemma := "which";
   parents := (11,18,21,22,23);
   magic := 3;
]
CREATE OBJECT FROM MONADS = {4}
WITH ID_D = 4
[
   surface :="opened";
   pos := verb;
   parent := 12;
   lemma := "open";
   parents := (12,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {5}
WITH ID_D = 5
[
   surface :="towards";
   pos := preposition;
   parent := 13;
   lemma := "towards";
   parents := (13,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {6}
WITH ID_D = 6
[
   surface :="the";
   pos := def_article;
   parent := 14;
   lemma := "the";
   parents := (14,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {7}
WITH ID_D = 7
[
   surface :="East,";
   pos := noun;
   parent := 14;
   lemma := "east";
   parents := (14,18,21,22,23);
   magic := 9;
]
CREATE OBJECT FROM MONADS = {8}
WITH ID_D = 8
[
   surface :="was";
   pos := verb;
   parent := 15;
   lemma := "be";
   parents := (15,19,20,22,23);
   magic := 6;
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 9
[
   surface :="blue.";
   pos := adjective;
   parent := 16;
   lemma := "blue";
   parents := (16,19,20,22,23);
   magic := 11;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 9                      |
+------------------------+
---- answer
++++ query nobpt creating realistic Phrase objects
CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 10
[
  phrase_type := NP;
  phrase_function := (Subj);
  other_monads := {9};
]
CREATE OBJECT FROM MONADS = {3-3}
WITH ID_D = 11
[
  phrase_type := NP;
  phrase_function := (Rela,Subj);
  other_monads := {8-8};
]
CREATE OBJECT FROM MONADS = {4-4}
WITH ID_D = 12
[
  phrase_type := VP;
  phrase_function := (Pred);
  other_monads := {5-7};
]
CREATE OBJECT FROM MONADS = {6-7}
WITH ID_D = 14
[
  phrase_type := NP;
  phrase_function := (NA);
  other_monads := {6-7};
]
CREATE OBJECT FROM MONADS = {5-7}
WITH ID_D = 13
[
  phrase_type := PP;
  phrase_function := (Loca);
  other_monads := {3};
]
CREATE OBJECT FROM MONADS = {8-8}
WITH ID_D = 15
[
  phrase_type := VP;
  phrase_function := (PreC);
  other_monads := {3};
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 16
[
  phrase_type := AP;
  phrase_function := (Attr);
  other_monads := {1-2};
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 7                      |
+------------------------+
---- answer
++++ query nobpt Creating paragraph object with empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {1-9}
WITH ID_D = 100000
[Paragraph
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
+-------------+
---- answer
++++ query nobpt Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {2-8}
WITH ID_D = 100001
[Paragraph
   other_monads := {1-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100001      |
+-------------+
---- answer
++++ query nobpt UPDATING object type Clause
UPDATE OBJECT TYPE
[Clause
   REMOVE other_monads;
   ADD surface: STRING FROM SET;
   ADD pos : pos_t;
   ADD parent : id_d;
   ADD lemma : STRING FROM SET WITH INDEX;
   ADD parents : LIST OF id_d;
   ADD other_monads2 : SET OF MONADS;
   ADD magic : integer DEFAULT 42;
]
++++ answer
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from paragraph in 1-9 (1)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" {  } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 1-9 } ") //  <  > 
 ]
 > 
 > 
---- answer


++++ query nobpt UDPATE OBJECT paragraph
UPDATE OBJECT BY MONADS = {1-3}
[Paragraph
   other_monads := {7-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
| 100001      |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from paragraph in 1-9 (2)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" { 7-9 } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 7-9 } ") //  <  > 
 ]
 > 
 > 
---- answer


++++ query nobpt UDPATE OBJECT paragraph (3)
UPDATE OBJECTS BY ID_D = 100000,100001
[Paragraph
   other_monads := {5-7};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
| 100001      |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from paragraph in 1-9 (2)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from phrase in 1-6 (1)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Subj ",phrase_type="NP",other_monads=" { 9 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Rela Subj ",phrase_type="NP",other_monads=" { 8 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Pred ",phrase_type="VP",other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query nobpt Updating Phrase object type in monads {1-3}
UPDATE OBJECTS BY MONADS = {1-3}
[Phrase
  phrase_function := (Adju,Time);
  phrase_type := PP;
  other_monads := {1-3};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
| 11          |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from phrase in 1-6 (2)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Pred ",phrase_type="VP",other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer

++++ query nobpt Updating phrase objects by id_d
UPDATE OBJECTS BY ID_D = 10,12
[Phrase
  phrase_function := (Time,Adju);
  phrase_type := AP;
  other_monads := {3-5, 8-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
| 12          |
+-------------+
---- answer
++++ query nobpt Updating phrase objects by id_d (2)
UPDATE OBJECTS BY ID_D = 16
[Phrase
  phrase_type := NP;
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 16          |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from phrase in 1-6 (2)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Time Adju ",phrase_type="AP",other_monads=" { 3-5, 8-9 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Time Adju ",phrase_type="AP",other_monads=" { 3-5, 8-9 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query selecting features from object type phrase
SELECT FEATURES FROM OBJECT TYPE [Phrase] GO
++++ answer
+-----------------------+---------------------------+------------------+-----------------+
| feature name : string | type : string             | default : string | computed : bool |
+-----------------------+---------------------------+------------------+-----------------+
| other_monads          | set of monads             | ' {  } '         | false           |
| phrase_function       | list of phrase_function_t | ''               | false           |
| phrase_type           | phrase_type_t             | 'NP'             | false           |
| self                  | id_d                      | '0'              | true            |
+-----------------------+---------------------------+------------------+-----------------+
---- answer
#++++ query getting features from object type phrase
#GET FEATURES self, other_monads, phrase_function, phrase_type
#FROM OBJECTS WITH ID_DS = 10,11,12
#[Phrase]
#GO
#++++ answer
#+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
#| id_d : id_d | self : id_d | other_monads : set_of_monads | phrase_function : list_of_enum(phrase_function_t) | phrase_type : enum(phrase_type_t) |
#+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
#| 10          | 10          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
#| 11          | 11          |  { 1-3 }                     |  Adju Time                                        | PP                                |
#| 12          | 12          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
#+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
#---- answer
++++ query getting the compiler to fail on part_of(phrase_function, substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(phrase_function, substrate)
   ]
]
GO
++++ answer failcompiler
Typechecking failed with compiler error
Although the feature phrase_function exists
on the object type of the object block with a monad set relation clause,
it is not of the type SET OF MONADS and therefore cannot be used in the
monad set relation clause.
---- answer
++++ query getting the compiler to fail on part_of(does_not_exist, substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(does_not_exist, substrate)
   ]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature does_not_exist does not exist
on the object type of the object block with a monad set relation clause.
---- answer

++++ query nobpt UPDATING object type Clause
UPDATE OBJECT TYPE
[Clause
   ADD other_monads : SET OF MONADS;
]
++++ answer
---- answer
++++ query nobpt Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {1-9}
WITH ID_D = 11000000
[Clause
   other_monads := {3-7,10-12};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000000    |
+-------------+
---- answer
++++ query nobpt Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {5-7}
WITH ID_D = 11000001
[Clause
   other_monads := {1-4,8-12};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000001    |
+-------------+
---- answer

++++ dumpdb

++++ query select all objects with part_of(other_monads,substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate)
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query select all objects with overlap(other_monads,substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate)
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate, and get tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate)
      [Word GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 10 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get def_article tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word pos=def_article GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word pos=def_article GET surface]
      [Word pos=noun GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP GET monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with part_of relation between clause and substrate and a feature-constraints with an index, and get two def_article/noun tokens inside, getting monads 
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate) phrase_type=NP GET monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP GET monads, other_monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ",other_monads=" { 1-2 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with part_of relation between clause and substrate and a feature-constraints with an index, and get two def_article/noun tokens inside, getting monads and other_monads
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate) phrase_type=NP GET monads, other_monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ",other_monads=" { 1-2 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single monad objects 'Word' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Word GET monads]
GO
++++ answer
 // <  < [ Word 1 { 1 } false (monads=" { 1 } ") //  <  > 
 ]
[ Word 2 { 2 } false (monads=" { 2 } ") //  <  > 
 ]
[ Word 3 { 3 } false (monads=" { 3 } ") //  <  > 
 ]
[ Word 4 { 4 } false (monads=" { 4 } ") //  <  > 
 ]
[ Word 5 { 5 } false (monads=" { 5 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single range objects 'Paragraph' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Paragraph GET monads]
GO
++++ answer
 // <  < [ Paragraph 100000 { 1-9 } false (monads=" { 1-9 } ") //  <  > 
 ]
[ Paragraph 100001 { 2-8 } false (monads=" { 2-8 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single range objects 'Paragraph' with GET monads, self, monads, self
GET OBJECTS HAVING MONADS IN {1-5}
[Paragraph GET monads, self, monads, self]
GO
++++ answer
 // <  < [ Paragraph 100000 { 1-9 } false (monads=" { 1-9 } ",self="100000",monads=" { 1-9 } ",self="100000") //  <  > 
 ]
[ Paragraph 100001 { 2-8 } false (monads=" { 2-8 } ",self="100001",monads=" { 2-8 } ",self="100001") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from multiple range objects 'Clause' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Clause GET monads]
GO
++++ answer
 // <  < [ Clause 11000000 { 1-9 } false (monads=" { 1-9 } ") //  <  > 
 ]
[ Clause 11000001 { 5-7 } false (monads=" { 5-7 } ") //  <  > 
 ]
 > 
 >
---- answer

++++ query GET OBJECTS HAVING MOANDS IN from multiple range objects 'Clause' with GET self, monads, self, monads, self
GET OBJECTS HAVING MONADS IN {1-100}
[Clause GET self, monads, self, monads, self]
GO
++++ answer
 // <  < [ Clause 11000000 { 1-9 } false (self="11000000",monads=" { 1-9 } ",self="11000000",monads=" { 1-9 } ",self="11000000") //  <  > 
 ]
[ Clause 11000001 { 5-7 } false (self="11000001",monads=" { 5-7 } ",self="11000001",monads=" { 5-7 } ",self="11000001") //  <  > 
 ]
 > 
 >
---- answer

#++++ query getting features from word object with monad set retrieval 1
#GET FEATURES surface, pos, monads, parent, magic
#FROM OBJECTS WITH ID_DS = 2,5
#[Word]
#GO
#++++ answer
#+-------------+------------------+-------------------+------------------------+---------------+-----------------+
#| id_d : id_d | surface : string | pos : enum(pos_t) | monads : set_of_monads | parent : id_d | magic : integer |
#+-------------+------------------+-------------------+------------------------+---------------+-----------------+
#| 2           | door,            | noun              |  { 2 }                 | 10            | 1               |
#| 5           | towards          | preposition       |  { 5 }                 | 13            | 7               |
#+-------------+------------------+-------------------+------------------------+---------------+-----------------+
#---- answer
#++++ query getting features from paragraph object with monad set retrieval 1
#GET FEATURES monads, other_monads, self
#FROM OBJECTS WITH ID_DS = 100001, 100000
#[paragraph]
#GO
#++++ answer
#+-------------+------------------------+------------------------------+-------------+
#| id_d : id_d | monads : set_of_monads | other_monads : set_of_monads | self : id_d |
#+-------------+------------------------+------------------------------+-------------+
#| 100000      |  { 1-9 }               |  { 5-7 }                     | 100000      |
#| 100001      |  { 2-8 }               |  { 5-7 }                     | 100001      |
#+-------------+------------------------+------------------------------+-------------+
#---- answer
#++++ query getting features from object type phrase
#GET FEATURES monads, self, other_monads, phrase_function, phrase_type
#FROM OBJECTS WITH ID_DS = 10,11,12
#[Phrase]
#GO
#++++ answer
#+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
#| id_d : id_d | monads : set_of_monads | self : id_d | other_monads : set_of_monads | phrase_function : list_of_enum(phrase_function_t) | phrase_type : enum(phrase_type_t) |
#+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
#| 10          |  { 1-2 }               | 10          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
#| 11          |  { 3 }                 | 11          |  { 1-3 }                     |  Adju Time                                        | PP                                |
#| 12          |  { 4 }                 | 12          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
#+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
#---- answer

++++ query newdb creating object type describer with SET OF MONADS feature

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE OBJECT TYPE
[Describer
    described_som : SET OF MONADS;
]
GO

CREATE OBJECTS WITH OBJECT TYPE [Describer]
CREATE OBJECT FROM MONADS = { 1-396 }
WITH ID_D = 240000
[	
described_som := {40201};	
]
CREATE OBJECT FROM MONADS = { 397-550 }
WITH ID_D = 240001
[	
described_som := {40201-40400};	
]
CREATE OBJECT FROM MONADS = { 551-804 }
WITH ID_D = 240002
[	
described_som := {40201-40400};	
]
CREATE OBJECT FROM MONADS = { 805-998 }
WITH ID_D = 240003
[	
described_som := {40202};	
]
CREATE OBJECT FROM MONADS = { 999-1038 }
WITH ID_D = 240004
[	
described_som := {40202-44400};	
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 5                      |
+------------------------+
---- answer
++++ query nobpt Vacuum database

//////////////////////////////////////////////////// 
// 
// VACUUM database
// 
//////////////////////////////////////////////////// 

VACUUM DATABASE ANALYZE GO

++++ answer
---- answer

++++ dumpdb

++++ query selecting non-monads monad set with overlap in topographic query #1
SELECT ALL OBJECTS 
IN {40201} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #2
SELECT ALL OBJECTS 
IN {40202} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #3
SELECT ALL OBJECTS 
IN {40202-40203} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #4
SELECT ALL OBJECTS 
IN {40201-50000} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #5
SELECT ALL OBJECTS 
IN {40200-40450} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #6
SELECT ALL OBJECTS 
IN {1-40}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #7
SELECT ALL OBJECTS 
IN {1-50000000}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #8
SELECT ALL OBJECTS 
IN {2-40200}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query get objects having monads in MONADS feature with explicit MONADS feature
GET OBJECTS HAVING MONADS IN
{ 2-997 }
USING MONAD FEATURE MONADS
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 1-396 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ Describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #1
GET OBJECTS HAVING MONADS IN
{ 40000-44399 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #2
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-40500 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #3
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #4
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer GET ALL]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (described_som=" { 40201 } ",self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (described_som=" { 40201-40400 } ",self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (described_som=" { 40201-40400 } ",self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (described_som=" { 40202-44400 } ",self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #5
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false  //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false  //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false  //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false  //  <  > 
 ]
 > 
 >
---- answer

++++ query nobpt create object type with extremely long name...
CREATE OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  MYINTEGER : INTEGER;
  MYID_D : id_d;
  MYASCII : ASCII;
  MYSTRING : STRING;
  MYSTRINGFROMSET : STRING FROM SET;
  MYSOM : SET OF MONADS;
  MYENUM : phrase_type_t;
  MYLISTOFINTEGER : LIST OF INTEGER;
  MYLISTOFID_D : LIST OF ID_D;
  MYLISTOFENUM : LIST OF Phrase_type_t;
]
GO
++++ answer
---- answer
++++ query nobpt creating one object (1) inside the long-named object type
CREATE OBJECT
FROM MONADS = {1}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := (VP,NP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 240005      |
+-------------+
---- answer
++++ query nobpt creating one object (2) inside the long-named object type
CREATE OBJECT
FROM MONADS = {2}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 101;
  myid_d := nil;
  myascii := "Blah2";
  mystring := "Blah2 blah2";
  mystringfromset := "BLAH2";
  mysom := { 1-12 };
  myenum := VP;
  mylistofinteger := (1,2,3,4000000);
  mylistofid_d := (1,2,3,3000000);
  mylistofenum := (NP,VP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 240006      |
+-------------+
---- answer
++++ query nobpt creating more than one object inside the long-named object type
CREATE OBJECTS WITH OBJECT TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
CREATE OBJECT
FROM MONADS = {3}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := ();
]
CREATE OBJECT
FROM MONADS = {4}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 4 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := ();
  mylistofenum := (VP);
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 2                      |
+------------------------+
---- answer

++++ query newdb REcreating realistic DB schema
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
WITHOUT UNIQUE MONADS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
WITHOUT UNIQUE MONADS
[Clause]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph]
GO
++++ answer
---- answer
++++ query nobpt UPDATING object type Phrase
UPDATE OBJECT TYPE
[Phrase
   REMOVE phrase_function;
   ADD surface: STRING FROM SET;
   ADD pos : pos_t;
   ADD parent : id_d;
   ADD lemma : STRING FROM SET WITH INDEX;
   ADD parents : LIST OF id_d;
   ADD magic : integer DEFAULT 42;
]
++++ answer
---- answer
++++ dumpdb
++++ query selecting features from newly updated Phrase object type
SELECT FEATURES FROM TYPE [Phrase]
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| phrase_type           | phrase_type_t | 'NP'             | false           |
| self                  | id_d          | '0'              | true            |
| surface               | string        | ''               | false           |
| pos                   | pos_t         | 'def_article'    | false           |
| parent                | id_d          | '0'              | false           |
| lemma                 | string        | ''               | false           |
| parents               | list of id_d  | ''               | false           |
| magic                 | integer       | '42'             | false           |
+-----------------------+---------------+------------------+-----------------+
---- answer
++++ query nobpt UPDATING object type Word, removing all features
UPDATE TYPE
[Word
   REMOVE surface;
   REMOVE pos;
   REMOVE parent;
   REMOVE lemma;
   REMOVE parents;
   REMOVE magic;
]
++++ answer
---- answer

++++ dumpdb

++++ query selecting features from newly updated Word object type
SELECT FEATURES FROM TYPE [Word]
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| self                  | id_d          | '0'              | true            |
+-----------------------+---------------+------------------+-----------------+
---- answer
++++ query nobpt UPDATING object type Word, adding a lot of features...
UPDATE TYPE
[Word
    ADD myinteger : INTEGER DEFAULT 23;
    ADD myintegerwithindex : INTEGER WITH INDEX DEFAULT -133;
    ADD myid_d : ID_D DEFAULT 2;
    ADD myid_dwithindex : ID_D WITH INDEX DEFAULT 1;
    ADD mystring : STRING DEFAULT "blah";
    ADD mystringwithindex : STRING WITH INDEX DEFAULT "blof";
    ADD mystringfromset : STRING FROM SET DEFAULT "bloat";
    ADD mystringfromsetwithindex : STRING FROM SET WITH INDEX DEFAULT "float";
    ADD myascii : ASCII DEFAULT "blah";
    ADD myasciiwithindex : ASCII WITH INDEX DEFAULT "blof";
    ADD myasciifromset : ASCII FROM SET DEFAULT "bloat";
    ADD myasciifromsetwithindex : ASCII FROM SET WITH INDEX DEFAULT "float";
    ADD myphrasefunction : Phrase_Function_T DEFAULT Subj;
    ADD mylistofinteger : LIST OF INTEGER;
    ADD mylistofid_d : LIST OF ID_D;
    ADD mylistofenum : LIST OF Phrase_Function_T;
]
++++ answer
---- answer

++++ dumpdb

++++ query selecting features from newly updated Word object type
SELECT FEATURES FROM TYPE [Word]
++++ answer
+--------------------------+---------------------------+------------------+-----------------+
| feature name : string    | type : string             | default : string | computed : bool |
+--------------------------+---------------------------+------------------+-----------------+
| self                     | id_d                      | '0'              | true            |
| myinteger                | integer                   | '23'             | false           |
| myintegerwithindex       | integer                   | '-133'           | false           |
| myid_d                   | id_d                      | '2'              | false           |
| myid_dwithindex          | id_d                      | '1'              | false           |
| mystring                 | string                    | 'blah'           | false           |
| mystringwithindex        | string                    | 'blof'           | false           |
| mystringfromset          | string                    | 'bloat'          | false           |
| mystringfromsetwithindex | string                    | 'float'          | false           |
| myascii                  | ascii                     | 'blah'           | false           |
| myasciiwithindex         | ascii                     | 'blof'           | false           |
| myasciifromset           | ascii                     | 'bloat'          | false           |
| myasciifromsetwithindex  | ascii                     | 'float'          | false           |
| myphrasefunction         | phrase_function_t         | 'Subj'           | false           |
| mylistofinteger          | list of integer           | ''               | false           |
| mylistofid_d             | list of id_d              | ''               | false           |
| mylistofenum             | list of phrase_function_t | ''               | false           |
+--------------------------+---------------------------+------------------+-----------------+
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot assign number less than 0 to id_d.
UPDATE OBJECT TYPE
[Paragraph
   ADD myid_d : id_d DEFAULT -1;
]
++++ answer failcompiler
Typechecking failed with compiler error
You cannot assign a number below 0 to an id_d.
Feature myid_d is not type-compatible with its default value.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot REMOVE self.
UPDATE OBJECT TYPE
[Paragraph
   REMOVE self;
]
++++ answer failcompiler
Weeding failed with compiler error
Cannot remove feature 'self'.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot ADD self.
UPDATE OBJECT TYPE
[Paragraph
   ADD self : STRING from set;
]
++++ answer failcompiler
Weeding failed with compiler error
Feature 'self' is implicitly declared and cannot be declared explicitly.
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot declare self.
CREATE OBJECT TYPE
[WillNotBeCreated
   self : STRING from set;
]
++++ answer failcompiler
Weeding failed with compiler error
Feature 'self' is implicitly declared and cannot be declared explicitly.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot add feature with non-existent enum
UPDATE OBJECT TYPE
[Paragraph
   ADD featurewillnotbeadded : enumwhichdoesnotexist_t;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumwhichdoesnotexist_t used as the type of feature featurewillnotbeadded does not exist.
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot add feature with non-existent enum
CREATE OBJECT TYPE
[WillNotBeCreated
   featurewillnotbecreated : enumwhichdoesnotexist_t;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumwhichdoesnotexist_t used as the type of feature featurewillnotbecreated does not exist.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot add feature with non-existent enum constant
UPDATE OBJECT TYPE
[Paragraph
   ADD featurewillnotbeadded : Phrase_Type_t DEFAULT NotApplicable;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant NotApplicable does not exist in the enumeration Phrase_Type_t used as the type of feature featurewillnotbeadded.
---- answer
++++ query nobpt DELETE OBJECTS from an object type with no objects
DELETE OBJECTS 
BY MONADS = { 1 - 210000000 }
[Paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot add feature with non-existent enum constant
CREATE OBJECT TYPE
[WillNotBeCreated
   featurewillnotbeadded : Phrase_Type_t DEFAULT NotApplicable;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant NotApplicable does not exist in the enumeration Phrase_Type_t used as the type of feature featurewillnotbeadded.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot add feature which exists already
UPDATE OBJECT TYPE
[Word
    ADD myinteger : INTEGER DEFAULT 150;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature myinteger exists already.  Cannot add again.
---- answer
++++ query nobpt DROP OBJECT TYPE fail: Cannot remove non-existent object type
DROP TYPE [DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type DoesNotExist does not exist.
---- answer
++++ query nobpt UPDATE OBJECT TYPE fail: Cannot update non-existent object type
UPDATE TYPE [DoesNotExist
	ADD willnotbeadded : integer;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type DoesNotExist does not exist.
---- answer
++++ query nobpt CREATE OBJECT TYPE fail: Cannot create already-existent object type
CREATE TYPE [Word]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type Word exists already.
---- answer
++++ query nobpt CREATE ENUMERATION fail: Cannot have two defaults
CREATE ENUMERATION will_not_be_created_t = {
   DEFAULT blah = 1,
   DEFAULT blof = 2
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query nobpt CREATE ENUMERATION fail: Cannot have two constants with the same name
CREATE ENUMERATION will_not_be_created_t = {
   blah = 1,
   blah = 2
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant blah is declared more than once.
This is not allowed.
---- answer
++++ query nobpt CREATE ENUMERATION fail: Cannot have two constants with the same value
CREATE ENUMERATION will_not_be_created_t = {
   blah = 1,
   blof = 1
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Value 1 is assigned to more than one label.
This is not allowed.
---- answer
++++ query nobpt CREATE ENUMERATION enumtest_t
CREATE ENUMERATION enumtest_t = {
    DEFAULT one = 1,
    two = 2,
    three = 3
}
++++ answer
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t: Cannot remove default without specifying new default
UPDATE ENUMERATION enumtest_t = {
    REMOVE one
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Default is removed without specifying new default.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot have more than one default: ADD ADD
UPDATE ENUMERATION enumtest_t = {
    ADD DEFAULT four = 4,
    ADD DEFAULT five = 5
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot have more than one default: ADD UPDATE
UPDATE ENUMERATION enumtest_t = {
    ADD DEFAULT four = 4,
    UPDATE DEFAULT three = 5
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot add already-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    ADD three = 4
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant three exists already.  Cannot add.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot update non-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    UPDATE DEFAULT ten = 10
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant ten does not exist.  Cannot update.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t fail: Cannot remove non-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    REMOVE ten
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant ten does not exist.  Cannot remove.
---- answer
++++ query nobpt UPDATE ENUMERATION enumtest_t success
UPDATE ENUMERATION enumtest_t = {
    REMOVE one,
    ADD DEFAULT four = 4,
    UPDATE three = 5
}
++++ answer
---- answer

++++ dumpdb

++++ query nobpt SELECT ENUMERATION CONSTANTS enumtest_t
SELECT ENUMERATION CONSTANTS FROM ENUMERATION enumtest_t
++++ answer
+---------------------+-----------------+----------------+
| enum const : string | value : integer | default : bool |
+---------------------+-----------------+----------------+
| four                | 4               | true           |
| three               | 5               | false          |
| two                 | 2               | false          |
+---------------------+-----------------+----------------+
---- answer
++++ query nobpt DROP ENUMERATION fail: enum must exist
DROP ENUMERATION DoesNotExist_t
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration DoesNotExist_t did not exist.
---- answer
++++ query nobpt DROP ENUMERATION enumtest_t
DROP ENUMERATION enumtest_t
++++ answer
---- answer

++++ dumpdb

++++ query SELECT ENUMERATION CONSTANTS enumtest_t fail: Does not exist
SELECT ENUMERATION CONSTANTS FROM ENUMERATION enumtest_t
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumtest_t did not exist.
---- answer
++++ query nobpt CREATE SEGMENT
CREATE SEGMENT one_five RANGE = 1 - 5
++++ answer
---- answer
++++ query nobpt CREATE SEGMENT fail: Cannot create backwards range
CREATE SEGMENT five_one RANGE = 5 - 1
++++ answer failcompiler
Weeding failed with compiler error
Range in monad set must be monotonic (i.e., in 'A - B',
B must be greater than or equal to A).
The offending mse was 5-1.
---- answer
++++ query nobpt CREATE SEGMENT fail: Cannot create existing segment
CREATE SEGMENT one_five RANGE = 1 - 6
++++ answer failcompiler
Symbolchecking failed with compiler error
monad set with name 'one_five' exists already.
Cannot create.
---- answer




++++ query nobpt CREATE OBJECT TYPE foobar
CREATE OBJECT TYPE [foobar] GO
++++ answer
---- answer
++++ query nobpt DELETE OBJECTS on foobar, which has no objects
DELETE OBJECTS BY MONADS = { 1-10 } [foobar] GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer




++++ query newdb creating small database for testing object reference machinery
CREATE OBJECT TYPE [Phrase] GO
CREATE OBJECT TYPE [Word psp : INTEGER;] GO
CREATE OBJECT FROM MONADS = {1} [Word psp := 5;] GO
CREATE OBJECT FROM MONADS = {2} [Word psp := 0;] GO
CREATE OBJECT FROM MONADS = {3} [Word psp := 1;] GO
CREATE OBJECT FROM MONADS = {1-3} [Phrase]GO
CREATE OBJECT FROM MONADS = {4} [Word psp := 0;] GO
CREATE OBJECT FROM MONADS = {5} [Word psp := 1;] GO
CREATE OBJECT FROM MONADS = {4-5} [Phrase] GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 7           |
+-------------+
---- answer

++++ dumpdb

++++ query testing the object reference machinery #1
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word psp=5]
  ..
  [Word AS w1 psp=0 OR psp=1]
]
[Phrase
  [Word psp=w1.psp]
]
GO
++++ answer
 //  <  < [ phrase 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ phrase 7 { 4-5 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query newdb creating small database for testing object reference machinery #2
CREATE ENUMERATION pos_t = {
       V,
       N,
       P,
       A,
       PRON,
       NEG
}
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Clause
   mother : id_d;
   parent : id_d;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Phrase
    parent : id_d;
]
GO

CREATE OBJECT TYPE 
WITH SINGLE MONAD OBJECTS
[Word
    surface : STRING;
    pos : pos_t;
    myint : INTEGER;
    parent : id_d;
    mother : id_d;
]
GO





CREATE OBJECT FROM MONADS = {1-10}
WITH ID_D = 16
[Sentence]
GO


CREATE OBJECT FROM MONADS = {1-3}
WITH ID_D = 4
[Clause
   mother := NIL;
   parent := 16;
]
GO



CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {1}
WITH ID_D = 10
[
    parent := 4;
]
CREATE OBJECT
FROM MONADS = {2}
WITH ID_D = 11
[
    parent := 4;
]
CREATE OBJECT
FROM MONADS = {3}
WITH ID_D = 12
[
    parent := 4;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {1}
WITH ID_D = 1
[
    surface := "I";
    pos := PRON;
    myint := 1;
    parent := 10;
    mother := NIL;
]
CREATE OBJECT
FROM MONADS = {2}
WITH ID_D = 2
[
    surface := "am";
    pos := V;
    myint := 2;
    parent := 11;
    mother := 1;
]
CREATE OBJECT
FROM MONADS = {3}
WITH ID_D = 3
[
    surface := "he.";
    pos := PRON;
    myint := 3;
    parent := 12;
    mother := 2;
]
GO








CREATE OBJECT FROM MONADS = {4-7}
WITH ID_D = 9
[Clause
   mother := 4;
   parent := 16;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {4}
WITH ID_D = 13
[
    parent := 9;
]
CREATE OBJECT
FROM MONADS = {5}
WITH ID_D = 14
[
    parent := 9;
]
CREATE OBJECT
FROM MONADS = {6-7}
WITH ID_D = 15
[
    parent := 9;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {4}
WITH ID_D = 5
[
    surface := "He";
    pos := PRON;
    myint := 1;
    parent := 13;
    mother := 10;
]
CREATE OBJECT
FROM MONADS = {5}
WITH ID_D = 6
[
    surface := "is";
    pos := V;
    myint := 2;
    parent := 14;
    mother := 11;
]
CREATE OBJECT
FROM MONADS = {6}
WITH ID_D = 7
[
    surface := "not";
    pos := NEG;
    myint := 1;
    parent := 15;
    mother := 12;
]
CREATE OBJECT
FROM MONADS = {7}
WITH ID_D = 8
[
    surface := "she.";
    pos := PRON;
    myint := 1;
    parent := 15;
    mother := 4;
]
GO

++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 4                      |
+------------------------+
---- answer

++++ dumpdb
	
++++ query testing object reference machinery #2
SELECT ALL OBJECTS IN { 1-7 }
WHERE 
[Clause
  [Word AS w1 GET pos]
]
[Clause
  [Word pos=w1.pos AND myint=1 GET myint, pos]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (myint="1",pos="PRON") //  <  > 
 ]
 > 
 < [ word 8 { 7 } false (myint="1",pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query testing object reference machinery #3
SELECT ALL OBJECTS 
WHERE 
[Clause
  [Word AS w1]
]
[Clause
  [Word pos=w1.pos AND myint=2 GET pos,myint]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 6 { 5 } false (pos="V",myint="2") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query testing object reference machinery #4
SELECT ALL OBJECTS IN {1-7}
WHERE 
[Clause as c1
  [Phrase as p1
    parent = c1.self
    [Word as w1
        parent = p1.self
    ]
  ]
]
[Clause
  [Phrase
    [Word]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 6-7 } false  //  <  < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #5
SELECT ALL OBJECTS IN {1-7}
WHERE 
[Clause as c1
  [Phrase as p1
    parent = c1.self
    [Word AS w1
       parent = p1.self
       GET parent
    ]
  ]
]
[Clause as c2
  [Phrase as p2
    parent = c2.self
    [Word AS w2
       parent = p2.self AND pos = w1.pos
    ]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false (parent="10") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false (parent="11") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false (parent="12") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 6-7 } false  //  <  < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #6
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]
[Clause as c2
  mother = c1.self
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
[ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #7
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]*
[Clause as c2
  mother = c1.self
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'c1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer


++++ query testing object reference machinery #8
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]
OR
[Clause as c2
  mother = c1.self
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'c1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer


++++ query testing object reference machinery #9
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1
       [phrase as p1
         [word as w1]
       ]
    ]
  ]
]
[Clause as c2
  mother = c1.self
  [phrase as p2
     parent = c2.self
     [word as w2
        parent = p2.self AND mother = p1.self AND pos = w1.pos
     ]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #10
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
   [Clause as c1
      [Word as w1 GET pos]
      ..
      [word as w2 GET pos]
   ]
]
[Clause
   [Word pos = w1.pos GET pos]
   ..
   [Word pos = w2.pos GET pos]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
[ word 2 { 2 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
[ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (pos="PRON") //  <  > 
 ]
[ word 6 { 5 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 5 { 4 } false (pos="PRON") //  <  > 
 ]
[ word 8 { 7 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 8 { 7 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query nobpt creating more objects for testing object reference machinery
CREATE OBJECT FROM MONADS = {8-10}
WITH ID_D = 17
[Clause
   mother := 9;
   parent := 16;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {8-9}
WITH ID_D = 18
[
    parent := 17;
]
CREATE OBJECT
FROM MONADS = {10}
WITH ID_D = 19
[
    parent := 17;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {8}
WITH ID_D = 20
[
    surface := "He";
    pos := PRON;
    myint := 1;
    parent := 18;
    mother := 10;
]
CREATE OBJECT
FROM MONADS = {9}
WITH ID_D = 21
[
    surface := "is";
    pos := V;
    myint := 2;
    parent := 18;
    mother := 11;
]
CREATE OBJECT
FROM MONADS = {10}
WITH ID_D = 23
[
    surface := "not";
    pos := NEG;
    myint := 1;
    parent := 19;
    mother := 12;
]
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer



++++ dumpdb


++++ query doing extended querying for object references #1
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1]
   ]
]
[Clause as c2
   [Word as w2 pos <> w1.pos]
]
[Clause as c3
   [Phrase as p1
      [Word (pos = w1.pos AND pos = w2.pos) AND mother = w2.mother]
   ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 18 { 8-9 } false  //  <  < [ word 20 { 8 } false  //  <  > 
 ]
 > 
 < [ word 21 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query doing extended querying for object references #2
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1]
   ]
]
[Clause as c2
   [Word as w2 pos = NEG]
]
[Clause as c3
   [Phrase as p1
      [Word (pos = w1.pos OR pos = w2.pos) AND mother = w2.mother]
   ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 19 { 10 } false  //  <  < [ word 23 { 10 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query doing extended querying for object references #3
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1 GET pos, mother]
   ]
]
..
[Clause as c2
   [Phrase as p1 
      parent = c2.self
      [Word pos = w1.pos AND mother = w1.mother GET pos, mother]
   ]
]
++++ answer
 //  <  < [ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (pos="PRON",mother="10") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V",mother="11") //  <  > 
 ]
 > 
 < [ word 7 { 6 } false (pos="NEG",mother="12") //  <  > 
 ]
 > 
 < [ word 8 { 7 } false (pos="PRON",mother="4") //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 18 { 8-9 } false  //  <  < [ word 20 { 8 } false (pos="PRON",mother="10") //  <  > 
 ]
 > 
 < [ word 21 { 9 } false (pos="V",mother="11") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 19 { 10 } false  //  <  < [ word 23 { 10 } false (pos="NEG",mother="12") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 3 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 3 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 5 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 5 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 6 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 6 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 7 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 7 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 1000 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 1000 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE FEATURE MONADS FROM [Phrase] 
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE FEATURE MONADS FROM [Phrase]
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE FEATURE MONADS FROM [Clause] 
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE FEATURE MONADS FROM [Clause]
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer


# This tests that it is possible to have an object reference usage which
# points to the same object block.
++++ query
SELECT ALL OBJECTS IN {1-4}
WHERE
[word as w1 pos = w1.pos]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
---- answer

# This tests the part_of(substrate) thing.
++++ query
SELECT ALL OBJECTS IN {3-7}
WHERE
[clause part_of(substrate)]
++++ answer
 //  <  < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(substrate) thing.
++++ query
SELECT ALL OBJECTS 
IN {2-7}
WHERE
[clause overlap(substrate)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the part_of(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3, 7-10}
WHERE
[clause part_of(universe)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3,7-9}
WHERE
[clause overlap(universe)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3,8-9}
WHERE
[clause overlap(substrate)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query newdb creating realistic DB schema (2)
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr, Adju, Time
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom
  other_monads : set of monads;
]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Clause
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph
  other_monads : set of monads;
]
GO
++++ answer
---- answer
++++ query nobpt creating realistic Word objects
CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[
   surface :="The";
   pos := def_article;
   parent := 10;
   lemma := "the";
   parents := (10,17,20,22,23);
   magic := 2;
]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
   surface :="door,";
   pos := noun;
   parent := 10;
   lemma := "door";
   parents := (10,17,20,22,23);
   magic := 1;
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
   surface :="which";
   pos := relative_pronoun;
   parent := 11;
   lemma := "which";
   parents := (11,18,21,22,23);
   magic := 3;
]
CREATE OBJECT FROM MONADS = {4}
WITH ID_D = 4
[
   surface :="opened";
   pos := verb;
   parent := 12;
   lemma := "open";
   parents := (12,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {5}
WITH ID_D = 5
[
   surface :="towards";
   pos := preposition;
   parent := 13;
   lemma := "towards";
   parents := (13,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {6}
WITH ID_D = 6
[
   surface :="the";
   pos := def_article;
   parent := 14;
   lemma := "the";
   parents := (14,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {7}
WITH ID_D = 7
[
   surface :="East,";
   pos := noun;
   parent := 14;
   lemma := "east";
   parents := (14,18,21,22,23);
   magic := 9;
]
CREATE OBJECT FROM MONADS = {8}
WITH ID_D = 8
[
   surface :="was";
   pos := verb;
   parent := 15;
   lemma := "be";
   parents := (15,19,20,22,23);
   magic := 6;
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 9
[
   surface :="blue.";
   pos := adjective;
   parent := 16;
   lemma := "blue";
   parents := (16,19,20,22,23);
   magic := 11;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 9                      |
+------------------------+
---- answer
++++ query nobpt creating realistic Phrase objects
CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 10
[
  phrase_type := NP;
  phrase_function := (Subj);
  other_monads := {9};
]
CREATE OBJECT FROM MONADS = {3-3}
WITH ID_D = 11
[
  phrase_type := NP;
  phrase_function := (Rela,Subj);
  other_monads := {8-8};
]
CREATE OBJECT FROM MONADS = {4-4}
WITH ID_D = 12
[
  phrase_type := VP;
  phrase_function := (Pred);
  other_monads := {5-7};
]
CREATE OBJECT FROM MONADS = {6-7}
WITH ID_D = 14
[
  phrase_type := NP;
  phrase_function := (NA);
  other_monads := {6-7};
]
CREATE OBJECT FROM MONADS = {5-7}
WITH ID_D = 13
[
  phrase_type := PP;
  phrase_function := (Loca);
  other_monads := {3};
]
CREATE OBJECT FROM MONADS = {8-8}
WITH ID_D = 15
[
  phrase_type := VP;
  phrase_function := (PreC);
  other_monads := {3};
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 16
[
  phrase_type := AP;
  phrase_function := (Attr);
  other_monads := {1-2};
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 7                      |
+------------------------+
---- answer
++++ query nobpt Creating paragraph object with empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {1-9}
WITH ID_D = 100000
[Paragraph
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
+-------------+
---- answer
++++ query nobpt Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {2-8}
WITH ID_D = 100001
[Paragraph
   other_monads := {1-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100001      |
+-------------+
---- answer
++++ query nobpt UPDATING object type Clause
UPDATE OBJECT TYPE
[Clause
   REMOVE other_monads;
   ADD surface: STRING FROM SET;
   ADD pos : pos_t;
   ADD parent : id_d;
   ADD lemma : STRING FROM SET WITH INDEX;
   ADD parents : LIST OF id_d;
   ADD other_monads2 : SET OF MONADS;
   ADD magic : integer DEFAULT 42;
]
++++ answer
---- answer

++++ dumpdb
	
++++ query SELECT ALL OBJECTS from paragraph in 1-9 (1)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" {  } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 1-9 } ") //  <  > 
 ]
 > 
 > 
---- answer


++++ query nobpt UDPATE OBJECT paragraph
UPDATE OBJECT BY MONADS = {1-3}
[Paragraph
   other_monads := {7-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
| 100001      |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from paragraph in 1-9 (2)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" { 7-9 } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 7-9 } ") //  <  > 
 ]
 > 
 > 
---- answer


++++ query nobpt UDPATE OBJECT paragraph (3)
UPDATE OBJECTS BY ID_D = 100000,100001
[Paragraph
   other_monads := {5-7};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
| 100001      |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from paragraph in 1-9 (2)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query SELECT ALL OBJECTS from phrase in 1-6 (1)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Subj ",phrase_type="NP",other_monads=" { 9 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Rela Subj ",phrase_type="NP",other_monads=" { 8 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Pred ",phrase_type="VP",other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query nobpt Updating Phrase object type in monads {1-3}
UPDATE OBJECTS BY MONADS = {1-3}
[Phrase
  phrase_function := (Adju,Time);
  phrase_type := PP;
  other_monads := {1-3};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
| 11          |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from phrase in 1-6 (2)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Pred ",phrase_type="VP",other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query nobpt Updating phrase objects by id_d
UPDATE OBJECTS BY ID_D = 10,12
[Phrase
  phrase_function := (Time,Adju);
  phrase_type := AP;
  other_monads := {3-5, 8-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
| 12          |
+-------------+
---- answer
++++ query nobpt Updating phrase objects by id_d (2)
UPDATE OBJECTS BY ID_D = 16
[Phrase
  phrase_type := NP;
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 16          |
+-------------+
---- answer

++++ dumpdb

++++ query SELECT ALL OBJECTS from phrase in 1-6 (2)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Time Adju ",phrase_type="AP",other_monads=" { 3-5, 8-9 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Time Adju ",phrase_type="AP",other_monads=" { 3-5, 8-9 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query selecting features from object type phrase
SELECT FEATURES FROM OBJECT TYPE [Phrase] GO
++++ answer
+-----------------------+---------------------------+------------------+-----------------+
| feature name : string | type : string             | default : string | computed : bool |
+-----------------------+---------------------------+------------------+-----------------+
| other_monads          | set of monads             | ' {  } '         | false           |
| phrase_function       | list of phrase_function_t | ''               | false           |
| phrase_type           | phrase_type_t             | 'NP'             | false           |
| self                  | id_d                      | '0'              | true            |
+-----------------------+---------------------------+------------------+-----------------+
---- answer
++++ query nobpt getting features from object type phrase
GET FEATURES self, other_monads, phrase_function, phrase_type
FROM OBJECTS WITH ID_DS = 10,11,12
[Phrase]
GO
++++ answer
+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| id_d : id_d | self : id_d | other_monads : set_of_monads | phrase_function : list_of_enum(phrase_function_t) | phrase_type : enum(phrase_type_t) |
+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| 10          | 10          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
| 11          | 11          |  { 1-3 }                     |  Adju Time                                        | PP                                |
| 12          | 12          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
---- answer
++++ query getting the compiler to fail on part_of(phrase_function, substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(phrase_function, substrate)
   ]
]
GO
++++ answer failcompiler
Typechecking failed with compiler error
Although the feature phrase_function exists
on the object type of the object block with a monad set relation clause,
it is not of the type SET OF MONADS and therefore cannot be used in the
monad set relation clause.
---- answer
++++ query getting the compiler to fail on part_of(does_not_exist, substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(does_not_exist, substrate)
   ]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature does_not_exist does not exist
on the object type of the object block with a monad set relation clause.
---- answer
++++ query nobpt UPDATING object type Clause
UPDATE OBJECT TYPE
[Clause
   ADD other_monads : SET OF MONADS;
]
++++ answer
---- answer
++++ query nobpt Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {1-9}
WITH ID_D = 11000000
[Clause
   other_monads := {3-7,10-12};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000000    |
+-------------+
---- answer
++++ query nobpt Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {5-7}
WITH ID_D = 11000001
[Clause
   other_monads := {1-4,8-12};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000001    |
+-------------+
---- answer


++++ dumpdb

	   
++++ query select all objects with part_of(other_monads,substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate)
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query select all objects with overlap(other_monads,substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate)
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate, and get tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate)
      [Word GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 10 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get def_article tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word pos=def_article GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word pos=def_article GET surface]
      [Word pos=noun GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP GET monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate) phrase_type=NP GET monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP GET monads, other_monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ",other_monads=" { 1-2 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with part_of relation between clause and substrate and a feature-constraints with an index, and get two def_article/noun tokens inside, getting monads and other_monads
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate) phrase_type=NP GET monads, other_monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ",other_monads=" { 1-2 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single monad objects 'Word' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Word GET monads]
GO
++++ answer
 // <  < [ Word 1 { 1 } false (monads=" { 1 } ") //  <  > 
 ]
[ Word 2 { 2 } false (monads=" { 2 } ") //  <  > 
 ]
[ Word 3 { 3 } false (monads=" { 3 } ") //  <  > 
 ]
[ Word 4 { 4 } false (monads=" { 4 } ") //  <  > 
 ]
[ Word 5 { 5 } false (monads=" { 5 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single range objects 'Paragraph' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Paragraph GET monads]
GO
++++ answer
 // <  < [ Paragraph 100000 { 1-9 } false (monads=" { 1-9 } ") //  <  > 
 ]
[ Paragraph 100001 { 2-8 } false (monads=" { 2-8 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from multiple range objects 'Clause' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Clause GET monads]
GO
++++ answer
 // <  < [ Clause 11000000 { 1-9 } false (monads=" { 1-9 } ") //  <  > 
 ]
[ Clause 11000001 { 5-7 } false (monads=" { 5-7 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query nobpt getting features from word object with monad set retrieval 1
GET FEATURES surface, pos, monads, parent, magic
FROM OBJECTS WITH ID_DS = 2,5
[Word]
GO
++++ answer
+-------------+------------------+-------------------+------------------------+---------------+-----------------+
| id_d : id_d | surface : string | pos : enum(pos_t) | monads : set_of_monads | parent : id_d | magic : integer |
+-------------+------------------+-------------------+------------------------+---------------+-----------------+
| 2           | door,            | noun              |  { 2 }                 | 10            | 1               |
| 5           | towards          | preposition       |  { 5 }                 | 13            | 7               |
+-------------+------------------+-------------------+------------------------+---------------+-----------------+
---- answer
++++ query nobpt getting features from paragraph object with monad set retrieval 1
GET FEATURES monads, other_monads, self
FROM OBJECTS WITH ID_DS = 100001, 100000
[paragraph]
GO
++++ answer
+-------------+------------------------+------------------------------+-------------+
| id_d : id_d | monads : set_of_monads | other_monads : set_of_monads | self : id_d |
+-------------+------------------------+------------------------------+-------------+
| 100000      |  { 1-9 }               |  { 5-7 }                     | 100000      |
| 100001      |  { 2-8 }               |  { 5-7 }                     | 100001      |
+-------------+------------------------+------------------------------+-------------+
---- answer
++++ query nobpt getting features from object type phrase
GET FEATURES monads, self, other_monads, phrase_function, phrase_type
FROM OBJECTS WITH ID_DS = 10,11,12
[Phrase]
GO
++++ answer
+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| id_d : id_d | monads : set_of_monads | self : id_d | other_monads : set_of_monads | phrase_function : list_of_enum(phrase_function_t) | phrase_type : enum(phrase_type_t) |
+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| 10          |  { 1-2 }               | 10          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
| 11          |  { 3 }                 | 11          |  { 1-3 }                     |  Adju Time                                        | PP                                |
| 12          |  { 4 }                 | 12          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
---- answer
++++ query nobpt creating object type describer with SET OF MONADS feature
CREATE OBJECT TYPE
[Describer
    described_som : SET OF MONADS;
]
GO
++++ answer
---- answer
++++ query nobpt creating objects in object type Describer
CREATE OBJECTS WITH OBJECT TYPE [Describer]
CREATE OBJECT FROM MONADS = { 1-396 }
WITH ID_D = 240000
[	
described_som := {40201};	
]
CREATE OBJECT FROM MONADS = { 397-550 }
WITH ID_D = 240001
[	
described_som := {40201-40400};	
]
CREATE OBJECT FROM MONADS = { 551-804 }
WITH ID_D = 240002
[	
described_som := {40201-40400};	
]
CREATE OBJECT FROM MONADS = { 805-998 }
WITH ID_D = 240003
[	
described_som := {40202};	
]
CREATE OBJECT FROM MONADS = { 999-1038 }
WITH ID_D = 240004
[	
described_som := {40202-44400};	
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 5                      |
+------------------------+
---- answer

++++ dumpdb

++++ query selecting non-monads monad set with overlap in topographic query #1
SELECT ALL OBJECTS 
IN {40201} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #2
SELECT ALL OBJECTS 
IN {40202} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #3
SELECT ALL OBJECTS 
IN {40202-40203} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #4
SELECT ALL OBJECTS 
IN {40201-50000} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #5
SELECT ALL OBJECTS 
IN {40200-40450} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #6
SELECT ALL OBJECTS 
IN {1-40}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #7
SELECT ALL OBJECTS 
IN {1-50000000}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #8
SELECT ALL OBJECTS 
IN {2-40200}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query get objects having monads in MONADS feature with explicit MONADS feature
GET OBJECTS HAVING MONADS IN
{ 2-997 }
USING MONAD FEATURE MONADS
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 1-396 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ Describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #1
GET OBJECTS HAVING MONADS IN
{ 40000-44399 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #2
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-40500 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #3
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #4
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer GET ALL]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (described_som=" { 40201 } ",self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (described_som=" { 40201-40400 } ",self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (described_som=" { 40201-40400 } ",self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (described_som=" { 40202-44400 } ",self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #5
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false  //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false  //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false  //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false  //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #1
SELECT ALL OBJECTS 
IN {40202, 44000}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #2
SELECT ALL OBJECTS 
IN {44000}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #3
SELECT ALL OBJECTS 
IN {396,397,804}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #4
SELECT ALL OBJECTS 
IN {396-800}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #5
SELECT ALL OBJECTS 
IN {396-806}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #6
SELECT ALL OBJECTS 
IN {550-998}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query nobpt create object type with extremely long name...
CREATE OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  MYINTEGER : INTEGER;
  MYID_D : id_d;
  MYASCII : ASCII;
  MYSTRING : STRING;
  MYSTRINGFROMSET : STRING FROM SET;
  MYSOM : SET OF MONADS;
  MYENUM : phrase_type_t;
  MYLISTOFINTEGER : LIST OF INTEGER;
  MYLISTOFID_D : LIST OF ID_D;
  MYLISTOFENUM : LIST OF Phrase_type_t;
]
GO
++++ answer
---- answer
++++ query nobpt creating one object (1) inside the long-named object type
CREATE OBJECT
FROM MONADS = {1}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := (VP,NP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000002    |
+-------------+
---- answer
++++ query nobpt creating one object (2) inside the long-named object type
CREATE OBJECT
FROM MONADS = {2}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 101;
  myid_d := nil;
  myascii := "Blah2";
  mystring := "Blah2 blah2";
  mystringfromset := "BLAH2";
  mysom := { 1-12 };
  myenum := VP;
  mylistofinteger := (1,2,3,4000000);
  mylistofid_d := (1,2,3,3000000);
  mylistofenum := (NP,VP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000003    |
+-------------+
---- answer
++++ query nobpt creating more than one object inside the long-named object type
CREATE OBJECTS WITH OBJECT TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
CREATE OBJECT
FROM MONADS = {3}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := ();
]
CREATE OBJECT
FROM MONADS = {4}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 4 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := ();
  mylistofenum := (VP);
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 2                      |
+------------------------+
---- answer
++++ query nobpt UPDATE OBJECT TYPE on very long Object Type Name (1)
UPDATE TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
	ADD willbeadded : integer;
]
++++ answer 
---- answer
++++ query nobpt UPDATE OBJECT TYPE on very long Object Type Name (2)
UPDATE TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
	ADD willbeadded2 : integer;
        REMOVE willbeadded;
]
++++ answer 
---- answer
++++ dumpdb
++++ query GET OBJECTS HAVING MONADS IN on very long object type name
GET OBJECTS
HAVING MONADS IN {1-100000 }
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
GET all]
++++ answer 
 // <  < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000002 { 1 } false (mylistofenum=" VP NP ",mylistofid_d=" 1 2 3 ",mylistofinteger=" 1 2 3 ",myenum="NP",mysom=" { 1-10 } ",mystringfromset="BLAH",mystring="Blah blah",myascii="Blah",myid_d="0",myinteger="100",self="11000002",willbeadded2="0") //  <  > 
 ]
[ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000003 { 2 } false (mylistofenum=" NP VP ",mylistofid_d=" 1 2 3 3000000 ",mylistofinteger=" 1 2 3 4000000 ",myenum="VP",mysom=" { 1-12 } ",mystringfromset="BLAH2",mystring="Blah2 blah2",myascii="Blah2",myid_d="0",myinteger="101",self="11000003",willbeadded2="0") //  <  > 
 ]
[ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000004 { 3 } false (mylistofenum="",mylistofid_d=" 1 2 3 ",mylistofinteger=" 1 2 3 ",myenum="NP",mysom=" { 1-10 } ",mystringfromset="BLAH",mystring="Blah blah",myascii="Blah",myid_d="0",myinteger="100",self="11000004",willbeadded2="0") //  <  > 
 ]
[ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000005 { 4 } false (mylistofenum=" VP ",mylistofid_d="",mylistofinteger=" 1 2 3 ",myenum="NP",mysom=" { 4 } ",mystringfromset="BLAH",mystring="Blah blah",myascii="Blah",myid_d="0",myinteger="100",self="11000005",willbeadded2="0") //  <  > 
 ]
 > 
 >
---- answer
++++ query SELECT ALL OBJECTS on very long object type name
SELECT ALL OBJECTS
IN {1-100000 }
WHERE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
GET
 myinteger,
 myid_d,
 myascii,
 mystring,
 mystringfromset,
 mysom,
 myenum,
 mylistofinteger,
 mylistofid_d,
 mylistofenum
 ]
++++ answer 
 //  <  < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000002 { 1 } false (myinteger="100",myid_d="0",myascii="Blah",mystring="Blah blah",mystringfromset="BLAH",mysom=" { 1-10 } ",myenum="NP",mylistofinteger=" 1 2 3 ",mylistofid_d=" 1 2 3 ",mylistofenum=" VP NP ") //  <  > 
 ]
 > 
 < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000003 { 2 } false (myinteger="101",myid_d="0",myascii="Blah2",mystring="Blah2 blah2",mystringfromset="BLAH2",mysom=" { 1-12 } ",myenum="VP",mylistofinteger=" 1 2 3 4000000 ",mylistofid_d=" 1 2 3 3000000 ",mylistofenum=" NP VP ") //  <  > 
 ]
 > 
 < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000004 { 3 } false (myinteger="100",myid_d="0",myascii="Blah",mystring="Blah blah",mystringfromset="BLAH",mysom=" { 1-10 } ",myenum="NP",mylistofinteger=" 1 2 3 ",mylistofid_d=" 1 2 3 ",mylistofenum="") //  <  > 
 ]
 > 
 < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000005 { 4 } false (myinteger="100",myid_d="0",myascii="Blah",mystring="Blah blah",mystringfromset="BLAH",mysom=" { 4 } ",myenum="NP",mylistofinteger=" 1 2 3 ",mylistofid_d="",mylistofenum=" VP ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query SELECT FEATURES FROM an object type with a very long name
SELECT FEATURES
FROM OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
GO
++++ answer
+-----------------------+-----------------------+------------------+-----------------+
| feature name : string | type : string         | default : string | computed : bool |
+-----------------------+-----------------------+------------------+-----------------+
| mylistofenum          | list of phrase_type_t | ''               | false           |
| mylistofid_d          | list of id_d          | ''               | false           |
| mylistofinteger       | list of integer       | ''               | false           |
| myenum                | phrase_type_t         | 'NP'             | false           |
| mysom                 | set of monads         | ' {  } '         | false           |
| mystringfromset       | string                | ''               | false           |
| mystring              | string                | ''               | false           |
| myascii               | ascii                 | ''               | false           |
| myid_d                | id_d                  | '0'              | false           |
| myinteger             | integer               | '0'              | false           |
| self                  | id_d                  | '0'              | true            |
| willbeadded2          | integer               | '0'              | false           |
+-----------------------+-----------------------+------------------+-----------------+
---- answer


++++ query newdb Creating DB from ASV Genesis chapter 1:1-10
//////////////////////////////////////////////////// 
// 
// Create object types
// 
//////////////////////////////////////////////////// 
// Enumeration divtype_e
CREATE ENUMERATION divtype_e = {
  book = 2,
  DEFAULT bookGroup = 1,
  chapter = 3
}
GO


// Object type verse
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[verse
  chapter : integer DEFAULT 0;
  verse : integer DEFAULT 0;
  xmlindex : integer DEFAULT 0;
  osisid : string DEFAULT "";
  osisbook : string FROM SET  DEFAULT "";
]
GO

// Object type token
CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[token
  xmlindex : integer DEFAULT 0;
  surface_stripped_lowcase : string DEFAULT "";
  wholesurface : string DEFAULT "";
]
GO

// Object type paragraph
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[paragraph
  xmlindex : integer DEFAULT 0;
]
GO

// Object type title
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[title
  xmlindex : integer DEFAULT 0;
  divtype : divtype_e DEFAULT bookGroup;
]
GO


// Object type utf8test
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[UTF8Test
  xmlindex : integer DEFAULT 0;
  surface : STRING;
]
GO
++++ answer
---- answer

++++ query nobpt CREATING ASV Verse objects
CREATE OBJECTS
WITH OBJECT TYPE[verse]
CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=23 [
chapter:=1;
verse:=1;
xmlindex:=13;
osisid:=" Gen.1.1 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=24 [
chapter:=1;
verse:=2;
xmlindex:=24;
osisid:=" Gen.1.2 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=25 [
chapter:=1;
verse:=3;
xmlindex:=53;
osisid:=" Gen.1.3 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=26 [
chapter:=1;
verse:=4;
xmlindex:=65;
osisid:=" Gen.1.4 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=27 [
chapter:=1;
verse:=5;
xmlindex:=83;
osisid:=" Gen.1.5 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=28 [
chapter:=1;
verse:=6;
xmlindex:=107;
osisid:=" Gen.1.6 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=29 [
chapter:=1;
verse:=7;
xmlindex:=131;
osisid:=" Gen.1.7 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=30 [
chapter:=1;
verse:=8;
xmlindex:=158;
osisid:=" Gen.1.8 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=31 [
chapter:=1;
verse:=9;
xmlindex:=177;
osisid:=" Gen.1.9 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=32 [
chapter:=1;
verse:=10;
xmlindex:=203;
osisid:=" Gen.1.10 ";
osisbook:="Gen";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 10                     |
+------------------------+
---- answer
++++ query nobpt CREATING ASV Token objects
CREATE OBJECTS
WITH OBJECT TYPE[token]
CREATE OBJECT
FROM MONADS= { 1 } 
WITH ID_D=103 [
xmlindex:=3;
surface_stripped_lowcase:="the";
wholesurface:="The ";
]
CREATE OBJECT
FROM MONADS= { 2 } 
WITH ID_D=104 [
xmlindex:=4;
surface_stripped_lowcase:="first";
wholesurface:="First ";
]
CREATE OBJECT
FROM MONADS= { 3 } 
WITH ID_D=105 [
xmlindex:=5;
surface_stripped_lowcase:="book";
wholesurface:="Book ";
]
CREATE OBJECT
FROM MONADS= { 4 } 
WITH ID_D=106 [
xmlindex:=6;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 5 } 
WITH ID_D=107 [
xmlindex:=7;
surface_stripped_lowcase:="moses";
wholesurface:="Moses, ";
]
CREATE OBJECT
FROM MONADS= { 6 } 
WITH ID_D=108 [
xmlindex:=8;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 7 } 
WITH ID_D=109 [
xmlindex:=9;
surface_stripped_lowcase:="genesis";
wholesurface:="Genesis ";
]
CREATE OBJECT
FROM MONADS= { 8 } 
WITH ID_D=110 [
xmlindex:=14;
surface_stripped_lowcase:="in";
wholesurface:="In ";
]
CREATE OBJECT
FROM MONADS= { 9 } 
WITH ID_D=111 [
xmlindex:=15;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 10 } 
WITH ID_D=112 [
xmlindex:=16;
surface_stripped_lowcase:="beginning";
wholesurface:="beginning ";
]
CREATE OBJECT
FROM MONADS= { 11 } 
WITH ID_D=113 [
xmlindex:=17;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 12 } 
WITH ID_D=114 [
xmlindex:=18;
surface_stripped_lowcase:="created";
wholesurface:="created ";
]
CREATE OBJECT
FROM MONADS= { 13 } 
WITH ID_D=115 [
xmlindex:=19;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 14 } 
WITH ID_D=116 [
xmlindex:=20;
surface_stripped_lowcase:="heavens";
wholesurface:="heavens ";
]
CREATE OBJECT
FROM MONADS= { 15 } 
WITH ID_D=117 [
xmlindex:=21;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 16 } 
WITH ID_D=118 [
xmlindex:=22;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 17 } 
WITH ID_D=119 [
xmlindex:=23;
surface_stripped_lowcase:="earth";
wholesurface:="earth. ";
]
CREATE OBJECT
FROM MONADS= { 18 } 
WITH ID_D=120 [
xmlindex:=25;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 19 } 
WITH ID_D=121 [
xmlindex:=26;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 20 } 
WITH ID_D=122 [
xmlindex:=27;
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
]
CREATE OBJECT
FROM MONADS= { 21 } 
WITH ID_D=123 [
xmlindex:=28;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 22 } 
WITH ID_D=124 [
xmlindex:=29;
surface_stripped_lowcase:="waste";
wholesurface:="waste ";
]
CREATE OBJECT
FROM MONADS= { 23 } 
WITH ID_D=125 [
xmlindex:=30;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 24 } 
WITH ID_D=126 [
xmlindex:=31;
surface_stripped_lowcase:="void";
wholesurface:="void; ";
]
CREATE OBJECT
FROM MONADS= { 25 } 
WITH ID_D=127 [
xmlindex:=32;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 26 } 
WITH ID_D=128 [
xmlindex:=33;
surface_stripped_lowcase:="darkness";
wholesurface:="darkness ";
]
CREATE OBJECT
FROM MONADS= { 27 } 
WITH ID_D=129 [
xmlindex:=34;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 28 } 
WITH ID_D=130 [
xmlindex:=35;
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
]
CREATE OBJECT
FROM MONADS= { 29 } 
WITH ID_D=131 [
xmlindex:=36;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 30 } 
WITH ID_D=132 [
xmlindex:=37;
surface_stripped_lowcase:="face";
wholesurface:="face ";
]
CREATE OBJECT
FROM MONADS= { 31 } 
WITH ID_D=133 [
xmlindex:=38;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 32 } 
WITH ID_D=134 [
xmlindex:=39;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 33 } 
WITH ID_D=135 [
xmlindex:=40;
surface_stripped_lowcase:="deep";
wholesurface:="deep: ";
]
CREATE OBJECT
FROM MONADS= { 34 } 
WITH ID_D=136 [
xmlindex:=41;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 35 } 
WITH ID_D=137 [
xmlindex:=42;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 36 } 
WITH ID_D=138 [
xmlindex:=43;
surface_stripped_lowcase:="spirit";
wholesurface:="Spirit ";
]
CREATE OBJECT
FROM MONADS= { 37 } 
WITH ID_D=139 [
xmlindex:=44;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 38 } 
WITH ID_D=140 [
xmlindex:=45;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 39 } 
WITH ID_D=141 [
xmlindex:=46;
surface_stripped_lowcase:="moved";
wholesurface:="moved ";
]
CREATE OBJECT
FROM MONADS= { 40 } 
WITH ID_D=142 [
xmlindex:=47;
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
]
CREATE OBJECT
FROM MONADS= { 41 } 
WITH ID_D=143 [
xmlindex:=48;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 42 } 
WITH ID_D=144 [
xmlindex:=49;
surface_stripped_lowcase:="face";
wholesurface:="face ";
]
CREATE OBJECT
FROM MONADS= { 43 } 
WITH ID_D=145 [
xmlindex:=50;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 44 } 
WITH ID_D=146 [
xmlindex:=51;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 45 } 
WITH ID_D=147 [
xmlindex:=52;
surface_stripped_lowcase:="waters";
wholesurface:="waters. ";
]
CREATE OBJECT
FROM MONADS= { 46 } 
WITH ID_D=148 [
xmlindex:=54;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 47 } 
WITH ID_D=149 [
xmlindex:=55;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 48 } 
WITH ID_D=150 [
xmlindex:=56;
surface_stripped_lowcase:="said";
wholesurface:="said, ";
]
CREATE OBJECT
FROM MONADS= { 49 } 
WITH ID_D=151 [
xmlindex:=57;
surface_stripped_lowcase:="let";
wholesurface:="Let ";
]
CREATE OBJECT
FROM MONADS= { 50 } 
WITH ID_D=152 [
xmlindex:=58;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 51 } 
WITH ID_D=153 [
xmlindex:=59;
surface_stripped_lowcase:="be";
wholesurface:="be ";
]
CREATE OBJECT
FROM MONADS= { 52 } 
WITH ID_D=154 [
xmlindex:=60;
surface_stripped_lowcase:="light";
wholesurface:="light: ";
]
CREATE OBJECT
FROM MONADS= { 53 } 
WITH ID_D=155 [
xmlindex:=61;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 54 } 
WITH ID_D=156 [
xmlindex:=62;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 55 } 
WITH ID_D=157 [
xmlindex:=63;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 56 } 
WITH ID_D=158 [
xmlindex:=64;
surface_stripped_lowcase:="light";
wholesurface:="light. ";
]
CREATE OBJECT
FROM MONADS= { 57 } 
WITH ID_D=159 [
xmlindex:=66;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 58 } 
WITH ID_D=160 [
xmlindex:=67;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 59 } 
WITH ID_D=161 [
xmlindex:=68;
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
]
CREATE OBJECT
FROM MONADS= { 60 } 
WITH ID_D=162 [
xmlindex:=69;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 61 } 
WITH ID_D=163 [
xmlindex:=70;
surface_stripped_lowcase:="light";
wholesurface:="light, ";
]
CREATE OBJECT
FROM MONADS= { 62 } 
WITH ID_D=164 [
xmlindex:=71;
surface_stripped_lowcase:="that";
wholesurface:="that ";
]
CREATE OBJECT
FROM MONADS= { 63 } 
WITH ID_D=165 [
xmlindex:=72;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 64 } 
WITH ID_D=166 [
xmlindex:=73;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 65 } 
WITH ID_D=167 [
xmlindex:=74;
surface_stripped_lowcase:="good";
wholesurface:="good: ";
]
CREATE OBJECT
FROM MONADS= { 66 } 
WITH ID_D=168 [
xmlindex:=75;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 67 } 
WITH ID_D=169 [
xmlindex:=76;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 68 } 
WITH ID_D=170 [
xmlindex:=77;
surface_stripped_lowcase:="divided";
wholesurface:="divided ";
]
CREATE OBJECT
FROM MONADS= { 69 } 
WITH ID_D=171 [
xmlindex:=78;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 70 } 
WITH ID_D=172 [
xmlindex:=79;
surface_stripped_lowcase:="light";
wholesurface:="light ";
]
CREATE OBJECT
FROM MONADS= { 71 } 
WITH ID_D=173 [
xmlindex:=80;
surface_stripped_lowcase:="from";
wholesurface:="from ";
]
CREATE OBJECT
FROM MONADS= { 72 } 
WITH ID_D=174 [
xmlindex:=81;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 73 } 
WITH ID_D=175 [
xmlindex:=82;
surface_stripped_lowcase:="darkness";
wholesurface:="darkness. ";
]
CREATE OBJECT
FROM MONADS= { 74 } 
WITH ID_D=176 [
xmlindex:=84;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 75 } 
WITH ID_D=177 [
xmlindex:=85;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 76 } 
WITH ID_D=178 [
xmlindex:=86;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 77 } 
WITH ID_D=179 [
xmlindex:=87;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 78 } 
WITH ID_D=180 [
xmlindex:=88;
surface_stripped_lowcase:="light";
wholesurface:="light ";
]
CREATE OBJECT
FROM MONADS= { 79 } 
WITH ID_D=181 [
xmlindex:=89;
surface_stripped_lowcase:="day";
wholesurface:="Day, ";
]
CREATE OBJECT
FROM MONADS= { 80 } 
WITH ID_D=182 [
xmlindex:=90;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 81 } 
WITH ID_D=183 [
xmlindex:=91;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 82 } 
WITH ID_D=184 [
xmlindex:=92;
surface_stripped_lowcase:="darkness";
wholesurface:="darkness ";
]
CREATE OBJECT
FROM MONADS= { 83 } 
WITH ID_D=185 [
xmlindex:=93;
surface_stripped_lowcase:="he";
wholesurface:="he ";
]
CREATE OBJECT
FROM MONADS= { 84 } 
WITH ID_D=186 [
xmlindex:=94;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 85 } 
WITH ID_D=187 [
xmlindex:=95;
surface_stripped_lowcase:="night";
wholesurface:="Night. ";
]
CREATE OBJECT
FROM MONADS= { 86 } 
WITH ID_D=188 [
xmlindex:=96;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 87 } 
WITH ID_D=189 [
xmlindex:=97;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 88 } 
WITH ID_D=190 [
xmlindex:=98;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 89 } 
WITH ID_D=191 [
xmlindex:=99;
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
]
CREATE OBJECT
FROM MONADS= { 90 } 
WITH ID_D=192 [
xmlindex:=100;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 91 } 
WITH ID_D=193 [
xmlindex:=101;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 92 } 
WITH ID_D=194 [
xmlindex:=102;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 93 } 
WITH ID_D=195 [
xmlindex:=103;
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
]
CREATE OBJECT
FROM MONADS= { 94 } 
WITH ID_D=196 [
xmlindex:=104;
surface_stripped_lowcase:="one";
wholesurface:="one ";
]
CREATE OBJECT
FROM MONADS= { 95 } 
WITH ID_D=197 [
xmlindex:=105;
surface_stripped_lowcase:="day";
wholesurface:="day. ";
]
CREATE OBJECT
FROM MONADS= { 96 } 
WITH ID_D=198 [
xmlindex:=108;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 97 } 
WITH ID_D=199 [
xmlindex:=109;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 98 } 
WITH ID_D=200 [
xmlindex:=110;
surface_stripped_lowcase:="said";
wholesurface:="said, ";
]
CREATE OBJECT
FROM MONADS= { 99 } 
WITH ID_D=201 [
xmlindex:=111;
surface_stripped_lowcase:="let";
wholesurface:="Let ";
]
CREATE OBJECT
FROM MONADS= { 100 } 
WITH ID_D=202 [
xmlindex:=112;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 101 } 
WITH ID_D=203 [
xmlindex:=113;
surface_stripped_lowcase:="be";
wholesurface:="be ";
]
CREATE OBJECT
FROM MONADS= { 102 } 
WITH ID_D=204 [
xmlindex:=114;
surface_stripped_lowcase:="a";
wholesurface:="a ";
]
CREATE OBJECT
FROM MONADS= { 103 } 
WITH ID_D=205 [
xmlindex:=115;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
]
CREATE OBJECT
FROM MONADS= { 104 } 
WITH ID_D=206 [
xmlindex:=116;
surface_stripped_lowcase:="in";
wholesurface:="in ";
]
CREATE OBJECT
FROM MONADS= { 105 } 
WITH ID_D=207 [
xmlindex:=117;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 106 } 
WITH ID_D=208 [
xmlindex:=118;
surface_stripped_lowcase:="midst";
wholesurface:="midst ";
]
CREATE OBJECT
FROM MONADS= { 107 } 
WITH ID_D=209 [
xmlindex:=119;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 108 } 
WITH ID_D=210 [
xmlindex:=120;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 109 } 
WITH ID_D=211 [
xmlindex:=121;
surface_stripped_lowcase:="waters";
wholesurface:="waters, ";
]
CREATE OBJECT
FROM MONADS= { 110 } 
WITH ID_D=212 [
xmlindex:=122;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 111 } 
WITH ID_D=213 [
xmlindex:=123;
surface_stripped_lowcase:="let";
wholesurface:="let ";
]
CREATE OBJECT
FROM MONADS= { 112 } 
WITH ID_D=214 [
xmlindex:=124;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 113 } 
WITH ID_D=215 [
xmlindex:=125;
surface_stripped_lowcase:="divide";
wholesurface:="divide ";
]
CREATE OBJECT
FROM MONADS= { 114 } 
WITH ID_D=216 [
xmlindex:=126;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 115 } 
WITH ID_D=217 [
xmlindex:=127;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 116 } 
WITH ID_D=218 [
xmlindex:=128;
surface_stripped_lowcase:="from";
wholesurface:="from ";
]
CREATE OBJECT
FROM MONADS= { 117 } 
WITH ID_D=219 [
xmlindex:=129;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 118 } 
WITH ID_D=220 [
xmlindex:=130;
surface_stripped_lowcase:="waters";
wholesurface:="waters. ";
]
CREATE OBJECT
FROM MONADS= { 119 } 
WITH ID_D=221 [
xmlindex:=132;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 120 } 
WITH ID_D=222 [
xmlindex:=133;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 121 } 
WITH ID_D=223 [
xmlindex:=134;
surface_stripped_lowcase:="made";
wholesurface:="made ";
]
CREATE OBJECT
FROM MONADS= { 122 } 
WITH ID_D=224 [
xmlindex:=135;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 123 } 
WITH ID_D=225 [
xmlindex:=136;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament, ";
]
CREATE OBJECT
FROM MONADS= { 124 } 
WITH ID_D=226 [
xmlindex:=137;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 125 } 
WITH ID_D=227 [
xmlindex:=138;
surface_stripped_lowcase:="divided";
wholesurface:="divided ";
]
CREATE OBJECT
FROM MONADS= { 126 } 
WITH ID_D=228 [
xmlindex:=139;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 127 } 
WITH ID_D=229 [
xmlindex:=140;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 128 } 
WITH ID_D=230 [
xmlindex:=141;
surface_stripped_lowcase:="which";
wholesurface:="which ";
]
CREATE OBJECT
FROM MONADS= { 129 } 
WITH ID_D=231 [
xmlindex:=142;
surface_stripped_lowcase:="were";
wholesurface:="were ";
]
CREATE OBJECT
FROM MONADS= { 130 } 
WITH ID_D=232 [
xmlindex:=143;
surface_stripped_lowcase:="under";
wholesurface:="under ";
]
CREATE OBJECT
FROM MONADS= { 131 } 
WITH ID_D=233 [
xmlindex:=144;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 132 } 
WITH ID_D=234 [
xmlindex:=145;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
]
CREATE OBJECT
FROM MONADS= { 133 } 
WITH ID_D=235 [
xmlindex:=146;
surface_stripped_lowcase:="from";
wholesurface:="from ";
]
CREATE OBJECT
FROM MONADS= { 134 } 
WITH ID_D=236 [
xmlindex:=147;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 135 } 
WITH ID_D=237 [
xmlindex:=148;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 136 } 
WITH ID_D=238 [
xmlindex:=149;
surface_stripped_lowcase:="which";
wholesurface:="which ";
]
CREATE OBJECT
FROM MONADS= { 137 } 
WITH ID_D=239 [
xmlindex:=150;
surface_stripped_lowcase:="were";
wholesurface:="were ";
]
CREATE OBJECT
FROM MONADS= { 138 } 
WITH ID_D=240 [
xmlindex:=151;
surface_stripped_lowcase:="above";
wholesurface:="above ";
]
CREATE OBJECT
FROM MONADS= { 139 } 
WITH ID_D=241 [
xmlindex:=152;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 140 } 
WITH ID_D=242 [
xmlindex:=153;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament: ";
]
CREATE OBJECT
FROM MONADS= { 141 } 
WITH ID_D=243 [
xmlindex:=154;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 142 } 
WITH ID_D=244 [
xmlindex:=155;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 143 } 
WITH ID_D=245 [
xmlindex:=156;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 144 } 
WITH ID_D=246 [
xmlindex:=157;
surface_stripped_lowcase:="so";
wholesurface:="so. ";
]
CREATE OBJECT
FROM MONADS= { 145 } 
WITH ID_D=247 [
xmlindex:=159;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 146 } 
WITH ID_D=248 [
xmlindex:=160;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 147 } 
WITH ID_D=249 [
xmlindex:=161;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 148 } 
WITH ID_D=250 [
xmlindex:=162;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 149 } 
WITH ID_D=251 [
xmlindex:=163;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
]
CREATE OBJECT
FROM MONADS= { 150 } 
WITH ID_D=252 [
xmlindex:=164;
surface_stripped_lowcase:="heaven";
wholesurface:="Heaven. ";
]
CREATE OBJECT
FROM MONADS= { 151 } 
WITH ID_D=253 [
xmlindex:=165;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 152 } 
WITH ID_D=254 [
xmlindex:=166;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 153 } 
WITH ID_D=255 [
xmlindex:=167;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 154 } 
WITH ID_D=256 [
xmlindex:=168;
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
]
CREATE OBJECT
FROM MONADS= { 155 } 
WITH ID_D=257 [
xmlindex:=169;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 156 } 
WITH ID_D=258 [
xmlindex:=170;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 157 } 
WITH ID_D=259 [
xmlindex:=171;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 158 } 
WITH ID_D=260 [
xmlindex:=172;
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
]
CREATE OBJECT
FROM MONADS= { 159 } 
WITH ID_D=261 [
xmlindex:=173;
surface_stripped_lowcase:="a";
wholesurface:="a ";
]
CREATE OBJECT
FROM MONADS= { 160 } 
WITH ID_D=262 [
xmlindex:=174;
surface_stripped_lowcase:="second";
wholesurface:="second ";
]
CREATE OBJECT
FROM MONADS= { 161 } 
WITH ID_D=263 [
xmlindex:=175;
surface_stripped_lowcase:="day";
wholesurface:="day. ";
]
CREATE OBJECT
FROM MONADS= { 162 } 
WITH ID_D=264 [
xmlindex:=178;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 163 } 
WITH ID_D=265 [
xmlindex:=179;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 164 } 
WITH ID_D=266 [
xmlindex:=180;
surface_stripped_lowcase:="said";
wholesurface:="said, ";
]
CREATE OBJECT
FROM MONADS= { 165 } 
WITH ID_D=267 [
xmlindex:=181;
surface_stripped_lowcase:="let";
wholesurface:="Let ";
]
CREATE OBJECT
FROM MONADS= { 166 } 
WITH ID_D=268 [
xmlindex:=182;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 167 } 
WITH ID_D=269 [
xmlindex:=183;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 168 } 
WITH ID_D=270 [
xmlindex:=184;
surface_stripped_lowcase:="under";
wholesurface:="under ";
]
CREATE OBJECT
FROM MONADS= { 169 } 
WITH ID_D=271 [
xmlindex:=185;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 170 } 
WITH ID_D=272 [
xmlindex:=186;
surface_stripped_lowcase:="heavens";
wholesurface:="heavens ";
]
CREATE OBJECT
FROM MONADS= { 171 } 
WITH ID_D=273 [
xmlindex:=187;
surface_stripped_lowcase:="be";
wholesurface:="be ";
]
CREATE OBJECT
FROM MONADS= { 172 } 
WITH ID_D=274 [
xmlindex:=188;
surface_stripped_lowcase:="gathered";
wholesurface:="gathered ";
]
CREATE OBJECT
FROM MONADS= { 173 } 
WITH ID_D=275 [
xmlindex:=189;
surface_stripped_lowcase:="together";
wholesurface:="together ";
]
CREATE OBJECT
FROM MONADS= { 174 } 
WITH ID_D=276 [
xmlindex:=190;
surface_stripped_lowcase:="unto";
wholesurface:="unto ";
]
CREATE OBJECT
FROM MONADS= { 175 } 
WITH ID_D=277 [
xmlindex:=191;
surface_stripped_lowcase:="one";
wholesurface:="one ";
]
CREATE OBJECT
FROM MONADS= { 176 } 
WITH ID_D=278 [
xmlindex:=192;
surface_stripped_lowcase:="place";
wholesurface:="place, ";
]
CREATE OBJECT
FROM MONADS= { 177 } 
WITH ID_D=279 [
xmlindex:=193;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 178 } 
WITH ID_D=280 [
xmlindex:=194;
surface_stripped_lowcase:="let";
wholesurface:="let ";
]
CREATE OBJECT
FROM MONADS= { 179 } 
WITH ID_D=281 [
xmlindex:=195;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 180 } 
WITH ID_D=282 [
xmlindex:=196;
surface_stripped_lowcase:="dry";
wholesurface:="dry ";
]
CREATE OBJECT
FROM MONADS= { 181 } 
WITH ID_D=283 [
xmlindex:=197;
surface_stripped_lowcase:="land";
wholesurface:="land ";
]
CREATE OBJECT
FROM MONADS= { 182 } 
WITH ID_D=284 [
xmlindex:=198;
surface_stripped_lowcase:="appear";
wholesurface:="appear: ";
]
CREATE OBJECT
FROM MONADS= { 183 } 
WITH ID_D=285 [
xmlindex:=199;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 184 } 
WITH ID_D=286 [
xmlindex:=200;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 185 } 
WITH ID_D=287 [
xmlindex:=201;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 186 } 
WITH ID_D=288 [
xmlindex:=202;
surface_stripped_lowcase:="so";
wholesurface:="so. ";
]
CREATE OBJECT
FROM MONADS= { 187 } 
WITH ID_D=289 [
xmlindex:=204;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 188 } 
WITH ID_D=290 [
xmlindex:=205;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 189 } 
WITH ID_D=291 [
xmlindex:=206;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 190 } 
WITH ID_D=292 [
xmlindex:=207;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 191 } 
WITH ID_D=293 [
xmlindex:=208;
surface_stripped_lowcase:="dry";
wholesurface:="dry ";
]
CREATE OBJECT
FROM MONADS= { 192 } 
WITH ID_D=294 [
xmlindex:=209;
surface_stripped_lowcase:="land";
wholesurface:="land ";
]
CREATE OBJECT
FROM MONADS= { 193 } 
WITH ID_D=295 [
xmlindex:=210;
surface_stripped_lowcase:="earth";
wholesurface:="Earth; ";
]
CREATE OBJECT
FROM MONADS= { 194 } 
WITH ID_D=296 [
xmlindex:=211;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 195 } 
WITH ID_D=297 [
xmlindex:=212;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 196 } 
WITH ID_D=298 [
xmlindex:=213;
surface_stripped_lowcase:="gathering";
wholesurface:="gathering ";
]
CREATE OBJECT
FROM MONADS= { 197 } 
WITH ID_D=299 [
xmlindex:=214;
surface_stripped_lowcase:="together";
wholesurface:="together ";
]
CREATE OBJECT
FROM MONADS= { 198 } 
WITH ID_D=300 [
xmlindex:=215;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 199 } 
WITH ID_D=301 [
xmlindex:=216;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 200 } 
WITH ID_D=302 [
xmlindex:=217;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 201 } 
WITH ID_D=303 [
xmlindex:=218;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 202 } 
WITH ID_D=304 [
xmlindex:=219;
surface_stripped_lowcase:="he";
wholesurface:="he ";
]
CREATE OBJECT
FROM MONADS= { 203 } 
WITH ID_D=305 [
xmlindex:=220;
surface_stripped_lowcase:="seas";
wholesurface:="Seas: ";
]
CREATE OBJECT
FROM MONADS= { 204 } 
WITH ID_D=306 [
xmlindex:=221;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 205 } 
WITH ID_D=307 [
xmlindex:=222;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 206 } 
WITH ID_D=308 [
xmlindex:=223;
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
]
CREATE OBJECT
FROM MONADS= { 207 } 
WITH ID_D=309 [
xmlindex:=224;
surface_stripped_lowcase:="that";
wholesurface:="that ";
]
CREATE OBJECT
FROM MONADS= { 208 } 
WITH ID_D=310 [
xmlindex:=225;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 209 } 
WITH ID_D=311 [
xmlindex:=226;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 210 } 
WITH ID_D=312 [
xmlindex:=227;
surface_stripped_lowcase:="good";
wholesurface:="good. ";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 210                    |
+------------------------+
---- answer
++++ query nobpt CREATING ASV Paragraph objects
CREATE OBJECTS
WITH OBJECT TYPE[paragraph]
CREATE OBJECT
FROM MONADS= { 8-95 } 
WITH ID_D=7 [
xmlindex:=12;
]
CREATE OBJECT
FROM MONADS= { 96-161 } 
WITH ID_D=8 [
xmlindex:=106;
]
CREATE OBJECT
FROM MONADS= { 162-283 } 
WITH ID_D=9 [
xmlindex:=176;
]
GO

++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer
++++ query nobpt CREATING ASV Title objects
CREATE OBJECTS
WITH OBJECT TYPE[title]
CREATE OBJECT
FROM MONADS= { 1-7 } 
WITH ID_D=19 [
xmlindex:=2;
divtype:=book;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 1                      |
+------------------------+
---- answer

++++ query nobpt CREATING ASV UTF8Test objects
CREATE OBJECTS
WITH OBJECT TYPE[UTF8Test]
CREATE OBJECT
FROM MONADS= { 1 } 
WITH ID_D=20001 [
xmlindex:=20001;
surface:="Danish West-Juttish dialect: A' ska æ' u' å' æh ø', a ska' æ'.";
]
CREATE OBJECT
FROM MONADS= { 2 } 
WITH ID_D=20002 [
xmlindex:=20002;
surface:="Hebrew 1: בְּרֵאשִׁ֖ית";
]
CREATE OBJECT
FROM MONADS= { 3 } 
WITH ID_D=20003 [
xmlindex:=20003;
surface:="Hebrew 2: אֱלֹהִ֑ים";
]
CREATE OBJECT
FROM MONADS= { 4 } 
WITH ID_D=20004 [
xmlindex:=20004;
surface:="Latin: Cæsar";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 4                      |
+------------------------+
---- answer

++++ dumpdb

++++ query GET AGGREGATE FEATURES (1)
GET AGGREGATE FEATURES
COUNT(*)
FROM OBJECTS
[Token]
GO
++++ answer
+-------------------+
| Column1 : integer |
+-------------------+
| 210               |
+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (2)
GET AGGREGATE FEATURES
COUNT(*), COUNT(surface_stripped_lowcase="god")
FROM OBJECTS
[Token]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 210               | 12                |
+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (3)
GET AGGREGATE FEATURES
COUNT(*)
FROM OBJECTS
[Token xmlindex<=105]
GO
++++ answer
+-------------------+
| Column1 : integer |
+-------------------+
| 95                |
+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (4)
GET AGGREGATE FEATURES
COUNT(*), COUNT(surface_stripped_lowcase='the')
FROM OBJECTS
[Token xmlindex<=105 AND xmlindex >= 100]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 6                 | 0                 |
+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (5)
GET AGGREGATE FEATURES
COUNT(*), COUNT(surface_stripped_lowcase='the')
FROM OBJECTS
[Token xmlindex<=105 AND xmlindex >= 100]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 6                 | 0                 |
+-------------------+-------------------+
---- answer


++++ query GET AGGREGATE FEATURES (6)
GET AGGREGATE FEATURES
COUNT(surface_stripped_lowcase='one'), SUM(xmlindex), MIN(xmlindex), MAX(xmlindex)
FROM OBJECTS
[Token xmlindex<=105 AND xmlindex >= 100]
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer |
+-------------------+-------------------+-------------------+-------------------+
| 1                 | 615               | 100               | 105               |
+-------------------+-------------------+-------------------+-------------------+
---- answer


++++ query GET AGGREGATE FEATURES (7)
GET AGGREGATE FEATURES
COUNT(surface_stripped_lowcase='day'), SUM(xmlindex), MIN(xmlindex), MAX(xmlindex)
FROM OBJECTS
[Token xmlindex<=105 OR surface_stripped_lowcase='god']
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer |
+-------------------+-------------------+-------------------+-------------------+
| 2                 | 6299              | 3                 | 222               |
+-------------------+-------------------+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (8)
GET AGGREGATE FEATURES
COUNT(surface_stripped_lowcase='god'), SUM(xmlindex), MIN(xmlindex), MAX(xmlindex), COUNT(surface_stripped_lowcase<>'god')
FROM OBJECTS
[Token surface_stripped_lowcase='god']
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer | Column5 : integer |
+-------------------+-------------------+-------------------+-------------------+-------------------+
| 12                | 1353              | 17                | 222               | 0                 |
+-------------------+-------------------+-------------------+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (9)
GET AGGREGATE FEATURES
COUNT(*)
FROM OBJECTS
[Verse]
GO
++++ answer
+-------------------+
| Column1 : integer |
+-------------------+
| 10                |
+-------------------+
---- answer


++++ query GET AGGREGATE FEATURES (10)
GET AGGREGATE FEATURES
SUM(verse), COUNT(chapter=1)
FROM OBJECTS
[Verse]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 55                | 10                |
+-------------------+-------------------+
---- answer

	
++++ query GET AGGREGATE FEATURES (11)
GET AGGREGATE FEATURES
SUM(verse), COUNT(chapter=1)
FROM OBJECTS
[Verse chapter >= 1]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 55                | 10                |
+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (12)
GET AGGREGATE FEATURES
SUM(verse), COUNT(chapter=1), COUNT(verse<=5), MAX(verse), MIN(verse), MIN(chapter), MAX(chapter)
FROM OBJECTS
[Verse verse >= 2 AND verse<=8]
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer | Column5 : integer | Column6 : integer | Column7 : integer |
+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+
| 35                | 7                 | 4                 | 8                 | 2                 | 1                 | 1                 |
+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+
---- answer


++++ query illegal UnorderedGroup (1)
SELECT ALL OBJECTS
WHERE
[Verse AS v1
    [UnorderedGroup
         [Token AS r1]
         [Token wholesurface=r1.wholesurface]
    ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'r1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer

++++ query illegal UnorderedGroup (2)
SELECT ALL OBJECTS
WHERE
[Verse AS v1
    [UnorderedGroup
         [Token AS r1]
    ]
]
[Token wholesurface=r1.wholesurface AND self > v1.self]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'r1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer

++++ query UNORDERED GROUP (1)
SELECT ALL OBJECTS
WHERE	  
[Verse
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' GET wholesurface]
		[Token surface_stripped_lowcase='good' GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 26 { 57-73 } false  //  <  < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 167 { 65 } false (wholesurface="good: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 312 { 210 } false (wholesurface="good. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (2)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
		[Token surface_stripped_lowcase='good' AND self > v1.self GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 26 { 57-73 } false  //  <  < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 167 { 65 } false (wholesurface="good: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 312 { 210 } false (wholesurface="good. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (3)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
		[Token surface_stripped_lowcase='made' GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 29 { 119-144 } false  //  <  < [ token 222 { 120 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 223 { 121 } false (wholesurface="made ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (4)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  < [ token 113 { 11 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 24 { 18-45 } false  //  <  < [ token 140 { 38 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  < [ token 149 { 47 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  < [ token 177 { 75 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  < [ token 199 { 97 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  < [ token 222 { 120 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  < [ token 248 { 146 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  < [ token 265 { 163 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (5)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='good']
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 26 { 57-73 } false  //  <  < [ token 167 { 65 } false  //  <  > 
 ]
 > 
 < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 312 { 210 } false  //  <  > 
 ]
 > 
 < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query IN (integer)
SELECT ALL OBJECTS
WHERE	  
[Verse chapter IN (1) AND verse IN (3)
    [Token GET wholesurface]
]
GO
++++ answer
 //  <  < [ verse 25 { 46-56 } false  //  <  < [ token 148 { 46 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 149 { 47 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 150 { 48 } false (wholesurface="said, ") //  <  > 
 ]
 > 
 < [ token 151 { 49 } false (wholesurface="Let ") //  <  > 
 ]
 > 
 < [ token 152 { 50 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 153 { 51 } false (wholesurface="be ") //  <  > 
 ]
 > 
 < [ token 154 { 52 } false (wholesurface="light: ") //  <  > 
 ]
 > 
 < [ token 155 { 53 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 156 { 54 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 157 { 55 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 158 { 56 } false (wholesurface="light. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query IN (ENUM) (1)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ENUM) (2)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book, chapter)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D) (1)
SELECT ALL OBJECTS
WHERE	  
[title self IN (19)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D) (2)
SELECT ALL OBJECTS
WHERE	  
[token self IN (156, 158)]
GO
++++ answer
 //  <  < [ token 156 { 54 } false  //  <  > 
 ]
 > 
 < [ token 158 { 56 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (integer) (2)
SELECT ALL OBJECTS
WHERE	  
[Verse chapter IN (1) AND verse IN (3,5)
    [Token FIRST]
]
GO
++++ answer
 //  <  < [ verse 25 { 46-56 } false  //  <  < [ token 148 { 46 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  < [ token 176 { 74 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer 


++++ query first_monad < 10
SELECT ALL OBJECTS
WHERE	  
[Verse first_monad < 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query first_monad(monads) <= 30
SELECT ALL OBJECTS
WHERE	  
[Verse first_monad(monads) <= 30
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 24 { 18-45 } false  //  <  > 
 ]
 > 
 > 
---- answer 


++++ query last_monad >= 28
SELECT ALL OBJECTS
WHERE	  
[Verse last_monad >=28
]
GO
++++ answer
 //  <  < [ verse 24 { 18-45 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query last_monad(monads) >= 28
SELECT ALL OBJECTS
WHERE	  
[Verse last_monad(monads) >=28
]
GO
++++ answer
 //  <  < [ verse 24 { 18-45 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  > 
 ]
 > 
 > 
---- answer 
	 
++++ query monad_count = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_count(monads) = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count(monads) = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length(monads) = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length(monads) = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length(monads) IN (10, 12)
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length(monads) IN (10, 12)
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length(monads) IN (10, 11)
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length(monads) IN (10, 11)
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_count(monads) IN (10, 11)
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count(monads) IN (10, 11)
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 
 


++++ query monad_count <= 14
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count <= 14
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_count(monads) <= 14
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count(monads) <= 14
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query first_monad = ORU.xmlindex
// This query does not make much sense, since Token.xmlindex
// is not a monad, but it does work.
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
   [Token
       first_monad = v1.xmlindex GET wholesurface
   ]
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  < [ token 115 { 13 } false (wholesurface="the ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 24 { 18-45 } false  //  <  < [ token 126 { 24 } false (wholesurface="void; ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  < [ token 155 { 53 } false (wholesurface="and ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  < [ token 167 { 65 } false (wholesurface="good: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  < [ token 185 { 83 } false (wholesurface="he ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  < [ token 209 { 107 } false (wholesurface="of ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  < [ token 233 { 131 } false (wholesurface="the ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  < [ token 260 { 158 } false (wholesurface="morning, ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  < [ token 279 { 177 } false (wholesurface="and ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 305 { 203 } false (wholesurface="Seas: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer 
 
	  
	  

++++ query first_monad > ORU.last_monad
SELECT ALL OBJECTS
WHERE	  
[Title AS t1
]
..
[Verse
   first_monad > t1.last_monad
   AND last_monad <= 20
]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
[ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

	  

++++ query monad_count >= ORU.monad_count AND monad_set_length <= 14
SELECT ALL OBJECTS
WHERE	  
[Title AS t1
]
..
[Verse
    monad_count(monads) >= t1.monad_count(monads)
    AND monad_set_length <= 14
]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
[ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ title 19 { 1-7 } false  //  <  > 
 ]
[ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 


++++ query IN (ID_D)
SELECT ALL OBJECTS
WHERE	  
[title self IN (19)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ENUM) (1)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ENUM) (2)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book, chapter)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D) (1)
SELECT ALL OBJECTS
WHERE	  
[title self IN (19)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D) (2)
SELECT ALL OBJECTS
WHERE	  
[token self IN (156, 158)]
GO
++++ answer
 //  <  < [ token 156 { 54 } false  //  <  > 
 ]
 > 
 < [ token 158 { 56 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query first_monad < 10
SELECT ALL OBJECTS
WHERE	  
[Verse first_monad < 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query first_monad(monads) <= 30
SELECT ALL OBJECTS
WHERE	  
[Verse first_monad(monads) <= 30
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 24 { 18-45 } false  //  <  > 
 ]
 > 
 > 
---- answer 


++++ query last_monad >= 28
SELECT ALL OBJECTS
WHERE	  
[Verse last_monad >=28
]
GO
++++ answer
 //  <  < [ verse 24 { 18-45 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query last_monad(monads) >= 28
SELECT ALL OBJECTS
WHERE	  
[Verse last_monad(monads) >=28
]
GO
++++ answer
 //  <  < [ verse 24 { 18-45 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  > 
 ]
 > 
 > 
---- answer 
	 
++++ query monad_count = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_count(monads) = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count(monads) = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length(monads) = 10
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length(monads) = 10
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length(monads) IN (10, 12)
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length(monads) IN (10, 12)
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_set_length(monads) IN (10, 11)
SELECT ALL OBJECTS
WHERE	  
[Verse monad_set_length(monads) IN (10, 11)
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 

++++ query monad_count(monads) IN (10, 11)
SELECT ALL OBJECTS
WHERE	  
[Verse monad_count(monads) IN (10, 11)
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 
 


++++ query first_monad = ORU.xmlindex
// This query does not make much sense, since Token.xmlindex
// is not a monad, but it does work.
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
   [Token
       first_monad = v1.xmlindex GET wholesurface
   ]
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  < [ token 115 { 13 } false (wholesurface="the ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 24 { 18-45 } false  //  <  < [ token 126 { 24 } false (wholesurface="void; ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  < [ token 155 { 53 } false (wholesurface="and ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  < [ token 167 { 65 } false (wholesurface="good: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  < [ token 185 { 83 } false (wholesurface="he ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  < [ token 209 { 107 } false (wholesurface="of ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  < [ token 233 { 131 } false (wholesurface="the ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  < [ token 260 { 158 } false (wholesurface="morning, ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  < [ token 279 { 177 } false (wholesurface="and ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 305 { 203 } false (wholesurface="Seas: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer 
 
	  

++++ query first_monad > ORU.last_monad
SELECT ALL OBJECTS
WHERE	  
[Title AS t1
]
..
[Verse
   first_monad > t1.last_monad
   AND last_monad <= 20
]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
[ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 > 
---- answer 

	  

++++ query monad_count >= ORU.monad_count AND monad_set_length <= 14
SELECT ALL OBJECTS
WHERE	  
[Title AS t1
]
..
[Verse
    monad_count(monads) >= t1.monad_count(monads)
    AND monad_set_length <= 14
]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
[ verse 23 { 8-17 } false  //  <  > 
 ]
 > 
 < [ title 19 { 1-7 } false  //  <  > 
 ]
[ verse 25 { 46-56 } false  //  <  > 
 ]
 > 
 > 
---- answer 


++++ query Test of UTF-8 compliance of regular expressions 1
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[æø].*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20001 { 1 } false (surface="Danish West-Juttish dialect: A' ska \xc3\xa6' u' \xc3\xa5' \xc3\xa6h \xc3\xb8', a ska' \xc3\xa6'.") //  <  > 
 ]
 > 
 < [ utf8test 20004 { 4 } false (surface="Latin: C\xc3\xa6sar") //  <  > 
 ]
 > 
 > 
---- answer 


++++ query Test of UTF-8 compliance of regular expressions 2.1
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*æ.*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20001 { 1 } false (surface="Danish West-Juttish dialect: A' ska \xc3\xa6' u' \xc3\xa5' \xc3\xa6h \xc3\xb8', a ska' \xc3\xa6'.") //  <  > 
 ]
 > 
 < [ utf8test 20004 { 4 } false (surface="Latin: C\xc3\xa6sar") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 2.2
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*ø.*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20001 { 1 } false (surface="Danish West-Juttish dialect: A' ska \xc3\xa6' u' \xc3\xa5' \xc3\xa6h \xc3\xb8', a ska' \xc3\xa6'.") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 2.3
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[øå].*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20001 { 1 } false (surface="Danish West-Juttish dialect: A' ska \xc3\xa6' u' \xc3\xa5' \xc3\xa6h \xc3\xb8', a ska' \xc3\xa6'.") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 2.4
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[å].*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20001 { 1 } false (surface="Danish West-Juttish dialect: A' ska \xc3\xa6' u' \xc3\xa5' \xc3\xa6h \xc3\xb8', a ska' \xc3\xa6'.") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 2.5
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*å.*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20001 { 1 } false (surface="Danish West-Juttish dialect: A' ska \xc3\xa6' u' \xc3\xa5' \xc3\xa6h \xc3\xb8', a ska' \xc3\xa6'.") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 3
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[א].*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20002 { 2 } false (surface="Hebrew 1: \xd7\x91\xd6\xbc\xd6\xb0\xd7\xa8\xd6\xb5\xd7\x90\xd7\xa9\xd7\x81\xd6\xb4\xd6\x96\xd7\x99\xd7\xaa") //  <  > 
 ]
 > 
 < [ utf8test 20003 { 3 } false (surface="Hebrew 2: \xd7\x90\xd6\xb1\xd7\x9c\xd6\xb9\xd7\x94\xd6\xb4\xd6\x91\xd7\x99\xd7\x9d") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 4
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*א.*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20002 { 2 } false (surface="Hebrew 1: \xd7\x91\xd6\xbc\xd6\xb0\xd7\xa8\xd6\xb5\xd7\x90\xd7\xa9\xd7\x81\xd6\xb4\xd6\x96\xd7\x99\xd7\xaa") //  <  > 
 ]
 > 
 < [ utf8test 20003 { 3 } false (surface="Hebrew 2: \xd7\x90\xd6\xb1\xd7\x9c\xd6\xb9\xd7\x94\xd6\xb4\xd6\x91\xd7\x99\xd7\x9d") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 5
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[ר].*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20002 { 2 } false (surface="Hebrew 1: \xd7\x91\xd6\xbc\xd6\xb0\xd7\xa8\xd6\xb5\xd7\x90\xd7\xa9\xd7\x81\xd6\xb4\xd6\x96\xd7\x99\xd7\xaa") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 6
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[בל].*$" GET surface
]
++++ answer
 //  <  < [ utf8test 20002 { 2 } false (surface="Hebrew 1: \xd7\x91\xd6\xbc\xd6\xb0\xd7\xa8\xd6\xb5\xd7\x90\xd7\xa9\xd7\x81\xd6\xb4\xd6\x96\xd7\x99\xd7\xaa") //  <  > 
 ]
 > 
 < [ utf8test 20003 { 3 } false (surface="Hebrew 2: \xd7\x90\xd6\xb1\xd7\x9c\xd6\xb9\xd7\x94\xd6\xb4\xd6\x91\xd7\x99\xd7\x9d") //  <  > 
 ]
 > 
 > 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 7.1
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*[ד].*$" GET surface
]
++++ answer
 // 
---- answer 

++++ query Test of UTF-8 compliance of regular expressions 7.2
SELECT ALL OBJECTS
WHERE	  
[UTF8Test
   surface ~ "^.*ד.*$" GET surface
]
++++ answer
 // 
---- answer 
  
