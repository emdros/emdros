# This query is a test query
++++ query newdb CREATING Token object type
CREATE ENUMERATION boolean_t = {
   false = 0,
   true
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
[Token
	surface : STRING DEFAULT "boo";
	surface_set : STRING FROM SET DEFAULT "blof";
	surface_a : ASCII DEFAULT "blah";
	surface_a_set : STRING FROM SET DEFAULT "baf";
	myint : INTEGER DEFAULT -1;
	myint2 : INTEGER DEFAULT 2;
	boolean : boolean_t;
	bool_list : LIST OF BOOLEAN_T;
	Parent : id_d;
	Parents : LIST OF ID_D;
]
GO

CREATE OBJECTS WITH OBJECT TYPE [Token]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
	parents := (1,1);
	parent := 1;
	bool_list := (false, true);
	boolean := true;
	myint2 := 3;
	myint := 4;
	surface_a_set := "";
	surface_a := "";
	surface_set := "b";
	surface := "b";
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
	parents := (2,1);
	parent := 2;
	bool_list := (true);
	boolean := true;
	surface_a_set := "c";
	surface_a := "d";
	surface_set := "a";
	surface := "f";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer
++++ query querying just created tokens
GET OBJECTS HAVING MONADS IN {1-3}[Token GET ALL] GO
++++ answer
 // <  < [ Token 1 { 1 } false (parents="",parent="0",bool_list="",boolean="false",myint2="2",myint="-1",surface_a_set="baf",surface_a="blah",surface_set="blof",surface="boo",self="1") //  <  > 
 ]
[ Token 2 { 2 } false (parents=" 1 1 ",parent="1",bool_list=" false true ",boolean="true",myint2="3",myint="4",surface_a_set="",surface_a="",surface_set="b",surface="b",self="2") //  <  > 
 ]
[ Token 3 { 3 } false (parents=" 2 1 ",parent="2",bool_list=" true ",boolean="true",myint2="2",myint="-1",surface_a_set="c",surface_a="d",surface_set="a",surface="f",self="3") //  <  > 
 ]
 > 
 >
---- answer
++++ query newdb creating realistic DB schema
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Clause]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph]
GO
++++ answer
---- answer
++++ query creating realistic Word objects
CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[
   surface :="The";
   pos := def_article;
   parent := 10;
   lemma := "the";
   parents := (10,17,20,22,23);
   magic := 2;
]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
   surface :="door,";
   pos := noun;
   parent := 10;
   lemma := "door";
   parents := (10,17,20,22,23);
   magic := 1;
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
   surface :="which";
   pos := relative_pronoun;
   parent := 11;
   lemma := "which";
   parents := (11,18,21,22,23);
   magic := 3;
]
CREATE OBJECT FROM MONADS = {4}
WITH ID_D = 4
[
   surface :="opened";
   pos := verb;
   parent := 12;
   lemma := "open";
   parents := (12,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {5}
WITH ID_D = 5
[
   surface :="towards";
   pos := preposition;
   parent := 13;
   lemma := "towards";
   parents := (13,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {6}
WITH ID_D = 6
[
   surface :="the";
   pos := def_article;
   parent := 14;
   lemma := "the";
   parents := (14,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {7}
WITH ID_D = 7
[
   surface :="East,";
   pos := noun;
   parent := 14;
   lemma := "east";
   parents := (14,18,21,22,23);
   magic := 9;
]
CREATE OBJECT FROM MONADS = {8}
WITH ID_D = 8
[
   surface :="was";
   pos := verb;
   parent := 15;
   lemma := "be";
   parents := (15,19,20,22,23);
   magic := 6;
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 9
[
   surface :="blue.";
   pos := adjective;
   parent := 16;
   lemma := "blue";
   parents := (16,19,20,22,23);
   magic := 11;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 9                      |
+------------------------+
---- answer
++++ query creating realistic Phrase objects
CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 10
[
  phrase_type := NP;
  phrase_function := (Subj);
]
CREATE OBJECT FROM MONADS = {3-3}
WITH ID_D = 11
[
  phrase_type := NP;
  phrase_function := (Rela,Subj);
]
CREATE OBJECT FROM MONADS = {4-4}
WITH ID_D = 12
[
  phrase_type := VP;
  phrase_function := (Pred);
]
CREATE OBJECT FROM MONADS = {6-7}
WITH ID_D = 14
[
  phrase_type := NP;
  phrase_function := (NA);
]
CREATE OBJECT FROM MONADS = {5-7}
WITH ID_D = 13
[
  phrase_type := PP;
  phrase_function := (Loca);
]
CREATE OBJECT FROM MONADS = {8-8}
WITH ID_D = 15
[
  phrase_type := VP;
  phrase_function := (PreC);
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 16
[
  phrase_type := AP;
  phrase_function := (Attr);
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 7                      |
+------------------------+
---- answer
++++ query creating realistic Clause_atom objects
CREATE OBJECTS WITH OBJECT TYPE [Clause_atom]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 17
[]
CREATE OBJECT FROM MONADS = {3-7}
WITH ID_D = 18
[]
CREATE OBJECT FROM MONADS = {8-9}
WITH ID_D = 19
[]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer
++++ query creating realistic Clause objects
CREATE OBJECTS WITH OBJECT TYPE [Clause]
CREATE OBJECT FROM MONADS = {1-2,8-9}
WITH ID_D = 20
[]
CREATE OBJECT FROM MONADS = {3-7}
WITH ID_D = 21
[]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 2                      |
+------------------------+
---- answer
++++ query creating realistic Sentence object
CREATE OBJECT FROM MONADS = {1-9}
WITH ID_D = 22
[Sentence]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 22          |
+-------------+
---- answer
++++ query creating realistic Paragraph object
CREATE OBJECT FROM MONADS = {1-9}
WITH ID_D = 23
[Paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 23          |
+-------------+
---- answer
++++ query selecting object types
SELECT OBJECT TYPES GO
++++ answer
+----------------------+
| object type : string |
+----------------------+
| word                 |
| phrase               |
| clause_atom          |
| clause               |
| sentence             |
| paragraph            |
+----------------------+
---- answer
++++ query selecting features from object type
SELECT FEATURES FROM OBJECT TYPE [Token] GO
++++ answer failcompiler
Symbolchecking failed with compiler error
---- answer
++++ query selecting features from object type
SELECT FEATURES FROM OBJECT TYPE [Word] GO
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| magic                 | integer       | '42'             | false           |
| parents               | list of id_d  | ''               | false           |
| lemma                 | string        | ''               | false           |
| parent                | id_d          | '0'              | false           |
| pos                   | pos_t         | 'def_article'    | false           |
| surface               | string        | ''               | false           |
| self                  | id_d          | '0'              | true            |
+-----------------------+---------------+------------------+-----------------+
---- answer
++++ query selecting enumerations
SELECT ENUMERATIONS GO
++++ answer
+--------------------+
| enum name : string |
+--------------------+
| pos_t              |
| phrase_type_t      |
| phrase_function_t  |
+--------------------+
---- answer
++++ query selecting enumeration constants
SELECT ENUMERATION CONSTANTS 
FROM ENUMERATION phrase_types_t 
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration phrase_types_t did not exist.
---- answer
++++ query selecting enumeration constants
SELECT ENUMERATION CONSTANTS 
FROM ENUMERATION phrase_type_t 
GO
++++ answer
+---------------------+-----------------+----------------+
| enum const : string | value : integer | default : bool |
+---------------------+-----------------+----------------+
| AP                  | 4               | false          |
| NP                  | 1               | true           |
| PP                  | 3               | false          |
| VP                  | 2               | false          |
+---------------------+-----------------+----------------+
---- answer
++++ query selecting object types using enumerations
SELECT OBJECT TYPES 
USING ENUMERATION pos_t GO
++++ answer
+---------------------------+
| object type name : string |
+---------------------------+
| word                      |
+---------------------------+
---- answer
++++ query selecting min_m
SELECT min_m GO
++++ answer
+-----------------+
| min_m : monad_m |
+-----------------+
| 1               |
+-----------------+
---- answer
++++ query selecting max_m
SELECT max_m GO
++++ answer
+-----------------+
| max_m : monad_m |
+-----------------+
| 9               |
+-----------------+
---- answer
++++ query selecting monad sets when there are none
SELECT MONAD SETS GO
++++ answer
+-------------------------+
| monad_set_name : string |
+-------------------------+
+-------------------------+
---- answer
++++ query getting monad sets when there are none
GET MONAD SETS ALL GO
++++ answer
+-------------------------+---------------------+--------------------+
| monad_set_name : string | mse_first : monad_m | mse_last : monad_m |
+-------------------------+---------------------+--------------------+
+-------------------------+---------------------+--------------------+
---- answer
++++ query getting monads from clause object with id_ds
GET MONADS FROM OBJECTS
WITH ID_DS = 20, 21
[Clause]
GO
++++ answer
+--------------------+---------------------+--------------------+
| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
+--------------------+---------------------+--------------------+
| 20                 | 1                   | 2                  |
| 20                 | 8                   | 9                  |
| 21                 | 3                   | 7                  |
+--------------------+---------------------+--------------------+
---- answer
++++ query getting monads from phrase object with id_ds
GET MONADS FROM OBJECTS
WITH ID_DS = 10, 13, 14, 15, 16
[Phrase]
GO
++++ answer
+--------------------+---------------------+--------------------+
| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
+--------------------+---------------------+--------------------+
| 10                 | 1                   | 2                  |
| 13                 | 5                   | 7                  |
| 14                 | 6                   | 7                  |
| 15                 | 8                   | 8                  |
| 16                 | 9                   | 9                  |
+--------------------+---------------------+--------------------+
---- answer
++++ query getting monads from word object with id_ds
GET MONADS FROM OBJECTS
WITH ID_DS = 1, 3, 4, 7, 9
[Word]
GO
++++ answer
+--------------------+---------------------+--------------------+
| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
+--------------------+---------------------+--------------------+
| 1                  | 1                   | 1                  |
| 3                  | 3                   | 3                  |
| 4                  | 4                   | 4                  |
| 7                  | 7                   | 7                  |
| 9                  | 9                   | 9                  |
+--------------------+---------------------+--------------------+
---- answer
++++ query getting monads from sentence object with id_ds
GET MONADS FROM OBJECTS
WITH ID_DS = 22
[Sentence]
GO
++++ answer
+--------------------+---------------------+--------------------+
| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
+--------------------+---------------------+--------------------+
| 22                 | 1                   | 9                  |
+--------------------+---------------------+--------------------+
---- answer
++++ query getting monads from paragraph object with id_ds
GET MONADS FROM OBJECTS
WITH ID_DS = 23
[Paragraph]
GO
++++ answer
+--------------------+---------------------+--------------------+
| object_id_d : id_d | mse_first : monad_m | mse_last : monad_m |
+--------------------+---------------------+--------------------+
| 23                 | 1                   | 9                  |
+--------------------+---------------------+--------------------+
---- answer
++++ query getting features from word object 1
GET FEATURES surface, pos, parent
FROM OBJECTS WITH ID_DS = 2,5
[Word]
GO
++++ answer
+-------------+------------------+-------------------+---------------+
| id_d : id_d | surface : string | pos : enum(pos_t) | parent : id_d |
+-------------+------------------+-------------------+---------------+
| 2           | door,            | noun              | 10            |
| 5           | towards          | preposition       | 13            |
+-------------+------------------+-------------------+---------------+
---- answer
++++ query getting features from word object 2
GET FEATURES surface, pos, parent
FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
[Word]
GO
++++ answer
+-------------+------------------+-------------------+---------------+
| id_d : id_d | surface : string | pos : enum(pos_t) | parent : id_d |
+-------------+------------------+-------------------+---------------+
| 1           | The              | def_article       | 10            |
| 2           | door,            | noun              | 10            |
| 3           | which            | relative_pronoun  | 11            |
| 4           | opened           | verb              | 12            |
+-------------+------------------+-------------------+---------------+
---- answer
++++ query getting features from word object 2.1
GET FEATURES surface, pos, parent
FROM OBJECTS WITH ID_DS = 4,3,3,2,2,2,2,1
[Word]
GO
++++ answer
+-------------+------------------+-------------------+---------------+
| id_d : id_d | surface : string | pos : enum(pos_t) | parent : id_d |
+-------------+------------------+-------------------+---------------+
| 1           | The              | def_article       | 10            |
| 2           | door,            | noun              | 10            |
| 3           | which            | relative_pronoun  | 11            |
| 4           | opened           | verb              | 12            |
+-------------+------------------+-------------------+---------------+
---- answer
++++ query getting features from word object 3
GET FEATURES parent, pos
FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
[Word]
GO
++++ answer
+-------------+---------------+-------------------+
| id_d : id_d | parent : id_d | pos : enum(pos_t) |
+-------------+---------------+-------------------+
| 1           | 10            | def_article       |
| 2           | 10            | noun              |
| 3           | 11            | relative_pronoun  |
| 4           | 12            | verb              |
+-------------+---------------+-------------------+
---- answer
++++ query getting features from word object 4
GET FEATURES parent, sploinks
FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
[Word]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature 'sploinks' does not exist for the given object type.
---- answer
++++ query getting features from word object 4.5
GET FEATURES parent,lemma
FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
[Word]
GO
++++ answer
+-------------+---------------+----------------+
| id_d : id_d | parent : id_d | lemma : string |
+-------------+---------------+----------------+
| 1           | 10            | the            |
| 2           | 10            | door           |
| 3           | 11            | which          |
| 4           | 12            | open           |
+-------------+---------------+----------------+
---- answer
++++ query getting features from word object 5
GET FEATURES parent, surface
FROM OBJECTS WITH ID_DS = 1,2,2,2,3,3,4
[Sploinks]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'Sploinks' does not exist.
---- answer
++++ query getting string set from word.surface
GET SET FROM FEATURE surface
[word]
GO
++++ answer   
+----------------+
| value : string |
+----------------+
| The            |
| door,          |
| which          |
| opened         |
| towards        |
| the            |
| East,          |
| was            |
| blue.          |
+----------------+
---- answer
++++ query getting string set from word.lemma
GET SET FROM FEATURE lemma
[word]
GO
++++ answer   
+----------------+
| value : string |
+----------------+
| the            |
| door           |
| which          |
| open           |
| towards        |
| east           |
| be             |
| blue           |
+----------------+
---- answer
++++ query selecting all objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[ALL]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| word                      | 1                 | 1           |
| word                      | 2                 | 2           |
| word                      | 6                 | 6           |
| word                      | 7                 | 7           |
| phrase                    | 1                 | 10          |
| phrase                    | 6                 | 13          |
| phrase                    | 6                 | 14          |
| clause_atom               | 1                 | 17          |
| clause_atom               | 6                 | 18          |
| clause                    | 1                 | 20          |
| clause                    | 6                 | 21          |
| sentence                  | 1                 | 22          |
| paragraph                 | 1                 | 23          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting word objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[word]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| word                      | 1                 | 1           |
| word                      | 2                 | 2           |
| word                      | 6                 | 6           |
| word                      | 7                 | 7           |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting phrase objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[phrase]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| phrase                    | 1                 | 10          |
| phrase                    | 6                 | 13          |
| phrase                    | 6                 | 14          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting clause_atom objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[clause_atom]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| clause_atom               | 1                 | 17          |
| clause_atom               | 6                 | 18          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting clause objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[clause]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| clause                    | 1                 | 20          |
| clause                    | 6                 | 21          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting sentence objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[sentence]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| sentence                  | 1                 | 22          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting paragraph objects having monads in
SELECT OBJECTS HAVING MONADS IN {1-2, 6-7}
[paragraph]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| paragraph                 | 1                 | 23          |
+---------------------------+-------------------+-------------+
---- answer
++++ query selecting word objects at
SELECT OBJECTS AT MONAD = 7
[word]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 7           |
+-------------+
---- answer
++++ query selecting phrase objects at 1
SELECT OBJECTS AT MONAD = 7
[phrase]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer
++++ query selecting phrase objects at 2
SELECT OBJECTS AT MONAD = 1
[phrase]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
+-------------+
---- answer
++++ query selecting clause objects at
SELECT OBJECTS AT MONAD = 1
[clause]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 20          |
+-------------+
---- answer
++++ query selecting clause_atom objects at
SELECT OBJECTS AT MONAD = 1
[clause_atom]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 17          |
+-------------+
---- answer
++++ query selecting sentence objects at
SELECT OBJECTS AT MONAD = 1
[sentence]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 22          |
+-------------+
---- answer
++++ query selecting paragraph objects at
SELECT OBJECTS AT MONAD = 1
[paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 23          |
+-------------+
---- answer
++++ query selecting objects having monads in: all
SELECT OBJECTS HAVING MONADS IN {1-2, 4-7}
[ALL]
GO
++++ answer
+---------------------------+-------------------+-------------+
| object_type_name : string | monad_m : monad_m | id_d : id_d |
+---------------------------+-------------------+-------------+
| word                      | 1                 | 1           |
| word                      | 2                 | 2           |
| word                      | 4                 | 4           |
| word                      | 5                 | 5           |
| word                      | 6                 | 6           |
| word                      | 7                 | 7           |
| phrase                    | 1                 | 10          |
| phrase                    | 4                 | 12          |
| phrase                    | 5                 | 13          |
| phrase                    | 6                 | 14          |
| clause_atom               | 1                 | 17          |
| clause_atom               | 4                 | 18          |
| clause                    | 1                 | 20          |
| clause                    | 4                 | 21          |
| sentence                  | 1                 | 22          |
| paragraph                 | 1                 | 23          |
+---------------------------+-------------------+-------------+
---- answer
########################################################################
########################################################################
###
### Here ends the first batch of "realistic database" queries.
###
### What apears below are some SELECT ALL OBJECTS statements on this db.
###
########################################################################
########################################################################
++++ query topographic query on realistic db number 1
SELECT ALL OBJECTS
WHERE
[Paragraph
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 1.1
SELECT ALL OBJECTS
WHERE
[Paragraph
  [word]*
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
#
++++ query topographic query on realistic db number 1.2
SELECT ALL OBJECTS
WHERE
[Paragraph
  [word pos=def_article]
  [word]*{1,3}
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 1.3
SELECT ALL OBJECTS
WHERE
[Paragraph
  [word pos=def_article]
  [word]*{0-1}
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 2
SELECT ALL OBJECTS
WHERE
[Sentence
]
GO
++++ answer
 //  <  < [ sentence 22 { 1-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 2.1
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.1.1
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap? retrieve]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.1.2
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap focus]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.1.3
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap? focus]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 2.2
SELECT ALL OBJECTS
WHERE
[Sentence
  [Clause
     [gap? retrieve
        [clause_atom]
     ]
  ]
]
GO
++++ answer
 //  <  < [ sentence 22 { 1-9 } false  //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ pow_m { 3-7 } false  //  <  < [ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 3
SELECT ALL OBJECTS
WHERE
[Clause
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.1
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
      [phrase first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.1.1
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
      [phrase first phrase_function = Rela]
   ]
]
GO
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with an enumeration constant, but the comparison operator is not HAS, as it should be.
---- answer
++++ query topographic query on realistic db number 3.1.2
SELECT ALL OBJECTS
WHERE
[Clause
   [gap retrieve
      [phrase first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ pow_m { 3-7 } false  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.2
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
      [phrase phrase_type=NP]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.3
SELECT ALL OBJECTS
WHERE
[Clause_atom
   [gap]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.4
SELECT ALL OBJECTS
WHERE
[Clause_atom
   [gap?]
]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 < [ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 3.5
SELECT ALL OBJECTS
WHERE
[Phrase
   [word lemma = "DoesNotExist"]
   [word lemma = "AlsoDoesNotExist"]
   OR
   [Word lemma = "CertainlyDoesNotExist"]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.6
SELECT ALL OBJECTS
WHERE
[Phrase
   [word lemma = "DoesNotExist"]
   [word lemma = "AlsoDoesNotExist"]
   OR
   [Word lemma = "door"]
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 3.7
SELECT ALL OBJECTS
WHERE
[Clause
   [gap?]
   [Word lemma = "DoesNotExist"]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.8
SELECT ALL OBJECTS
WHERE
[Clause
   [gap]
   [Word lemma = "DoesNotExist"]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.9
SELECT ALL OBJECTS
WHERE
[Clause
   [gap
     [Word lemma = "DoesNotExist"]
   ]
]
GO
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 3.10
SELECT ALL OBJECTS
WHERE
[Phrase
  [word first and last
     lemma="be"
  ]
]
GO
++++ answer
 //  <  < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 4
SELECT ALL OBJECTS
WHERE
[Clause_atom
]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 < [ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 5
SELECT ALL OBJECTS
WHERE
[Phrase
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 6
SELECT ALL OBJECTS
WHERE
[Word
]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 7
SELECT ALL OBJECTS
WHERE
[Word first
]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 7.1
SELECT ALL OBJECTS
WHERE
[Word first]
.. < 3
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 7.2
SELECT ALL OBJECTS
WHERE
[Word first]
.. <= 3
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 7.3
SELECT ALL OBJECTS
WHERE
[Word first]
.. BETWEEN 2 AND 3
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 7.4
SELECT ALL OBJECTS
WHERE
[Word first]
.. BETWEEN 2 AND 120
[word]
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query topographic query on realistic db number 8
SELECT ALL OBJECTS
WHERE
[Word last
]
GO
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 9
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [word parent = p1.self]
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 9.1
SELECT ALL OBJECTS
WHERE
[word as w1
   [Phrase self = w1.parent]
]
GO
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 10
SELECT ALL OBJECTS
WHERE
[Phrase as p1
   [Phrase parent = p1.self]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature parent does not exist on its enclosing object type.
---- answer
++++ query topographic query on realistic db number 11
SELECT ALL OBJECTS
WHERE
[Phrase first GET phrase_function, phrase_type
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Subj ",phrase_type="NP") //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 11.1
SELECT ALL OBJECTS
WHERE
[Word first GET surface, pos, lemma, parent
]
GO
++++ answer
 //  <  < [ word 1 { 1 } false (surface="The",pos="def_article",lemma="the",parent="10") //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 11.2
SELECT ALL OBJECTS
WHERE
[Phrase last GET self, phrase_type
  [Word first GET self]
]
GO
++++ answer
 //  <  < [ phrase 16 { 9 } false (self="16",phrase_type="AP") //  <  < [ word 9 { 9 } false (self="9") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 12
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Clause
     [Clause_atom
        [Phrase
           [Word]
        ]
     ]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ clause_atom 18 { 3-7 } false  //  <  < [ phrase 11 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 12.1
SELECT ALL OBJECTS
RETURNING FLAT SHEAF
WHERE
[Paragraph
  [Clause
     [Clause_atom
        [Phrase
           [Word]
        ]
     ]
  ]
]
++++ answer
 // <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 1-2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
[ phrase 11 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
[ clause_atom 18 { 3-7 } false  //  <  > 
 ]
 > 
 < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
[ clause 21 { 3-7 } false  //  <  > 
 ]
 > 
 < [ paragraph 23 { 1-9 } false  //  <  > 
 ]
 > 
 >
---- answer
++++ query topographic query on realistic db number 13
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (Subj,Attr)]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 13.1
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (VP) OR phrase_type IN (PP,AP)]
GO
++++ answer
 //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.2
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (NP,AP)]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.3
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (NP) AND phrase_function HAS Subj]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.4
SELECT ALL OBJECTS
WHERE
[phrase NOT (NOT phrase_type IN (NP) OR NOT phrase_function HAS Subj)]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.5
SELECT ALL OBJECTS
WHERE
[phrase NOT phrase_type IN (AP,NP,PP)]
GO
++++ answer
 //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 13.6
SELECT ALL OBJECTS
WHERE
[phrase NOT (phrase_type IN (VP) AND (phrase_function HAS Pred OR phrase_function HAS PreC))]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14
SELECT ALL OBJECTS
WHERE
[word surface ~ '^[Tt]']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.1
SELECT ALL OBJECTS
WHERE
[word surface ~ 'h$']
GO
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.2
SELECT ALL OBJECTS
WHERE
[word lemma ~ 'e$']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.3
SELECT ALL OBJECTS
WHERE
[word lemma !~ 'e$']
GO
++++ answer
 //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.4
SELECT ALL OBJECTS
WHERE
[word NOT lemma !~ 'e$']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.5
SELECT ALL OBJECTS
WHERE
[word NOT NOT NOT lemma !~ 'e$']
GO
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 14.6
SELECT ALL OBJECTS
WHERE
[word NOT NOT NOT pos !~ 'e$']
GO
++++ answer failcompiler
Typechecking failed with compiler error
The feature pos is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15
SELECT ALL OBJECTS
WHERE
GO
++++ answer failcompiler
Parsing failed
syntax error near the token go
---- answer
++++ query topographic query on realistic db number 15.1
SELECT ALL OBJECTS
WHERE
[Clause
  [Word]
  [gap focus
     [Phrase first]
  ]
  [Phrase]
  [Phrase last]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.2
SELECT ALL OBJECTS
IN {1-2, 8-9}
WHERE
[Clause_atom]
OR
[Clause]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 < [ clause 20 { 1-2, 8-9 } false  //  <  > 
 ]
 > 
 < [ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.3
SELECT ALL OBJECTS
IN {1-2, 7-8}
WHERE
[Clause_atom]
OR
[Clause]
GO
++++ answer
 //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.4
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word as p1]
]
OR
[Phrase
  [Word surface=p1.surface]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.5
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word as p1]*
]
++++ answer failcompiler
Weeding failed with compiler error
You may not have an object reference on an object block with a * operator.
---- answer
++++ query topographic query on realistic db number 15.6
SELECT ALL OBJECTS
WHERE
[Phrase 
  [Word]
  [Word first]
]
++++ answer failcompiler
Weeding failed with compiler error
The 'first' modifier must only be used for the first object block in a blocks.
---- answer
++++ query topographic query on realistic db number 15.7
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word last]
  [Word]
]
++++ answer failcompiler
Weeding failed with compiler error
The 'last' modifier must only be used for the last object block in a blocks.
---- answer
++++ query topographic query on realistic db number 15.8
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word self = p1.self]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The object reference has not been declared in the object reference usage 'p1.self'.
---- answer
++++ query topographic query on realistic db number 15.9
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Word parent = p1.does_not_exist]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature does not exist on the object type of the object reference
in the object reference usage 'p1.does_not_exist'.
---- answer
++++ query topographic query on realistic db number 15.10
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type = DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant DoesNotExist does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.11
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ ""]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.12
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type !~ ""]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.13
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type !~ blah]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.14
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ blah]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.15
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type !~ 1]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.16
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ 1]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.17
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type ~ NIL]
++++ answer failcompiler
Weeding failed with compiler error
The '~' and '!~' tilde operators (regular expression matching) can only be used with strings on the right-hand side.
---- answer
++++ query topographic query on realistic db number 15.18
SELECT ALL OBJECTS
WHERE
[Phrase p1 phrase_function = p1.self]
++++ answer failcompiler
Parsing failed
syntax error near the string 'phrase_function'
---- answer
++++ query topographic query on realistic db number 15.19
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type IN (NP, Subj, DoesNotExist)]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.20
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type IN (NP, DoesNotExist)]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant DoesNotExist does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.21
SELECT ALL OBJECTS
WHERE
[Clause_atom
  [Phrase
     [Word as p1]
  ]*
  [Word surface = p1.surface]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.22
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function = Subj]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with an enumeration constant, but the comparison operator is not HAS, as it should be.
---- answer
++++ query topographic query on realistic db number 15.23
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type HAS Subj]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.24
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type < Pred]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Pred does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.25
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function IN (1,2,3)]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared with a list of integers.  The feature is neither of type INTEGER nor of type ID_D.
---- answer
++++ query topographic query on realistic db number 15.26
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function HAS 1]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with a integer using the HAS operator, but the list is neither a list of integers, nor a list of id_ds.
---- answer
++++ query topographic query on realistic db number 15.27
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type > 1]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with an integer.  The feature is neither an integer nor an id_d.
---- answer
++++ query topographic query on realistic db number 15.28
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type <= "a"]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.29
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Phrase phrase_function HAS p1.phrase_type]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared
using HAS and an object reference usage. The feature is a list of enum
constants, but the object reference usage is not the same enum.
---- answer
++++ query topographic query on realistic db number 15.30
SELECT ALL OBJECTS
WHERE
[Word as w1
  [Phrase phrase_function HAS w1.surface]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared
using HAS and an object reference usage. The feature is a list of enum
constants, but the object reference usage is not an enum.
---- answer
++++ query topographic query on realistic db number 15.31
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Phrase phrase_function HAS p1.phrase_function]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_function is being compared
using HAS and an object reference usage.
The feature is a list, but so is the object reference usage.
The HAS operator is only for comparing lists with atomic values.
---- answer
++++ query topographic query on realistic db number 15.32
SELECT ALL OBJECTS
WHERE
[Phrase as p1
  [Phrase phrase_type HAS p1.phrase_function]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared
using HAS and an object reference usage.
The feature is not a list.
The HAS operator is only for comparing lists with atomic values.
---- answer
++++ query topographic query on realistic db number 15.33
SELECT ALL OBJECTS
WHERE
[Word surface IN (1,2,3)]
++++ answer failcompiler
Typechecking failed with compiler error
The feature surface is being compared with a list of integers.  The feature is neither of type INTEGER nor of type ID_D.
---- answer
++++ query topographic query on realistic db number 15.34
SELECT ALL OBJECTS
WHERE
[DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.35
SELECT ALL OBJECTS
WHERE
NOTEXIST [Word]*
++++ answer failcompiler
Weeding failed with compiler error
You may not have a NOTEXIST on an object block with a * operator.
---- answer
++++ query topographic query on realistic db number 15.36
SELECT ALL OBJECTS
WHERE
[Word as p1]*
++++ answer failcompiler
Weeding failed with compiler error
You may not have an object reference on an object block with a * operator.
---- answer
++++ query topographic query on realistic db number 15.37
SELECT ALL OBJECTS
WHERE
[word]
[word first and last]
[word]
++++ answer failcompiler
Weeding failed with compiler error
The 'first and last' modifier must only be used object blocks that are both first and last in their blocks.
---- answer
++++ query topographic query on realistic db number 15.38
SELECT ALL OBJECTS
WHERE
[phrase as p1]
[phrase as p1]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object reference p1 has already been declared once.  An object reference must not be declared more than once.
---- answer
++++ query topographic query on realistic db number 15.39
SELECT ALL OBJECTS
WHERE
[Word]
.. < -1
[Word]
++++ answer failcompiler
Parsing failed
syntax error near the token -
---- answer
++++ query topographic query on realistic db number 15.40
SELECT ALL OBJECTS
WHERE
[Word]
.. <= -1
[Word]
++++ answer failcompiler
Parsing failed
syntax error near the token -
---- answer
++++ query topographic query on realistic db number 15.41
SELECT ALL OBJECTS
WHERE
[Word]
.. BETWEEN 5 and 3
[Word]
++++ answer failcompiler
Weeding failed with compiler error
Error: Something wrong with a restrictor on a power block ("..").
If the restrictor is "< integer", the integer must not be 0.
If the restrictor is "between X and Y", then X must be less than or
equal to Y.
---- answer
++++ query topographic query on realistic db number 15.42
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap]
   [gap]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.43
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap?]
   [gap?]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.44
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap?]
   [gap]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.45
SELECT ALL OBJECTS
WHERE
[Phrase
   [gap]
   [gap?]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.46
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   [gap]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.47
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   [gap?]
]
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.48
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   NOTEXIST [Word]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.49
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   ..
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two power blocks (i.e., "..") next to each other.
---- answer
++++ query topographic query on realistic db number 15.50
SELECT ALL OBJECTS
WHERE
[Clause
   [Gap
      [DoesNotExist]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.51
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   [Gap
      [Word lemma = p1.self]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.52
SELECT ALL OBJECTS
WHERE
[Clause
   [Gap
      [Word lemma = 1]
   ]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature lemma is being compared with an integer.  The feature is neither an integer nor an id_d.
---- answer
++++ query topographic query on realistic db number 15.53
SELECT ALL OBJECTS
WHERE
[Clause
   [gap?
      [DoesNotExist]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.54
SELECT ALL OBJECTS
WHERE
[Clause
   NOTEXIST [DoesNotExist]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.55
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   [Gap?
      [Word lemma = p1.self]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.56
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   NOTEXIST [Word
      [Word lemma = p1.self]
   ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.57
SELECT ALL OBJECTS
WHERE
[Clause
   [Word as p1]
   OR
   [Word
      [Word lemma = p1.self]
   ]*
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.58
SELECT ALL OBJECTS
WHERE
[Clause
   [Gap?
      [Word lemma = 1]
   ]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature lemma is being compared with an integer.  The feature is neither an integer nor an id_d.
---- answer
++++ query topographic query on realistic db number 15.59
SELECT ALL OBJECTS
WHERE
[Phrase as p1]
OR
[Phrase phrase_function HAS p1.phrase_function]
OR
[Phrase]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.60
SELECT ALL OBJECTS
WHERE
[Phrase DoesNotExist = 1]
OR
[Phrase]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature DoesNotExist does not exist on its enclosing object type.
---- answer
++++ query topographic query on realistic db number 15.61
SELECT ALL OBJECTS
WHERE
[Phrase phrase_function HAS 1]
OR
[Phrase]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with a integer using the HAS operator, but the list is neither a list of integers, nor a list of id_ds.
---- answer
++++ query topographic query on realistic db number 15.62
SELECT ALL OBJECTS
WHERE
[Word surface ~'[Th']
++++ answer failcompiler
Weeding failed with compiler error
Error compiling regular expression.  PCRE2 reported:
missing terminating ] for character class
Error occured at characterposition 3 in the pattern.
---- answer
++++ query topographic query on realistic db number 15.63
SELECT ALL OBJECTS
WHERE
[DoesNotExist]*
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type name 'doesnotexist' does not exist.
---- answer
++++ query topographic query on realistic db number 15.64
SELECT ALL OBJECTS
WHERE
[Word
  NOT lemma <> "be"
]
++++ answer
 //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.65
SELECT ALL OBJECTS
WHERE
[Word
  lemma IN (Bah, Bah, Black, Sheep)
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature 'lemma' is not an enumeration, yet the left-hand-side is a list of enumeration constants.
---- answer
++++ query topographic query on realistic db number 15.66
SELECT ALL OBJECTS
WHERE
[Phrase
   phrase_function = 1
]
++++ answer failcompiler
Typechecking failed with compiler error
The list feature phrase_function is being compared with an integer, but the comparison operator is not HAS, as it should be.
---- answer
++++ query topographic query on realistic db number 15.67
SELECT ALL OBJECTS
WHERE
[word parents HAS Sheep
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Sheep does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.68
SELECT ALL OBJECTS
WHERE
[Phrase
   phrase_function HAS Sheep
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Sheep does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.69
SELECT ALL OBJECTS
WHERE
[Word
  NOT magic <> 11
]
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.70
SELECT ALL OBJECTS
WHERE
[Word
  parents HAS def_article
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant def_article does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.71
SELECT ALL OBJECTS
WHERE
[Phrase
   phrase_function HAS def_article
]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant def_article does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.72
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents HAS p1.lemma]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared
using HAS and an object reference usage. The feature is a list of id_d, but
the object reference usage is not an id_d.
---- answer
++++ query topographic query on realistic db number 15.73
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word magic IN p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature magic is being compared
using IN and an object reference usage. The feature is an integer, but
the object reference usage is not a list of integer.
---- answer
++++ query topographic query on realistic db number 15.74
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word self in p1.parents]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.75
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Phrase phrase_type IN p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature phrase_type is being compared
using IN and an object reference usage. The feature is an enum,
but the object reference usage is not a list of enum.
---- answer
++++ query topographic query on realistic db number 15.76
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Phrase self in p1.parents]
]
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.77
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word self in p1.lemma]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared
using IN and an object reference usage.
The object reference usage is not a list.
The IN operator is only for comparing atomic values with lists.
---- answer
++++ query topographic query on realistic db number 15.78
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents IN p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared
using IN and an object reference usage.
The object reference usage is a list, but so is the feature.
The IN operator is only for comparing atomic values with lists.
---- answer
++++ query topographic query on realistic db number 15.79
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents IN p1.lemma]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared
using IN and an object reference usage.
The object reference usage is not a list.
The IN operator is only for comparing atomic values with lists.
---- answer
++++ query topographic query on realistic db number 15.80
SELECT ALL OBJECTS
WHERE
[Phrase as p1
    [Word self in p1.phrase_function]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared
using IN and an object reference usage. The feature is an id_d, but
the object reference usage is not a list of id_d.
---- answer
++++ query topographic query on realistic db number 15.81
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word self = p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared with an object reference usage whose feature is of a different type.
---- answer
++++ query topographic query on realistic db number 15.82
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents <> p1.parents]
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature parents is being compared with an object reference usage. Both are lists, so you must use either IN, HAS, or = as the comparison operator.
---- answer
++++ query topographic query on realistic db number 15.83
SELECT ALL OBJECTS
WHERE
[Word as p1
    [Word parents = p1.parents]
]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.84
SELECT ALL OBJECTS
WHERE
[Word 
   self = "not_an_id" AND self = NIL
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.85
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word self = NIL AND self = p1.self]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.86
SELECT ALL OBJECTS
WHERE
[Word 
   self = "not_an_id" OR self = NIL
]
++++ answer failcompiler
Typechecking failed with compiler error
The feature self is being compared with a string.  The feature is not a string.
---- answer
++++ query topographic query on realistic db number 15.87
SELECT ALL OBJECTS
WHERE
[Word 
   surface ~ '[Th' AND self = NIL
]
++++ answer failcompiler
Weeding failed with compiler error
Error compiling regular expression.  PCRE2 reported:
missing terminating ] for character class
Error occured at characterposition 3 in the pattern.
---- answer
++++ query topographic query on realistic db number 15.88
SELECT ALL OBJECTS
WHERE
[Word 
   surface ~ '[Th' OR self = NIL
]
++++ answer failcompiler
Weeding failed with compiler error
Error compiling regular expression.  PCRE2 reported:
missing terminating ] for character class
Error occured at characterposition 3 in the pattern.
---- answer
++++ query topographic query on realistic db number 15.89
SELECT ALL OBJECTS
IN {1}
WHERE
[Word as p1
   [Word NOT (self = p1.self AND self = NIL)]
]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.90
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT (self = p1.self OR self = NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.91
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word self = p1.self AND self = NIL]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.92
SELECT ALL OBJECTS
IN { 3 }
WHERE
[Word as p1
   [Word self = p1.self OR self = NIL]
]
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.93
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
   [Word self = NIL OR self = p1.self]
]
++++ answer
 //  <  < [ word 3 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.94
SELECT ALL OBJECTS
WHERE
[phrase phrase_type IN (Subj,Attr) AND self = NIL]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant Subj does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.95
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
]
OR
[Word
   self = p1.self OR self = NIL
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.96
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
]
OR
[Word
   self = p1.self AND self = NIL
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.97
SELECT ALL OBJECTS
IN {3}
WHERE
[Word as p1
]
OR
[Word
   self = p1.self AND self = NIL
]
[Word]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'p1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer
++++ query topographic query on realistic db number 15.98
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT self <> p1.self AND self = NIL]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.99
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word self = p1.self AND (self = NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.100
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT (self = p1.self AND self <> NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.101
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT ((self = p1.self) AND self <> NIL)]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.102
SELECT ALL OBJECTS
WHERE
[Word as p1
   [Word NOT ((self = p1.self) AND (self <> NIL AND self <> NIL))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.103
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word self = p1.self AND self = p1.self]
]
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.104
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word self = p1.self OR self = p1.self]
]
++++ answer
 //  <  < [ word 9 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 15.105
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self = p1.self OR (self = p1.self OR self = p1.self))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.106
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self <> NIL OR (self = p1.self OR self = p1.self))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.107
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self <> NIL OR (self = NIL OR self = p1.self))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.108
SELECT ALL OBJECTS
IN { 9 }
WHERE
[Word as p1
   [Word NOT (self <> NIL OR (self = p1.self OR self = NIL))]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 15.109
SELECT ALL OBJECTS
WHERE
[Phrase phrase_type = DoesNotExist OR self = NIL]
++++ answer failcompiler
Symbolchecking failed with compiler error
The enumeration constant DoesNotExist does not exist
in the enumeration of the feature.
---- answer
++++ query topographic query on realistic db number 15.110
SELECT ALL OBJECTS
WHERE
[Phrase GET does_not_exist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature 'does_not_exist' does not exist for the given object type.
---- answer
++++ query topographic query on realistic db number 15.111
SELECT ALL OBJECTS
WHERE
[Phrase
   [word]
   [gap?]
   [gap?]
   [word]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two gap_blocks or opt_gap_blocks next to each other,
       nor can you have an opt_gap_block next to a gap_block.
---- answer
++++ query topographic query on realistic db number 15.112
SELECT ALL OBJECTS
WHERE
[Phrase GET does_not_exist]
[Phrase]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature 'does_not_exist' does not exist for the given object type.
---- answer
	

++++ query topographic query on realistic db number 15.113
SELECT ALL OBJECTS
WHERE
[Phrase
   [Word]
   ..
   ..
   [Word]
]
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have two power blocks (i.e., "..") next to each other!
---- answer
++++ query topographic query on realistic db number 15.114
SELECT ALL OBJECTS
WHERE
[Clause
   [
      ..
      [Word]
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 15.115
SELECT ALL OBJECTS
WHERE
[Clause
   [
      [Word]
      ..
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
Error: The power block cannot appear at the beginning or end.
---- answer
++++ query topographic query on realistic db number 15.116
SELECT ALL OBJECTS
WHERE
[Clause
   ..
   [
      [Word]
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 15.117
SELECT ALL OBJECTS
WHERE
[Clause
   [
      [Word]
   ]
   [gap]
   ..
]
GO
++++ answer failcompiler
Weeding failed with compiler error
Error: The power block cannot appear at the beginning or end.
---- answer
++++ query topographic query on realistic db number 15.118
SELECT ALL OBJECTS
WHERE
[Clause
   [
      [Word]
      ..
   ]
   [gap]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
Error: You cannot have a power block (i.e., "..") at the end!
---- answer
++++ query topographic query on realistic db number 15.119
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
      ..
      [Word]
   ]
   [gap]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 15.120
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
      [Word]
   ]
   [gap
      ..
   ]
]
GO
++++ answer failcompiler
Weeding failed with compiler error
The first block in a context cannot be a power block (i.e., "..").
---- answer
++++ query topographic query on realistic db number 16
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    NOTEXIST [Word pos IN (adjective, verb)]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.1
SELECT ALL OBJECTS
WHERE
NOTEXIST [Sentence self = 22]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.2
SELECT ALL OBJECTS
WHERE
NOTEXIST [Sentence self = 23]
++++ answer
 //  <  > 
---- answer
++++ query topographic query on realistic db number 16.3
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    NOTEXIST [Word pos IN (adjective, verb)]
    [Word pos=def_article]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.4
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word NOT pos IN (def_article,noun)]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.4.1
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word NOT pos IN (def_article)]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.5
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word pos IN (adjective, verb)]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.6
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase
    [Word pos=preposition]
    NOTEXIST [Word pos IN (adjective, verb)]
    [Word pos=def_article]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 16.7
SELECT ALL OBJECTS
WHERE
[Paragraph
  NOTEXIST [Phrase
    NOTEXIST [Word pos IN (adjective, verb)]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.8
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = NP
    NOTEXIST [Phrase
      NOTEXIST [Word pos IN (adjective, verb)]
    ]
  ]
]
++++ answer
 // 
---- answer
++++ query topographic query on realistic db number 16.9
SELECT ALL OBJECTS
WHERE
[Paragraph
  [Phrase phrase_type = PP
    NOTEXIST [Phrase phrase_type = VP OR phrase_type = AP
      NOTEXIST [Word pos IN (adjective, verb)]
    ]
  ]
]
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false  //  <  < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 17
SELECT ALL OBJECTS
WHERE
[Paragraph`para
  [word`w1`w2 pos=def_article]
  [word`w3`w4`w5]*{0-1}
]
GO
++++ answer
 //  <  < [ paragraph 23 { 1-9 } false `para  //  <  < [ word 1 { 1 } false `w1`w2  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false `w1`w2  //  <  > 
 ]
[ word 2 { 2 } false `w3`w4`w5  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false `w1`w2  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false `w1`w2  //  <  > 
 ]
[ word 7 { 7 } false `w3`w4`w5  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 18
SELECT ALL OBJECTS
WHERE
[Sentence`yellow
]
GO
++++ answer
 //  <  < [ sentence 22 { 1-9 } false `yellow  //  <  > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 18.1
SELECT ALL OBJECTS
WHERE
[Clause`green
   [clause_atom`envious]
   [clause_atom`slippery`slope]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `green  //  <  < [ clause_atom 17 { 1-2 } false `envious  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false `slippery`slope  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 18.1.1
SELECT ALL OBJECTS
WHERE
[Clause`turquoise
   [clause_atom]
   [gap?`blue retrieve]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `turquoise  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false `blue  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 18.1.2
SELECT ALL OBJECTS
WHERE
[Clause
   [clause_atom]
   [gap`my`gaps`are`nice focus]
   [clause_atom]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ clause_atom 17 { 1-2 } false  //  <  > 
 ]
[ pow_m { 3-7 } true `my`gaps`are`nice  //  <  > 
 ]
[ clause_atom 19 { 8-9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19
SELECT ALL OBJECTS
WHERE
[Clause`flash
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `flash  //  <  > 
 ]
 > 
 < [ clause 21 { 3-7 } false `flash  //  <  > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19.1
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [gap`Gordon retrieve
      [phrase`Flash_Gordon first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ pow_m { 3-7 } false `Gordon  //  <  < [ phrase 11 { 3 } false `Flash_Gordon  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19.2
SELECT ALL OBJECTS WHERE
[Clause`Flash
   [phrase`Rela phrase_function HAS Rela GET phrase_function ]
   OR
   [phrase`PreC phrase_function HAS PreC GET phrase_function ] 
   OR
   [phrase`PreC phrase_function HAS Attr GET phrase_function ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 15 { 8 } false `PreC (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false `PreC (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela (phrase_function=" Rela Subj ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 19.3
SELECT ALL OBJECTS WHERE
[Clause`Flash
   [phrase`Rela phrase_function HAS Rela GET phrase_function ]
   OR
   [phrase`PreC phrase_function HAS PreC GET phrase_function ] 
   OR
   [phrase`PreC phrase_function HAS Attr GET phrase_function ]
   OR
   [phrase`PreC phrase_function HAS Loca GET phrase_function ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 15 { 8 } false `PreC (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false `PreC (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela (phrase_function=" Rela Subj ") //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false `PreC (phrase_function=" Loca ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query topographic query on realistic db number 20.1
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [
      [phrase`Flash_Gordon first phrase_function HAS Rela]
   ]
]
GO
++++ answer
 //  <  < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Flash_Gordon  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.2
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [Phrase`Rela phrase_function HAS Rela]
   [
      [phrase`Pred phrase_function HAS Pred]
      OR
      [phrase`PP phrase_function HAS Loca]
   ]
]
GO
++++ answer
 //  <  < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela  //  <  > 
 ]
[ phrase 12 { 4 } false `Pred  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.3
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [Phrase`Rela phrase_function HAS Rela]
   [
      [phrase`Pred phrase_function HAS Pred]
      ..
      [phrase`PP phrase_function HAS Loca]
   ]
]
GO
++++ answer
 //  <  < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `Rela  //  <  > 
 ]
[ phrase 12 { 4 } false `Pred  //  <  > 
 ]
[ phrase 13 { 5-7 } false `PP  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.4
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [Phrase`Subj phrase_function HAS Subj]
   [
      [phrase`Rela phrase_function HAS Rela]
      OR
      [phrase`PreC phrase_function HAS PreC]
      OR
      [phrase`Attr phrase_function HAS Attr]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 10 { 1-2 } false `Subj  //  <  > 
 ]
[ phrase 15 { 8 } false `PreC  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.5
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [
      [phrase`first GET phrase_function]
   ]
   [phrase`second GET phrase_function]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 10 { 1-2 } false `first (phrase_function=" Subj ") //  <  > 
 ]
[ phrase 15 { 8 } false `second (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false `first (phrase_function=" PreC ") //  <  > 
 ]
[ phrase 16 { 9 } false `second (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 12 { 4 } false `second (phrase_function=" Pred ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false `first (phrase_function=" Pred ") //  <  > 
 ]
[ phrase 13 { 5-7 } false `second (phrase_function=" Loca ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.6
SELECT ALL OBJECTS
WHERE
[Clause`Flash
   [
      [phrase`first GET phrase_function]
   ]
   ..
   [phrase`second GET phrase_function]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false `Flash  //  <  < [ phrase 10 { 1-2 } false `first (phrase_function=" Subj ") //  <  > 
 ]
[ phrase 15 { 8 } false `second (phrase_function=" PreC ") //  <  > 
 ]
 > 
 < [ phrase 10 { 1-2 } false `first (phrase_function=" Subj ") //  <  > 
 ]
[ phrase 16 { 9 } false `second (phrase_function=" Attr ") //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false `first (phrase_function=" PreC ") //  <  > 
 ]
[ phrase 16 { 9 } false `second (phrase_function=" Attr ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false `Flash  //  <  < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 12 { 4 } false `second (phrase_function=" Pred ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 13 { 5-7 } false `second (phrase_function=" Loca ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false `first (phrase_function=" Rela Subj ") //  <  > 
 ]
[ phrase 14 { 6-7 } false `second (phrase_function=" NA ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false `first (phrase_function=" Pred ") //  <  > 
 ]
[ phrase 13 { 5-7 } false `second (phrase_function=" Loca ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false `first (phrase_function=" Pred ") //  <  > 
 ]
[ phrase 14 { 6-7 } false `second (phrase_function=" NA ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.7
SELECT ALL OBJECTS
WHERE
[Phrase as p1
   [
      [word parents HAS p1.self]
   ]
   [Word parents HAS p1.self]
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.8
SELECT ALL OBJECTS
WHERE
[Phrase as p1
   [
      [word parents HAS p1.self]
      OR
      [Phrase self = p1.self]
   ]
   [Word parents HAS p1.self] * {0,1}
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 1-2 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	





++++ query topographic query on realistic db number 20.9
SELECT ALL OBJECTS
WHERE
[Clause
   [
	[Word GET POS]
        ..
        [Word GET POS]
   ] * { 1-3 }
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false (POS="def_article") //  <  > 
 ]
[ word 2 { 2 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (POS="def_article") //  <  > 
 ]
[ word 8 { 8 } false (POS="verb") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (POS="def_article") //  <  > 
 ]
[ word 9 { 9 } false (POS="adjective") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (POS="noun") //  <  > 
 ]
[ word 8 { 8 } false (POS="verb") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (POS="noun") //  <  > 
 ]
[ word 9 { 9 } false (POS="adjective") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (POS="verb") //  <  > 
 ]
[ word 9 { 9 } false (POS="adjective") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 4 { 4 } false (POS="verb") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (POS="relative_pronoun") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (POS="verb") //  <  > 
 ]
[ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (POS="preposition") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 < [ word 6 { 6 } false (POS="def_article") //  <  > 
 ]
[ word 7 { 7 } false (POS="noun") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.10
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.11
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.12
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
	..
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.13
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Phrase]
   ]
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.14
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Word]
	[Word]
   ]
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.15
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   ..
   [
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ phrase 13 { 5-7 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
[ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.16
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   ..
   [
	[Phrase]
   ]
   ..
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
[ phrase 12 { 4 } false  //  <  > 
 ]
[ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.17
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]
   [
	[Word]
	..
	[
		[Phrase]
	]
   ]
   ..
   [Word]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.18
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]!
   [
     [gap retrieve]
     [word]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
[ word 8 { 8 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.19
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]!
   [
	[Word]
	[Gap retrieve]
	[Phrase]
	[Phrase]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
[ phrase 15 { 8 } false  //  <  > 
 ]
[ phrase 16 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query topographic query on realistic db number 20.20
SELECT ALL OBJECTS
WHERE
[Clause
   [Word]!
   [
	[gap? retrieve]
   ]
]
GO
++++ answer
 //  <  < [ clause 20 { 1-2, 8-9 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
[ pow_m { 3-7 } false  //  <  > 
 ]
 > 
 < [ word 8 { 8 } false  //  <  > 
 ]
 > 
 < [ word 9 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 21 { 3-7 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 4 { 4 } false  //  <  > 
 ]
 > 
 < [ word 5 { 5 } false  //  <  > 
 ]
 > 
 < [ word 6 { 6 } false  //  <  > 
 ]
 > 
 < [ word 7 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query drop indexes on single object type
drop indexes on object type [Paragraph]
++++ answer
---- answer
++++ query create indexes on single object type
create indexes on object type [Paragraph]
++++ answer
---- answer
++++ query drop indexes on all object types
drop indexes on object types [ALL]
++++ answer
---- answer
++++ query vacuum database without analyze
vacuum database
++++ answer
---- answer
++++ query create indexes on all object types
create indexes on object types [ALL]
++++ answer
---- answer
++++ query vacuum database with analyze
vacuum database analyze
++++ answer
---- answer
++++ query create object type with extremely long name...
CREATE OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  MYINTEGER : INTEGER;
  MYID_D : id_d;
  MYASCII : ASCII;
  MYSTRING : STRING;
  MYSTRINGFROMSET : STRING FROM SET;
  MYSOM : SET OF MONADS;
  MYENUM : phrase_type_t;
  MYLISTOFINTEGER : LIST OF INTEGER;
  MYLISTOFID_D : LIST OF ID_D;
  MYLISTOFENUM : LIST OF Phrase_type_t;
]
GO
++++ answer
---- answer
++++ query creating one object (1) inside the long-named object type
CREATE OBJECT
FROM MONADS = {1}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := (VP,NP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 24          |
+-------------+
---- answer
++++ query creating one object (2) inside the long-named object type
CREATE OBJECT
FROM MONADS = {2}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 101;
  myid_d := nil;
  myascii := "Blah2";
  mystring := "Blah2 blah2";
  mystringfromset := "BLAH2";
  mysom := { 1-12 };
  myenum := VP;
  mylistofinteger := (1,2,3,4000000);
  mylistofid_d := (1,2,3,3000000);
  mylistofenum := (NP,VP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 25          |
+-------------+
---- answer
++++ query creating more than one object inside the long-named object type
CREATE OBJECTS WITH OBJECT TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
CREATE OBJECT
FROM MONADS = {3}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := ();
]
CREATE OBJECT
FROM MONADS = {4}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 4 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := ();
  mylistofenum := (VP);
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 2                      |
+------------------------+
---- answer

++++ query newdb REcreating realistic DB schema
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
WITHOUT UNIQUE MONADS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
WITHOUT UNIQUE MONADS
[Clause]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph]
GO
++++ answer
---- answer
++++ query UPDATING object type Phrase
UPDATE OBJECT TYPE
[Phrase
   REMOVE phrase_function;
   ADD surface: STRING FROM SET;
   ADD pos : pos_t;
   ADD parent : id_d;
   ADD lemma : STRING FROM SET WITH INDEX;
   ADD parents : LIST OF id_d;
   ADD magic : integer DEFAULT 42;
]
++++ answer
---- answer
++++ query selecting features from newly updated Phrase object type
SELECT FEATURES FROM TYPE [Phrase]
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| phrase_type           | phrase_type_t | 'NP'             | false           |
| self                  | id_d          | '0'              | true            |
| surface               | string        | ''               | false           |
| pos                   | pos_t         | 'def_article'    | false           |
| parent                | id_d          | '0'              | false           |
| lemma                 | string        | ''               | false           |
| parents               | list of id_d  | ''               | false           |
| magic                 | integer       | '42'             | false           |
+-----------------------+---------------+------------------+-----------------+
---- answer
++++ query UPDATING object type Word, removing all features
UPDATE TYPE
[Word
   REMOVE surface;
   REMOVE pos;
   REMOVE parent;
   REMOVE lemma;
   REMOVE parents;
   REMOVE magic;
]
++++ answer
---- answer
++++ query selecting features from newly updated Word object type
SELECT FEATURES FROM TYPE [Word]
++++ answer
+-----------------------+---------------+------------------+-----------------+
| feature name : string | type : string | default : string | computed : bool |
+-----------------------+---------------+------------------+-----------------+
| self                  | id_d          | '0'              | true            |
+-----------------------+---------------+------------------+-----------------+
---- answer
++++ query UPDATING object type Word, adding a lot of features...
UPDATE TYPE
[Word
    ADD myinteger : INTEGER DEFAULT 23;
    ADD myintegerwithindex : INTEGER WITH INDEX DEFAULT -133;
    ADD myid_d : ID_D DEFAULT 2;
    ADD myid_dwithindex : ID_D WITH INDEX DEFAULT 1;
    ADD mystring : STRING DEFAULT "blah";
    ADD mystringwithindex : STRING WITH INDEX DEFAULT "blof";
    ADD mystringfromset : STRING FROM SET DEFAULT "bloat";
    ADD mystringfromsetwithindex : STRING FROM SET WITH INDEX DEFAULT "float";
    ADD myascii : ASCII DEFAULT "blah";
    ADD myasciiwithindex : ASCII WITH INDEX DEFAULT "blof";
    ADD myasciifromset : ASCII FROM SET DEFAULT "bloat";
    ADD myasciifromsetwithindex : ASCII FROM SET WITH INDEX DEFAULT "float";
    ADD myphrasefunction : Phrase_Function_T DEFAULT Subj;
    ADD mylistofinteger : LIST OF INTEGER;
    ADD mylistofid_d : LIST OF ID_D;
    ADD mylistofenum : LIST OF Phrase_Function_T;
]
++++ answer
---- answer
++++ query selecting features from newly updated Word object type
SELECT FEATURES FROM TYPE [Word]
++++ answer
+--------------------------+---------------------------+------------------+-----------------+
| feature name : string    | type : string             | default : string | computed : bool |
+--------------------------+---------------------------+------------------+-----------------+
| self                     | id_d                      | '0'              | true            |
| myinteger                | integer                   | '23'             | false           |
| myintegerwithindex       | integer                   | '-133'           | false           |
| myid_d                   | id_d                      | '2'              | false           |
| myid_dwithindex          | id_d                      | '1'              | false           |
| mystring                 | string                    | 'blah'           | false           |
| mystringwithindex        | string                    | 'blof'           | false           |
| mystringfromset          | string                    | 'bloat'          | false           |
| mystringfromsetwithindex | string                    | 'float'          | false           |
| myascii                  | ascii                     | 'blah'           | false           |
| myasciiwithindex         | ascii                     | 'blof'           | false           |
| myasciifromset           | ascii                     | 'bloat'          | false           |
| myasciifromsetwithindex  | ascii                     | 'float'          | false           |
| myphrasefunction         | phrase_function_t         | 'Subj'           | false           |
| mylistofinteger          | list of integer           | ''               | false           |
| mylistofid_d             | list of id_d              | ''               | false           |
| mylistofenum             | list of phrase_function_t | ''               | false           |
+--------------------------+---------------------------+------------------+-----------------+
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot assign number less than 0 to id_d.
UPDATE OBJECT TYPE
[Paragraph
   ADD myid_d : id_d DEFAULT -1;
]
++++ answer failcompiler
Typechecking failed with compiler error
You cannot assign a number below 0 to an id_d.
Feature myid_d is not type-compatible with its default value.
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot REMOVE self.
UPDATE OBJECT TYPE
[Paragraph
   REMOVE self;
]
++++ answer failcompiler
Weeding failed with compiler error
Cannot remove feature 'self'.
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot ADD self.
UPDATE OBJECT TYPE
[Paragraph
   ADD self : STRING from set;
]
++++ answer failcompiler
Weeding failed with compiler error
Feature 'self' is implicitly declared and cannot be declared explicitly.
---- answer
++++ query CREATE OBJECT TYPE fail: Cannot declare self.
CREATE OBJECT TYPE
[WillNotBeCreated
   self : STRING from set;
]
++++ answer failcompiler
Weeding failed with compiler error
Feature 'self' is implicitly declared and cannot be declared explicitly.
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot add feature with non-existent enum
UPDATE OBJECT TYPE
[Paragraph
   ADD featurewillnotbeadded : enumwhichdoesnotexist_t;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumwhichdoesnotexist_t used as the type of feature featurewillnotbeadded does not exist.
---- answer
++++ query CREATE OBJECT TYPE fail: Cannot add feature with non-existent enum
CREATE OBJECT TYPE
[WillNotBeCreated
   featurewillnotbecreated : enumwhichdoesnotexist_t;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumwhichdoesnotexist_t used as the type of feature featurewillnotbecreated does not exist.
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot add feature with non-existent enum constant
UPDATE OBJECT TYPE
[Paragraph
   ADD featurewillnotbeadded : Phrase_Type_t DEFAULT NotApplicable;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant NotApplicable does not exist in the enumeration Phrase_Type_t used as the type of feature featurewillnotbeadded.
---- answer
++++ query DELETE OBJECTS from an object type with no objects
DELETE OBJECTS 
BY MONADS = { 1 - 210000000 }
[Paragraph]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer
++++ query CREATE OBJECT TYPE fail: Cannot add feature with non-existent enum constant
CREATE OBJECT TYPE
[WillNotBeCreated
   featurewillnotbeadded : Phrase_Type_t DEFAULT NotApplicable;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant NotApplicable does not exist in the enumeration Phrase_Type_t used as the type of feature featurewillnotbeadded.
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot add feature which exists already
UPDATE OBJECT TYPE
[Word
    ADD myinteger : INTEGER DEFAULT 150;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Feature myinteger exists already.  Cannot add again.
---- answer
++++ query DROP OBJECT TYPE fail: Cannot remove non-existent object type
DROP TYPE [DoesNotExist]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type DoesNotExist does not exist.
---- answer
++++ query UPDATE OBJECT TYPE fail: Cannot update non-existent object type
UPDATE TYPE [DoesNotExist
	ADD willnotbeadded : integer;
]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type DoesNotExist does not exist.
---- answer
++++ query CREATE OBJECT TYPE fail: Cannot create already-existent object type
CREATE TYPE [Word]
++++ answer failcompiler
Symbolchecking failed with compiler error
Object type Word exists already.
---- answer
++++ query CREATE ENUMERATION fail: Cannot have two defaults
CREATE ENUMERATION will_not_be_created_t = {
   DEFAULT blah = 1,
   DEFAULT blof = 2
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query CREATE ENUMERATION fail: Cannot have two constants with the same name
CREATE ENUMERATION will_not_be_created_t = {
   blah = 1,
   blah = 2
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant blah is declared more than once.
This is not allowed.
---- answer
++++ query CREATE ENUMERATION fail: Cannot have two constants with the same value
CREATE ENUMERATION will_not_be_created_t = {
   blah = 1,
   blof = 1
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Value 1 is assigned to more than one label.
This is not allowed.
---- answer
++++ query CREATE ENUMERATION enumtest_t
CREATE ENUMERATION enumtest_t = {
    DEFAULT one = 1,
    two = 2,
    three = 3
}
++++ answer
---- answer
++++ query UPDATE ENUMERATION enumtest_t: Cannot remove default without specifying new default
UPDATE ENUMERATION enumtest_t = {
    REMOVE one
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Default is removed without specifying new default.
---- answer
++++ query UPDATE ENUMERATION enumtest_t fail: Cannot have more than one default: ADD ADD
UPDATE ENUMERATION enumtest_t = {
    ADD DEFAULT four = 4,
    ADD DEFAULT five = 5
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query UPDATE ENUMERATION enumtest_t fail: Cannot have more than one default: ADD UPDATE
UPDATE ENUMERATION enumtest_t = {
    ADD DEFAULT four = 4,
    UPDATE DEFAULT three = 5
}
++++ answer failcompiler
Weeding failed with compiler error
You cannot have more than one default
---- answer
++++ query UPDATE ENUMERATION enumtest_t fail: Cannot add already-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    ADD three = 4
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant three exists already.  Cannot add.
---- answer
++++ query UPDATE ENUMERATION enumtest_t fail: Cannot update non-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    UPDATE DEFAULT ten = 10
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant ten does not exist.  Cannot update.
---- answer
++++ query UPDATE ENUMERATION enumtest_t fail: Cannot remove non-existing enum constant
UPDATE ENUMERATION enumtest_t = {
    REMOVE ten
}
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration constant ten does not exist.  Cannot remove.
---- answer
++++ query UPDATE ENUMERATION enumtest_t success
UPDATE ENUMERATION enumtest_t = {
    REMOVE one,
    ADD DEFAULT four = 4,
    UPDATE three = 5
}
++++ answer
---- answer
++++ query SELECT ENUMERATION CONSTANTS enumtest_t
SELECT ENUMERATION CONSTANTS FROM ENUMERATION enumtest_t
++++ answer
+---------------------+-----------------+----------------+
| enum const : string | value : integer | default : bool |
+---------------------+-----------------+----------------+
| four                | 4               | true           |
| three               | 5               | false          |
| two                 | 2               | false          |
+---------------------+-----------------+----------------+
---- answer
++++ query DROP ENUMERATION fail: enum must exist
DROP ENUMERATION DoesNotExist_t
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration DoesNotExist_t did not exist.
---- answer
++++ query DROP ENUMERATION enumtest_t
DROP ENUMERATION enumtest_t
++++ answer
---- answer
++++ query SELECT ENUMERATION CONSTANTS enumtest_t fail: Does not exist
SELECT ENUMERATION CONSTANTS FROM ENUMERATION enumtest_t
++++ answer failcompiler
Symbolchecking failed with compiler error
Enumeration enumtest_t did not exist.
---- answer
++++ query CREATE SEGMENT
CREATE SEGMENT one_five RANGE = 1 - 5
++++ answer
---- answer
++++ query CREATE SEGMENT fail: Cannot create backwards range
CREATE SEGMENT five_one RANGE = 5 - 1
++++ answer failcompiler
Weeding failed with compiler error
Range in monad set must be monotonic (i.e., in 'A - B',
B must be greater than or equal to A).
The offending mse was 5-1.
---- answer
++++ query CREATE SEGMENT fail: Cannot create existing segment
CREATE SEGMENT one_five RANGE = 1 - 6
++++ answer failcompiler
Symbolchecking failed with compiler error
monad set with name 'one_five' exists already.
Cannot create.
---- answer




++++ query CREATE OBJECT TYPE foobar
CREATE OBJECT TYPE [foobar] GO
++++ answer
---- answer
++++ query DELETE OBJECTS on foobar, which has no objects
DELETE OBJECTS BY MONADS = { 1-10 } [foobar] GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
+-------------+
---- answer




++++ query newdb creating small database for testing object reference machinery
CREATE OBJECT TYPE [Phrase] GO
CREATE OBJECT TYPE [Word psp : INTEGER;] GO
CREATE OBJECT FROM MONADS = {1} [Word psp := 5;] GO
CREATE OBJECT FROM MONADS = {2} [Word psp := 0;] GO
CREATE OBJECT FROM MONADS = {3} [Word psp := 1;] GO
CREATE OBJECT FROM MONADS = {1-3} [Phrase]GO
CREATE OBJECT FROM MONADS = {4} [Word psp := 0;] GO
CREATE OBJECT FROM MONADS = {5} [Word psp := 1;] GO
CREATE OBJECT FROM MONADS = {4-5} [Phrase] GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 7           |
+-------------+
---- answer
++++ query testing the object reference machinery #1
SELECT ALL OBJECTS
WHERE
[Phrase
  [Word psp=5]
  ..
  [Word AS w1 psp=0 OR psp=1]
]
[Phrase
  [Word psp=w1.psp]
]
GO
++++ answer
 //  <  < [ phrase 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
[ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 1 { 1 } false  //  <  > 
 ]
[ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ phrase 7 { 4-5 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query newdb creating small database for testing object reference machinery #2
CREATE ENUMERATION pos_t = {
       V,
       N,
       P,
       A,
       PRON,
       NEG
}
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Sentence]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Clause
   mother : id_d;
   parent : id_d;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[Phrase
    parent : id_d;
]
GO

CREATE OBJECT TYPE 
WITH SINGLE MONAD OBJECTS
[Word
    surface : STRING;
    pos : pos_t;
    myint : INTEGER;
    parent : id_d;
    mother : id_d;
]
GO





CREATE OBJECT FROM MONADS = {1-10}
WITH ID_D = 16
[Sentence]
GO


CREATE OBJECT FROM MONADS = {1-3}
WITH ID_D = 4
[Clause
   mother := NIL;
   parent := 16;
]
GO



CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {1}
WITH ID_D = 10
[
    parent := 4;
]
CREATE OBJECT
FROM MONADS = {2}
WITH ID_D = 11
[
    parent := 4;
]
CREATE OBJECT
FROM MONADS = {3}
WITH ID_D = 12
[
    parent := 4;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {1}
WITH ID_D = 1
[
    surface := "I";
    pos := PRON;
    myint := 1;
    parent := 10;
    mother := NIL;
]
CREATE OBJECT
FROM MONADS = {2}
WITH ID_D = 2
[
    surface := "am";
    pos := V;
    myint := 2;
    parent := 11;
    mother := 1;
]
CREATE OBJECT
FROM MONADS = {3}
WITH ID_D = 3
[
    surface := "he.";
    pos := PRON;
    myint := 3;
    parent := 12;
    mother := 2;
]
GO








CREATE OBJECT FROM MONADS = {4-7}
WITH ID_D = 9
[Clause
   mother := 4;
   parent := 16;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {4}
WITH ID_D = 13
[
    parent := 9;
]
CREATE OBJECT
FROM MONADS = {5}
WITH ID_D = 14
[
    parent := 9;
]
CREATE OBJECT
FROM MONADS = {6-7}
WITH ID_D = 15
[
    parent := 9;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {4}
WITH ID_D = 5
[
    surface := "He";
    pos := PRON;
    myint := 1;
    parent := 13;
    mother := 10;
]
CREATE OBJECT
FROM MONADS = {5}
WITH ID_D = 6
[
    surface := "is";
    pos := V;
    myint := 2;
    parent := 14;
    mother := 11;
]
CREATE OBJECT
FROM MONADS = {6}
WITH ID_D = 7
[
    surface := "not";
    pos := NEG;
    myint := 1;
    parent := 15;
    mother := 12;
]
CREATE OBJECT
FROM MONADS = {7}
WITH ID_D = 8
[
    surface := "she.";
    pos := PRON;
    myint := 1;
    parent := 15;
    mother := 4;
]
GO

++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 4                      |
+------------------------+
---- answer


++++ query testing object reference machinery #2
SELECT ALL OBJECTS IN { 1-7 }
WHERE 
[Clause
  [Word AS w1 GET pos]
]
[Clause
  [Word pos=w1.pos AND myint=1 GET myint, pos]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (myint="1",pos="PRON") //  <  > 
 ]
 > 
 < [ word 8 { 7 } false (myint="1",pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query testing object reference machinery #3
SELECT ALL OBJECTS 
WHERE 
[Clause
  [Word AS w1]
]
[Clause
  [Word pos=w1.pos AND myint=2 GET pos,myint]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 6 { 5 } false (pos="V",myint="2") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query testing object reference machinery #4
SELECT ALL OBJECTS IN {1-7}
WHERE 
[Clause as c1
  [Phrase as p1
    parent = c1.self
    [Word as w1
        parent = p1.self
    ]
  ]
]
[Clause
  [Phrase
    [Word]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 6-7 } false  //  <  < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #5
SELECT ALL OBJECTS IN {1-7}
WHERE 
[Clause as c1
  [Phrase as p1
    parent = c1.self
    [Word AS w1
       parent = p1.self
       GET parent
    ]
  ]
]
[Clause as c2
  [Phrase as p2
    parent = c2.self
    [Word AS w2
       parent = p2.self AND pos = w1.pos
    ]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false (parent="10") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false (parent="11") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false (parent="12") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 6-7 } false  //  <  < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #6
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]
[Clause as c2
  mother = c1.self
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
[ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #7
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]*
[Clause as c2
  mother = c1.self
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'c1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer


++++ query testing object reference machinery #8
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1]
  ]
]
OR
[Clause as c2
  mother = c1.self
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'c1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer


++++ query testing object reference machinery #9
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
  [
    [Clause as c1
       [phrase as p1
         [word as w1]
       ]
    ]
  ]
]
[Clause as c2
  mother = c1.self
  [phrase as p2
     parent = c2.self
     [word as w2
        parent = p2.self AND mother = p1.self AND pos = w1.pos
     ]
  ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ phrase 10 { 1 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 11 { 2 } false  //  <  < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3 } false  //  <  < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ phrase 13 { 4 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 5 } false  //  <  < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query testing object reference machinery #10
SELECT ALL OBJECTS IN {1-7}
WHERE 
[
   [Clause as c1
      [Word as w1 GET pos]
      ..
      [word as w2 GET pos]
   ]
]
[Clause
   [Word pos = w1.pos GET pos]
   ..
   [Word pos = w2.pos GET pos]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
[ word 2 { 2 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 1 { 1 } false (pos="PRON") //  <  > 
 ]
[ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 3 { 3 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (pos="PRON") //  <  > 
 ]
[ word 6 { 5 } false (pos="V") //  <  > 
 ]
 > 
 < [ word 5 { 4 } false (pos="PRON") //  <  > 
 ]
[ word 8 { 7 } false (pos="PRON") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 8 { 7 } false (pos="PRON") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer


++++ query creating more objects for testing object reference machinery
CREATE OBJECT FROM MONADS = {8-10}
WITH ID_D = 17
[Clause
   mother := 9;
   parent := 16;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT
FROM MONADS = {8-9}
WITH ID_D = 18
[
    parent := 17;
]
CREATE OBJECT
FROM MONADS = {10}
WITH ID_D = 19
[
    parent := 17;
]
GO


CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT
FROM MONADS = {8}
WITH ID_D = 20
[
    surface := "He";
    pos := PRON;
    myint := 1;
    parent := 18;
    mother := 10;
]
CREATE OBJECT
FROM MONADS = {9}
WITH ID_D = 21
[
    surface := "is";
    pos := V;
    myint := 2;
    parent := 18;
    mother := 11;
]
CREATE OBJECT
FROM MONADS = {10}
WITH ID_D = 23
[
    surface := "not";
    pos := NEG;
    myint := 1;
    parent := 19;
    mother := 12;
]
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer



++++ query doing extended querying for object references #1
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1]
   ]
]
[Clause as c2
   [Word as w2 pos <> w1.pos]
]
[Clause as c3
   [Phrase as p1
      [Word (pos = w1.pos AND pos = w2.pos) AND mother = w2.mother]
   ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 < [ word 6 { 5 } false  //  <  > 
 ]
 > 
 < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 < [ word 8 { 7 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 18 { 8-9 } false  //  <  < [ word 20 { 8 } false  //  <  > 
 ]
 > 
 < [ word 21 { 9 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query doing extended querying for object references #2
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1]
   ]
]
[Clause as c2
   [Word as w2 pos = NEG]
]
[Clause as c3
   [Phrase as p1
      [Word (pos = w1.pos OR pos = w2.pos) AND mother = w2.mother]
   ]
]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 9 { 4-7 } false  //  <  < [ word 7 { 6 } false  //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 19 { 10 } false  //  <  < [ word 23 { 10 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer



++++ query doing extended querying for object references #3
SELECT ALL OBJECTS IN {1-10}
WHERE 
[
   [Clause as c1
      [Word as w1 GET pos, mother]
   ]
]
..
[Clause as c2
   [Phrase as p1 
      parent = c2.self
      [Word pos = w1.pos AND mother = w1.mother GET pos, mother]
   ]
]
++++ answer
 //  <  < [ clause 9 { 4-7 } false  //  <  < [ word 5 { 4 } false (pos="PRON",mother="10") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V",mother="11") //  <  > 
 ]
 > 
 < [ word 7 { 6 } false (pos="NEG",mother="12") //  <  > 
 ]
 > 
 < [ word 8 { 7 } false (pos="PRON",mother="4") //  <  > 
 ]
 > 
 > 
 ]
[ clause 17 { 8-10 } false  //  <  < [ phrase 18 { 8-9 } false  //  <  < [ word 20 { 8 } false (pos="PRON",mother="10") //  <  > 
 ]
 > 
 < [ word 21 { 9 } false (pos="V",mother="11") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 19 { 10 } false  //  <  < [ word 23 { 10 } false (pos="NEG",mother="12") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 3 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 3 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 5 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 5 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 6 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 6 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 7 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 7 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE 1000 MONADS
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE 1000 MONADS
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE FEATURE MONADS FROM [Phrase] 
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE FEATURE MONADS FROM [Phrase]
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer

++++ query doing WITH MAX RANGE FEATURE MONADS FROM [Clause] 
SELECT ALL OBJECTS IN {1-10}
WITH MAX RANGE FEATURE MONADS FROM [Clause]
WHERE 
[Word AS w1 pos=V GET pos]
..
[Word pos=w1.pos GET myint, pos]
++++ answer
 //  <  < [ word 2 { 2 } false (pos="V") //  <  > 
 ]
[ word 6 { 5 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 < [ word 6 { 5 } false (pos="V") //  <  > 
 ]
[ word 21 { 9 } false (myint="2",pos="V") //  <  > 
 ]
 > 
 > 
---- answer


# This tests that it is possible to have an object reference usage which
# points to the same object block.
++++ query
SELECT ALL OBJECTS IN {1-4}
WHERE
[word as w1 pos = w1.pos]
++++ answer
 //  <  < [ word 1 { 1 } false  //  <  > 
 ]
 > 
 < [ word 2 { 2 } false  //  <  > 
 ]
 > 
 < [ word 3 { 3 } false  //  <  > 
 ]
 > 
 < [ word 5 { 4 } false  //  <  > 
 ]
 > 
 > 
---- answer

# This tests the part_of(substrate) thing.
++++ query
SELECT ALL OBJECTS IN {3-7}
WHERE
[clause part_of(substrate)]
++++ answer
 //  <  < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(substrate) thing.
++++ query
SELECT ALL OBJECTS 
IN {2-7}
WHERE
[clause overlap(substrate)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the part_of(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3, 7-10}
WHERE
[clause part_of(universe)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3,7-9}
WHERE
[clause overlap(universe)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 9 { 4-7 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
# This tests the overlap(universe) thing.
++++ query
SELECT ALL OBJECTS IN {1-3,8-9}
WHERE
[clause overlap(substrate)]
++++ answer
 //  <  < [ clause 4 { 1-3 } false  //  <  > 
 ]
 > 
 < [ clause 17 { 8-10 } false  //  <  > 
 ]
 > 
 > 
---- answer
++++ query newdb creating realistic DB schema (2)
CREATE ENUMERATION pos_t = {
	def_article, noun, verb, relative_pronoun, preposition, adjective
}
GO

CREATE ENUMERATION phrase_type_t = {
   NP, VP, PP, AP
}
GO

CREATE ENUMERATION phrase_function_t = {
   NA, Subj, Objc, Rela, Pred, Loca, PreC, Attr, Adju, Time
}
GO

CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[Word
   surface: STRING FROM SET;
   pos : pos_t;
   parent : id_d;
   lemma : STRING FROM SET WITH INDEX;
   parents : LIST OF id_d;
   magic : integer DEFAULT 42;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Phrase
  phrase_type : phrase_type_t;
  phrase_function : LIST OF phrase_function_t;
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Clause_atom
  other_monads : set of monads;
]
GO


CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
[Clause
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH MULTIPLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[Sentence
  other_monads : set of monads;
]
GO

CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST AND LAST MONADS
[Paragraph
  other_monads : set of monads;
]
GO
++++ answer
---- answer
++++ query creating realistic Word objects
CREATE OBJECTS WITH OBJECT TYPE [Word]
CREATE OBJECT FROM MONADS = {1}
WITH ID_D = 1
[
   surface :="The";
   pos := def_article;
   parent := 10;
   lemma := "the";
   parents := (10,17,20,22,23);
   magic := 2;
]
CREATE OBJECT FROM MONADS = {2}
WITH ID_D = 2
[
   surface :="door,";
   pos := noun;
   parent := 10;
   lemma := "door";
   parents := (10,17,20,22,23);
   magic := 1;
]
CREATE OBJECT FROM MONADS = {3}
WITH ID_D = 3
[
   surface :="which";
   pos := relative_pronoun;
   parent := 11;
   lemma := "which";
   parents := (11,18,21,22,23);
   magic := 3;
]
CREATE OBJECT FROM MONADS = {4}
WITH ID_D = 4
[
   surface :="opened";
   pos := verb;
   parent := 12;
   lemma := "open";
   parents := (12,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {5}
WITH ID_D = 5
[
   surface :="towards";
   pos := preposition;
   parent := 13;
   lemma := "towards";
   parents := (13,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {6}
WITH ID_D = 6
[
   surface :="the";
   pos := def_article;
   parent := 14;
   lemma := "the";
   parents := (14,18,21,22,23);
   magic := 7;
]
CREATE OBJECT FROM MONADS = {7}
WITH ID_D = 7
[
   surface :="East,";
   pos := noun;
   parent := 14;
   lemma := "east";
   parents := (14,18,21,22,23);
   magic := 9;
]
CREATE OBJECT FROM MONADS = {8}
WITH ID_D = 8
[
   surface :="was";
   pos := verb;
   parent := 15;
   lemma := "be";
   parents := (15,19,20,22,23);
   magic := 6;
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 9
[
   surface :="blue.";
   pos := adjective;
   parent := 16;
   lemma := "blue";
   parents := (16,19,20,22,23);
   magic := 11;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 9                      |
+------------------------+
---- answer
++++ query creating realistic Phrase objects
CREATE OBJECTS WITH OBJECT TYPE [Phrase]
CREATE OBJECT FROM MONADS = {1-2}
WITH ID_D = 10
[
  phrase_type := NP;
  phrase_function := (Subj);
  other_monads := {9};
]
CREATE OBJECT FROM MONADS = {3-3}
WITH ID_D = 11
[
  phrase_type := NP;
  phrase_function := (Rela,Subj);
  other_monads := {8-8};
]
CREATE OBJECT FROM MONADS = {4-4}
WITH ID_D = 12
[
  phrase_type := VP;
  phrase_function := (Pred);
  other_monads := {5-7};
]
CREATE OBJECT FROM MONADS = {6-7}
WITH ID_D = 14
[
  phrase_type := NP;
  phrase_function := (NA);
  other_monads := {6-7};
]
CREATE OBJECT FROM MONADS = {5-7}
WITH ID_D = 13
[
  phrase_type := PP;
  phrase_function := (Loca);
  other_monads := {3};
]
CREATE OBJECT FROM MONADS = {8-8}
WITH ID_D = 15
[
  phrase_type := VP;
  phrase_function := (PreC);
  other_monads := {3};
]
CREATE OBJECT FROM MONADS = {9}
WITH ID_D = 16
[
  phrase_type := AP;
  phrase_function := (Attr);
  other_monads := {1-2};
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 7                      |
+------------------------+
---- answer
++++ query Creating paragraph object with empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {1-9}
WITH ID_D = 100000
[Paragraph
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
+-------------+
---- answer
++++ query Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {2-8}
WITH ID_D = 100001
[Paragraph
   other_monads := {1-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100001      |
+-------------+
---- answer
++++ query UPDATING object type Clause
UPDATE OBJECT TYPE
[Clause
   REMOVE other_monads;
   ADD surface: STRING FROM SET;
   ADD pos : pos_t;
   ADD parent : id_d;
   ADD lemma : STRING FROM SET WITH INDEX;
   ADD parents : LIST OF id_d;
   ADD other_monads2 : SET OF MONADS;
   ADD magic : integer DEFAULT 42;
]
++++ answer
---- answer
++++ query SELECT ALL OBJECTS from paragraph in 1-9 (1)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" {  } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 1-9 } ") //  <  > 
 ]
 > 
 > 
---- answer


++++ query UDPATE OBJECT paragraph
UPDATE OBJECT BY MONADS = {1-3}
[Paragraph
   other_monads := {7-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
| 100001      |
+-------------+
---- answer
++++ query SELECT ALL OBJECTS from paragraph in 1-9 (2)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" { 7-9 } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 7-9 } ") //  <  > 
 ]
 > 
 > 
---- answer


++++ query UDPATE OBJECT paragraph (3)
UPDATE OBJECTS BY ID_D = 100000,100001
[Paragraph
   other_monads := {5-7};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 100000      |
| 100001      |
+-------------+
---- answer
++++ query SELECT ALL OBJECTS from paragraph in 1-9 (2)
SELECT ALL OBJECTS
IN {1-9}
WHERE
[Paragraph
   GET other_monads
]
GO
++++ answer
 //  <  < [ paragraph 100000 { 1-9 } false (other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 < [ paragraph 100001 { 2-8 } false (other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query SELECT ALL OBJECTS from phrase in 1-6 (1)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Subj ",phrase_type="NP",other_monads=" { 9 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Rela Subj ",phrase_type="NP",other_monads=" { 8 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Pred ",phrase_type="VP",other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query Updating Phrase object type in monads {1-3}
UPDATE OBJECTS BY MONADS = {1-3}
[Phrase
  phrase_function := (Adju,Time);
  phrase_type := PP;
  other_monads := {1-3};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
| 11          |
+-------------+
---- answer
++++ query SELECT ALL OBJECTS from phrase in 1-6 (2)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Pred ",phrase_type="VP",other_monads=" { 5-7 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query Updating phrase objects by id_d
UPDATE OBJECTS BY ID_D = 10,12
[Phrase
  phrase_function := (Time,Adju);
  phrase_type := AP;
  other_monads := {3-5, 8-9};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 10          |
| 12          |
+-------------+
---- answer
++++ query Updating phrase objects by id_d (2)
UPDATE OBJECTS BY ID_D = 16
[Phrase
  phrase_type := NP;
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 16          |
+-------------+
---- answer
++++ query SELECT ALL OBJECTS from phrase in 1-6 (2)
SELECT ALL OBJECTS IN {1-6} WHERE
[Phrase
  GET phrase_function, phrase_type, other_monads
]
GO
++++ answer
 //  <  < [ phrase 10 { 1-2 } false (phrase_function=" Time Adju ",phrase_type="AP",other_monads=" { 3-5, 8-9 } ") //  <  > 
 ]
 > 
 < [ phrase 11 { 3 } false (phrase_function=" Adju Time ",phrase_type="PP",other_monads=" { 1-3 } ") //  <  > 
 ]
 > 
 < [ phrase 12 { 4 } false (phrase_function=" Time Adju ",phrase_type="AP",other_monads=" { 3-5, 8-9 } ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query selecting features from object type phrase
SELECT FEATURES FROM OBJECT TYPE [Phrase] GO
++++ answer
+-----------------------+---------------------------+------------------+-----------------+
| feature name : string | type : string             | default : string | computed : bool |
+-----------------------+---------------------------+------------------+-----------------+
| other_monads          | set of monads             | ' {  } '         | false           |
| phrase_function       | list of phrase_function_t | ''               | false           |
| phrase_type           | phrase_type_t             | 'NP'             | false           |
| self                  | id_d                      | '0'              | true            |
+-----------------------+---------------------------+------------------+-----------------+
---- answer
++++ query getting features from object type phrase
GET FEATURES self, other_monads, phrase_function, phrase_type
FROM OBJECTS WITH ID_DS = 10,11,12
[Phrase]
GO
++++ answer
+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| id_d : id_d | self : id_d | other_monads : set_of_monads | phrase_function : list_of_enum(phrase_function_t) | phrase_type : enum(phrase_type_t) |
+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| 10          | 10          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
| 11          | 11          |  { 1-3 }                     |  Adju Time                                        | PP                                |
| 12          | 12          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
+-------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
---- answer
++++ query getting the compiler to fail on part_of(phrase_function, substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(phrase_function, substrate)
   ]
]
GO
++++ answer failcompiler
Typechecking failed with compiler error
Although the feature phrase_function exists
on the object type of the object block with a monad set relation clause,
it is not of the type SET OF MONADS and therefore cannot be used in the
monad set relation clause.
---- answer
++++ query getting the compiler to fail on part_of(does_not_exist, substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(does_not_exist, substrate)
   ]
]
GO
++++ answer failcompiler
Symbolchecking failed with compiler error
The feature does_not_exist does not exist
on the object type of the object block with a monad set relation clause.
---- answer
++++ query UPDATING object type Clause
UPDATE OBJECT TYPE
[Clause
   ADD other_monads : SET OF MONADS;
]
++++ answer
---- answer
++++ query Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {1-9}
WITH ID_D = 11000000
[Clause
   other_monads := {3-7,10-12};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000000    |
+-------------+
---- answer
++++ query Creating paragraph object with non-empty other_monads, using CREATE OBJECT.
CREATE OBJECT
FROM MONADS = {5-7}
WITH ID_D = 11000001
[Clause
   other_monads := {1-4,8-12};
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000001    |
+-------------+
---- answer
++++ query select all objects with part_of(other_monads,substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate)
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query select all objects with overlap(other_monads,substrate)
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate)
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 10 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate, and get tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate)
      [Word GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 11 { 1-3 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 10 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 13 { 3 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 15 { 3 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 10 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 12 { 3-5, 8-9 } false  //  <  < [ word 3 { 3 } false (surface="which") //  <  > 
 ]
 > 
 < [ word 4 { 4 } false (surface="opened") //  <  > 
 ]
 > 
 < [ word 5 { 5 } false (surface="towards") //  <  > 
 ]
 > 
 < [ word 8 { 8 } false (surface="was") //  <  > 
 ]
 > 
 < [ word 9 { 9 } false (surface="blue.") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 < [ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 < [ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get def_article tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word pos=def_article GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP
      [Word pos=def_article GET surface]
      [Word pos=noun GET surface]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false  //  <  < [ word 1 { 1 } false (surface="The") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false  //  <  < [ word 6 { 6 } false (surface="the") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP GET monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate) phrase_type=NP GET monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with overlap of clause substrate and a feature-constraints with an index, and get two def_article/noun tokens inside
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase overlap(other_monads, substrate) phrase_type=NP GET monads, other_monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ",other_monads=" { 1-2 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query selecting phrase with part_of relation between clause and substrate and a feature-constraints with an index, and get two def_article/noun tokens inside, getting monads and other_monads
SELECT ALL OBJECTS
WHERE
[Clause
   [phrase part_of(other_monads, substrate) phrase_type=NP GET monads, other_monads
     [Word pos=def_article GET surface, monads]
     [Word pos=noun GET surface, monads]
   ]
]
GO
++++ answer
 //  <  < [ clause 11000000 { 1-9 } false  //  <  < [ phrase 16 { 1-2 } false (monads=" { 9 } ",other_monads=" { 1-2 } ") //  <  < [ word 1 { 1 } false (surface="The",monads=" { 1 } ") //  <  > 
 ]
[ word 2 { 2 } false (surface="door,",monads=" { 2 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 < [ clause 11000001 { 5-7 } false  //  <  < [ phrase 14 { 6-7 } false (monads=" { 6-7 } ",other_monads=" { 6-7 } ") //  <  < [ word 6 { 6 } false (surface="the",monads=" { 6 } ") //  <  > 
 ]
[ word 7 { 7 } false (surface="East,",monads=" { 7 } ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single monad objects 'Word' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Word GET monads]
GO
++++ answer
 // <  < [ Word 1 { 1 } false (monads=" { 1 } ") //  <  > 
 ]
[ Word 2 { 2 } false (monads=" { 2 } ") //  <  > 
 ]
[ Word 3 { 3 } false (monads=" { 3 } ") //  <  > 
 ]
[ Word 4 { 4 } false (monads=" { 4 } ") //  <  > 
 ]
[ Word 5 { 5 } false (monads=" { 5 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from single range objects 'Paragraph' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Paragraph GET monads]
GO
++++ answer
 // <  < [ Paragraph 100000 { 1-9 } false (monads=" { 1-9 } ") //  <  > 
 ]
[ Paragraph 100001 { 2-8 } false (monads=" { 2-8 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query GET OBJECTS HAVING MOANDS IN from multiple range objects 'Clause' with GET monads
GET OBJECTS HAVING MONADS IN {1-5}
[Clause GET monads]
GO
++++ answer
 // <  < [ Clause 11000000 { 1-9 } false (monads=" { 1-9 } ") //  <  > 
 ]
[ Clause 11000001 { 5-7 } false (monads=" { 5-7 } ") //  <  > 
 ]
 > 
 >
---- answer
++++ query getting features from word object with monad set retrieval 1
GET FEATURES surface, pos, monads, parent, magic
FROM OBJECTS WITH ID_DS = 2,5
[Word]
GO
++++ answer
+-------------+------------------+-------------------+------------------------+---------------+-----------------+
| id_d : id_d | surface : string | pos : enum(pos_t) | monads : set_of_monads | parent : id_d | magic : integer |
+-------------+------------------+-------------------+------------------------+---------------+-----------------+
| 2           | door,            | noun              |  { 2 }                 | 10            | 1               |
| 5           | towards          | preposition       |  { 5 }                 | 13            | 7               |
+-------------+------------------+-------------------+------------------------+---------------+-----------------+
---- answer
++++ query getting features from paragraph object with monad set retrieval 1
GET FEATURES monads, other_monads, self
FROM OBJECTS WITH ID_DS = 100001, 100000
[paragraph]
GO
++++ answer
+-------------+------------------------+------------------------------+-------------+
| id_d : id_d | monads : set_of_monads | other_monads : set_of_monads | self : id_d |
+-------------+------------------------+------------------------------+-------------+
| 100000      |  { 1-9 }               |  { 5-7 }                     | 100000      |
| 100001      |  { 2-8 }               |  { 5-7 }                     | 100001      |
+-------------+------------------------+------------------------------+-------------+
---- answer
++++ query getting features from object type phrase
GET FEATURES monads, self, other_monads, phrase_function, phrase_type
FROM OBJECTS WITH ID_DS = 10,11,12
[Phrase]
GO
++++ answer
+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| id_d : id_d | monads : set_of_monads | self : id_d | other_monads : set_of_monads | phrase_function : list_of_enum(phrase_function_t) | phrase_type : enum(phrase_type_t) |
+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
| 10          |  { 1-2 }               | 10          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
| 11          |  { 3 }                 | 11          |  { 1-3 }                     |  Adju Time                                        | PP                                |
| 12          |  { 4 }                 | 12          |  { 3-5, 8-9 }                |  Time Adju                                        | AP                                |
+-------------+------------------------+-------------+------------------------------+---------------------------------------------------+-----------------------------------+
---- answer
++++ query creating object type describer with SET OF MONADS feature
CREATE OBJECT TYPE
[Describer
    described_som : SET OF MONADS;
]
GO
++++ answer
---- answer
++++ query creating objects in object type Describer
CREATE OBJECTS WITH OBJECT TYPE [Describer]
CREATE OBJECT FROM MONADS = { 1-396 }
WITH ID_D = 240000
[	
described_som := {40201};	
]
CREATE OBJECT FROM MONADS = { 397-550 }
WITH ID_D = 240001
[	
described_som := {40201-40400};	
]
CREATE OBJECT FROM MONADS = { 551-804 }
WITH ID_D = 240002
[	
described_som := {40201-40400};	
]
CREATE OBJECT FROM MONADS = { 805-998 }
WITH ID_D = 240003
[	
described_som := {40202};	
]
CREATE OBJECT FROM MONADS = { 999-1038 }
WITH ID_D = 240004
[	
described_som := {40202-44400};	
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 5                      |
+------------------------+
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #1
SELECT ALL OBJECTS 
IN {40201} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #2
SELECT ALL OBJECTS 
IN {40202} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #3
SELECT ALL OBJECTS 
IN {40202-40203} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #4
SELECT ALL OBJECTS 
IN {40201-50000} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #5
SELECT ALL OBJECTS 
IN {40200-40450} 
RETURNING FLAT SHEAF 
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #6
SELECT ALL OBJECTS 
IN {1-40}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #7
SELECT ALL OBJECTS 
IN {1-50000000}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with overlap in topographic query #8
SELECT ALL OBJECTS 
IN {2-40200}
RETURNING FLAT SHEAF
WHERE 
[Describer overlap(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query get objects having monads in MONADS feature with explicit MONADS feature
GET OBJECTS HAVING MONADS IN
{ 2-997 }
USING MONAD FEATURE MONADS
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 1-396 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ Describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #1
GET OBJECTS HAVING MONADS IN
{ 40000-44399 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #2
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-40500 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #3
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer GET self]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #4
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer GET ALL]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false (described_som=" { 40201 } ",self="240000") //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false (described_som=" { 40201-40400 } ",self="240001") //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false (described_som=" { 40201-40400 } ",self="240002") //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false (described_som=" { 40202-44400 } ",self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query get objects having monads in MONADS feature non-MONADS feature #5
GET OBJECTS HAVING MONADS IN
 { 2-40201, 40203-50000 }
USING MONAD FEATURE described_SOM
[Describer]
GO
++++ answer
 // <  < [ Describer 240000 { 40201 } false  //  <  > 
 ]
[ Describer 240001 { 40201-40400 } false  //  <  > 
 ]
[ Describer 240002 { 40201-40400 } false  //  <  > 
 ]
[ Describer 240004 { 40202-44400 } false  //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #1
SELECT ALL OBJECTS 
IN {40202, 44000}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(described_som, substrate) GET self]
GO
++++ answer
 // <  < [ describer 240003 { 40202 } false (self="240003") //  <  > 
 ]
[ describer 240004 { 40202-44400 } false (self="240004") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #2
SELECT ALL OBJECTS 
IN {44000}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(described_som, substrate) GET self]
GO
++++ answer
 // 
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #3
SELECT ALL OBJECTS 
IN {396,397,804}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #4
SELECT ALL OBJECTS 
IN {396-800}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #5
SELECT ALL OBJECTS 
IN {396-806}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240001 { 397-550 } false (self="240001") //  <  > 
 ]
[ describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query selecting non-monads monad set with starts_in in topographic query #6
SELECT ALL OBJECTS 
IN {550-998}
RETURNING FLAT SHEAF
WHERE 
[Describer starts_in(substrate) GET self]
GO
++++ answer
 // <  < [ describer 240002 { 551-804 } false (self="240002") //  <  > 
 ]
[ describer 240003 { 805-998 } false (self="240003") //  <  > 
 ]
 > 
 >
---- answer
++++ query create object type with extremely long name...
CREATE OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  MYINTEGER : INTEGER;
  MYID_D : id_d;
  MYASCII : ASCII;
  MYSTRING : STRING;
  MYSTRINGFROMSET : STRING FROM SET;
  MYSOM : SET OF MONADS;
  MYENUM : phrase_type_t;
  MYLISTOFINTEGER : LIST OF INTEGER;
  MYLISTOFID_D : LIST OF ID_D;
  MYLISTOFENUM : LIST OF Phrase_type_t;
]
GO
++++ answer
---- answer
++++ query creating one object (1) inside the long-named object type
CREATE OBJECT
FROM MONADS = {1}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := (VP,NP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000002    |
+-------------+
---- answer
++++ query creating one object (2) inside the long-named object type
CREATE OBJECT
FROM MONADS = {2}
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
  myinteger := 101;
  myid_d := nil;
  myascii := "Blah2";
  mystring := "Blah2 blah2";
  mystringfromset := "BLAH2";
  mysom := { 1-12 };
  myenum := VP;
  mylistofinteger := (1,2,3,4000000);
  mylistofid_d := (1,2,3,3000000);
  mylistofenum := (NP,VP);
]
GO
++++ answer
+-------------+
| id_d : id_d |
+-------------+
| 11000003    |
+-------------+
---- answer
++++ query creating more than one object inside the long-named object type
CREATE OBJECTS WITH OBJECT TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
CREATE OBJECT
FROM MONADS = {3}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 1-10 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := (1,2,3);
  mylistofenum := ();
]
CREATE OBJECT
FROM MONADS = {4}
[
  myinteger := 100;
  myid_d := nil;
  myascii := "Blah";
  mystring := "Blah blah";
  mystringfromset := "BLAH";
  mysom := { 4 };
  myenum := NP;
  mylistofinteger := (1,2,3);
  mylistofid_d := ();
  mylistofenum := (VP);
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 2                      |
+------------------------+
---- answer
++++ query UPDATE OBJECT TYPE on very long Object Type Name (1)
UPDATE TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
	ADD willbeadded : integer;
]
++++ answer 
---- answer
++++ query UPDATE OBJECT TYPE on very long Object Type Name (2)
UPDATE TYPE [otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
	ADD willbeadded2 : integer;
        REMOVE willbeadded;
]
++++ answer 
---- answer
++++ query GET OBJECTS HAVING MONADS IN on very long object type name
GET OBJECTS
HAVING MONADS IN {1-100000 }
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
GET all]
++++ answer 
 // <  < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000002 { 1 } false (mylistofenum=" VP NP ",mylistofid_d=" 1 2 3 ",mylistofinteger=" 1 2 3 ",myenum="NP",mysom=" { 1-10 } ",mystringfromset="BLAH",mystring="Blah blah",myascii="Blah",myid_d="0",myinteger="100",self="11000002",willbeadded2="0") //  <  > 
 ]
[ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000003 { 2 } false (mylistofenum=" NP VP ",mylistofid_d=" 1 2 3 3000000 ",mylistofinteger=" 1 2 3 4000000 ",myenum="VP",mysom=" { 1-12 } ",mystringfromset="BLAH2",mystring="Blah2 blah2",myascii="Blah2",myid_d="0",myinteger="101",self="11000003",willbeadded2="0") //  <  > 
 ]
[ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000004 { 3 } false (mylistofenum="",mylistofid_d=" 1 2 3 ",mylistofinteger=" 1 2 3 ",myenum="NP",mysom=" { 1-10 } ",mystringfromset="BLAH",mystring="Blah blah",myascii="Blah",myid_d="0",myinteger="100",self="11000004",willbeadded2="0") //  <  > 
 ]
[ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000005 { 4 } false (mylistofenum=" VP ",mylistofid_d="",mylistofinteger=" 1 2 3 ",myenum="NP",mysom=" { 4 } ",mystringfromset="BLAH",mystring="Blah blah",myascii="Blah",myid_d="0",myinteger="100",self="11000005",willbeadded2="0") //  <  > 
 ]
 > 
 >
---- answer
++++ query SELECT ALL OBJECTS on very long object type name
SELECT ALL OBJECTS
IN {1-100000 }
WHERE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah
GET
 myinteger,
 myid_d,
 myascii,
 mystring,
 mystringfromset,
 mysom,
 myenum,
 mylistofinteger,
 mylistofid_d,
 mylistofenum
 ]
++++ answer 
 //  <  < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000002 { 1 } false (myinteger="100",myid_d="0",myascii="Blah",mystring="Blah blah",mystringfromset="BLAH",mysom=" { 1-10 } ",myenum="NP",mylistofinteger=" 1 2 3 ",mylistofid_d=" 1 2 3 ",mylistofenum=" VP NP ") //  <  > 
 ]
 > 
 < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000003 { 2 } false (myinteger="101",myid_d="0",myascii="Blah2",mystring="Blah2 blah2",mystringfromset="BLAH2",mysom=" { 1-12 } ",myenum="VP",mylistofinteger=" 1 2 3 4000000 ",mylistofid_d=" 1 2 3 3000000 ",mylistofenum=" NP VP ") //  <  > 
 ]
 > 
 < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000004 { 3 } false (myinteger="100",myid_d="0",myascii="Blah",mystring="Blah blah",mystringfromset="BLAH",mysom=" { 1-10 } ",myenum="NP",mylistofinteger=" 1 2 3 ",mylistofid_d=" 1 2 3 ",mylistofenum="") //  <  > 
 ]
 > 
 < [ otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah 11000005 { 4 } false (myinteger="100",myid_d="0",myascii="Blah",mystring="Blah blah",mystringfromset="BLAH",mysom=" { 4 } ",myenum="NP",mylistofinteger=" 1 2 3 ",mylistofid_d="",mylistofenum=" VP ") //  <  > 
 ]
 > 
 > 
---- answer
++++ query SELECT FEATURES FROM an object type with a very long name
SELECT FEATURES
FROM OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
GO
++++ answer
+-----------------------+-----------------------+------------------+-----------------+
| feature name : string | type : string         | default : string | computed : bool |
+-----------------------+-----------------------+------------------+-----------------+
| mylistofenum          | list of phrase_type_t | ''               | false           |
| mylistofid_d          | list of id_d          | ''               | false           |
| mylistofinteger       | list of integer       | ''               | false           |
| myenum                | phrase_type_t         | 'NP'             | false           |
| mysom                 | set of monads         | ' {  } '         | false           |
| mystringfromset       | string                | ''               | false           |
| mystring              | string                | ''               | false           |
| myascii               | ascii                 | ''               | false           |
| myid_d                | id_d                  | '0'              | false           |
| myinteger             | integer               | '0'              | false           |
| self                  | id_d                  | '0'              | true            |
| willbeadded2          | integer               | '0'              | false           |
+-----------------------+-----------------------+------------------+-----------------+
---- answer
++++ query DROP OBJECT TYPE on very long-named object type
DROP OBJECT TYPE
[otn_3fc9d95dd5a854b05a28ab398468d0128d646062c2262cd2933c5b7fd31fe45e_c2d3738c477fc43fc372a94dad2c08d1904127383d9fcf5518ca774ad21ada2a_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_3c1ec19080a981e00f915798113abcf454fa05b0911ac5d9aa5cc7442c079f74_blah_blah]
GO
++++ answer
---- answer
 
++++ query newdb Creating DB from ASV Genesis chapter 1:1-10
//////////////////////////////////////////////////// 
// 
// Create object types
// 
//////////////////////////////////////////////////// 
// Enumeration divtype_e
CREATE ENUMERATION divtype_e = {
  book = 2,
  DEFAULT bookGroup = 1,
  chapter = 3
}
GO


// Object type verse
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[verse
  chapter : integer DEFAULT 0;
  verse : integer DEFAULT 0;
  xmlindex : integer DEFAULT 0;
  osisid : string DEFAULT "";
  osisbook : string FROM SET  DEFAULT "";
]
GO

// Object type token
CREATE OBJECT TYPE
WITH SINGLE MONAD OBJECTS
HAVING UNIQUE FIRST MONADS
[token
  xmlindex : integer DEFAULT 0;
  surface_stripped_lowcase : string DEFAULT "";
  wholesurface : string DEFAULT "";
]
GO

// Object type paragraph
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
HAVING UNIQUE FIRST MONADS
[paragraph
  xmlindex : integer DEFAULT 0;
]
GO

// Object type title
CREATE OBJECT TYPE
WITH SINGLE RANGE OBJECTS
[title
  xmlindex : integer DEFAULT 0;
  divtype : divtype_e DEFAULT bookGroup;
]
GO
++++ answer
---- answer
++++ query CREATING ASV Verse objects
CREATE OBJECTS
WITH OBJECT TYPE[verse]
CREATE OBJECT
FROM MONADS= { 8-17 } 
WITH ID_D=23 [
chapter:=1;
verse:=1;
xmlindex:=13;
osisid:=" Gen.1.1 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 18-45 } 
WITH ID_D=24 [
chapter:=1;
verse:=2;
xmlindex:=24;
osisid:=" Gen.1.2 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 46-56 } 
WITH ID_D=25 [
chapter:=1;
verse:=3;
xmlindex:=53;
osisid:=" Gen.1.3 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 57-73 } 
WITH ID_D=26 [
chapter:=1;
verse:=4;
xmlindex:=65;
osisid:=" Gen.1.4 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 74-95 } 
WITH ID_D=27 [
chapter:=1;
verse:=5;
xmlindex:=83;
osisid:=" Gen.1.5 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 96-118 } 
WITH ID_D=28 [
chapter:=1;
verse:=6;
xmlindex:=107;
osisid:=" Gen.1.6 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 119-144 } 
WITH ID_D=29 [
chapter:=1;
verse:=7;
xmlindex:=131;
osisid:=" Gen.1.7 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 145-161 } 
WITH ID_D=30 [
chapter:=1;
verse:=8;
xmlindex:=158;
osisid:=" Gen.1.8 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 162-186 } 
WITH ID_D=31 [
chapter:=1;
verse:=9;
xmlindex:=177;
osisid:=" Gen.1.9 ";
osisbook:="Gen";
]
CREATE OBJECT
FROM MONADS= { 187-210 } 
WITH ID_D=32 [
chapter:=1;
verse:=10;
xmlindex:=203;
osisid:=" Gen.1.10 ";
osisbook:="Gen";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 10                     |
+------------------------+
---- answer
++++ query CREATING ASV Token objects
CREATE OBJECTS
WITH OBJECT TYPE[token]
CREATE OBJECT
FROM MONADS= { 1 } 
WITH ID_D=103 [
xmlindex:=3;
surface_stripped_lowcase:="the";
wholesurface:="The ";
]
CREATE OBJECT
FROM MONADS= { 2 } 
WITH ID_D=104 [
xmlindex:=4;
surface_stripped_lowcase:="first";
wholesurface:="First ";
]
CREATE OBJECT
FROM MONADS= { 3 } 
WITH ID_D=105 [
xmlindex:=5;
surface_stripped_lowcase:="book";
wholesurface:="Book ";
]
CREATE OBJECT
FROM MONADS= { 4 } 
WITH ID_D=106 [
xmlindex:=6;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 5 } 
WITH ID_D=107 [
xmlindex:=7;
surface_stripped_lowcase:="moses";
wholesurface:="Moses, ";
]
CREATE OBJECT
FROM MONADS= { 6 } 
WITH ID_D=108 [
xmlindex:=8;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 7 } 
WITH ID_D=109 [
xmlindex:=9;
surface_stripped_lowcase:="genesis";
wholesurface:="Genesis ";
]
CREATE OBJECT
FROM MONADS= { 8 } 
WITH ID_D=110 [
xmlindex:=14;
surface_stripped_lowcase:="in";
wholesurface:="In ";
]
CREATE OBJECT
FROM MONADS= { 9 } 
WITH ID_D=111 [
xmlindex:=15;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 10 } 
WITH ID_D=112 [
xmlindex:=16;
surface_stripped_lowcase:="beginning";
wholesurface:="beginning ";
]
CREATE OBJECT
FROM MONADS= { 11 } 
WITH ID_D=113 [
xmlindex:=17;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 12 } 
WITH ID_D=114 [
xmlindex:=18;
surface_stripped_lowcase:="created";
wholesurface:="created ";
]
CREATE OBJECT
FROM MONADS= { 13 } 
WITH ID_D=115 [
xmlindex:=19;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 14 } 
WITH ID_D=116 [
xmlindex:=20;
surface_stripped_lowcase:="heavens";
wholesurface:="heavens ";
]
CREATE OBJECT
FROM MONADS= { 15 } 
WITH ID_D=117 [
xmlindex:=21;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 16 } 
WITH ID_D=118 [
xmlindex:=22;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 17 } 
WITH ID_D=119 [
xmlindex:=23;
surface_stripped_lowcase:="earth";
wholesurface:="earth. ";
]
CREATE OBJECT
FROM MONADS= { 18 } 
WITH ID_D=120 [
xmlindex:=25;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 19 } 
WITH ID_D=121 [
xmlindex:=26;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 20 } 
WITH ID_D=122 [
xmlindex:=27;
surface_stripped_lowcase:="earth";
wholesurface:="earth ";
]
CREATE OBJECT
FROM MONADS= { 21 } 
WITH ID_D=123 [
xmlindex:=28;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 22 } 
WITH ID_D=124 [
xmlindex:=29;
surface_stripped_lowcase:="waste";
wholesurface:="waste ";
]
CREATE OBJECT
FROM MONADS= { 23 } 
WITH ID_D=125 [
xmlindex:=30;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 24 } 
WITH ID_D=126 [
xmlindex:=31;
surface_stripped_lowcase:="void";
wholesurface:="void; ";
]
CREATE OBJECT
FROM MONADS= { 25 } 
WITH ID_D=127 [
xmlindex:=32;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 26 } 
WITH ID_D=128 [
xmlindex:=33;
surface_stripped_lowcase:="darkness";
wholesurface:="darkness ";
]
CREATE OBJECT
FROM MONADS= { 27 } 
WITH ID_D=129 [
xmlindex:=34;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 28 } 
WITH ID_D=130 [
xmlindex:=35;
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
]
CREATE OBJECT
FROM MONADS= { 29 } 
WITH ID_D=131 [
xmlindex:=36;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 30 } 
WITH ID_D=132 [
xmlindex:=37;
surface_stripped_lowcase:="face";
wholesurface:="face ";
]
CREATE OBJECT
FROM MONADS= { 31 } 
WITH ID_D=133 [
xmlindex:=38;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 32 } 
WITH ID_D=134 [
xmlindex:=39;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 33 } 
WITH ID_D=135 [
xmlindex:=40;
surface_stripped_lowcase:="deep";
wholesurface:="deep: ";
]
CREATE OBJECT
FROM MONADS= { 34 } 
WITH ID_D=136 [
xmlindex:=41;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 35 } 
WITH ID_D=137 [
xmlindex:=42;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 36 } 
WITH ID_D=138 [
xmlindex:=43;
surface_stripped_lowcase:="spirit";
wholesurface:="Spirit ";
]
CREATE OBJECT
FROM MONADS= { 37 } 
WITH ID_D=139 [
xmlindex:=44;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 38 } 
WITH ID_D=140 [
xmlindex:=45;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 39 } 
WITH ID_D=141 [
xmlindex:=46;
surface_stripped_lowcase:="moved";
wholesurface:="moved ";
]
CREATE OBJECT
FROM MONADS= { 40 } 
WITH ID_D=142 [
xmlindex:=47;
surface_stripped_lowcase:="upon";
wholesurface:="upon ";
]
CREATE OBJECT
FROM MONADS= { 41 } 
WITH ID_D=143 [
xmlindex:=48;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 42 } 
WITH ID_D=144 [
xmlindex:=49;
surface_stripped_lowcase:="face";
wholesurface:="face ";
]
CREATE OBJECT
FROM MONADS= { 43 } 
WITH ID_D=145 [
xmlindex:=50;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 44 } 
WITH ID_D=146 [
xmlindex:=51;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 45 } 
WITH ID_D=147 [
xmlindex:=52;
surface_stripped_lowcase:="waters";
wholesurface:="waters. ";
]
CREATE OBJECT
FROM MONADS= { 46 } 
WITH ID_D=148 [
xmlindex:=54;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 47 } 
WITH ID_D=149 [
xmlindex:=55;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 48 } 
WITH ID_D=150 [
xmlindex:=56;
surface_stripped_lowcase:="said";
wholesurface:="said, ";
]
CREATE OBJECT
FROM MONADS= { 49 } 
WITH ID_D=151 [
xmlindex:=57;
surface_stripped_lowcase:="let";
wholesurface:="Let ";
]
CREATE OBJECT
FROM MONADS= { 50 } 
WITH ID_D=152 [
xmlindex:=58;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 51 } 
WITH ID_D=153 [
xmlindex:=59;
surface_stripped_lowcase:="be";
wholesurface:="be ";
]
CREATE OBJECT
FROM MONADS= { 52 } 
WITH ID_D=154 [
xmlindex:=60;
surface_stripped_lowcase:="light";
wholesurface:="light: ";
]
CREATE OBJECT
FROM MONADS= { 53 } 
WITH ID_D=155 [
xmlindex:=61;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 54 } 
WITH ID_D=156 [
xmlindex:=62;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 55 } 
WITH ID_D=157 [
xmlindex:=63;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 56 } 
WITH ID_D=158 [
xmlindex:=64;
surface_stripped_lowcase:="light";
wholesurface:="light. ";
]
CREATE OBJECT
FROM MONADS= { 57 } 
WITH ID_D=159 [
xmlindex:=66;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 58 } 
WITH ID_D=160 [
xmlindex:=67;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 59 } 
WITH ID_D=161 [
xmlindex:=68;
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
]
CREATE OBJECT
FROM MONADS= { 60 } 
WITH ID_D=162 [
xmlindex:=69;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 61 } 
WITH ID_D=163 [
xmlindex:=70;
surface_stripped_lowcase:="light";
wholesurface:="light, ";
]
CREATE OBJECT
FROM MONADS= { 62 } 
WITH ID_D=164 [
xmlindex:=71;
surface_stripped_lowcase:="that";
wholesurface:="that ";
]
CREATE OBJECT
FROM MONADS= { 63 } 
WITH ID_D=165 [
xmlindex:=72;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 64 } 
WITH ID_D=166 [
xmlindex:=73;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 65 } 
WITH ID_D=167 [
xmlindex:=74;
surface_stripped_lowcase:="good";
wholesurface:="good: ";
]
CREATE OBJECT
FROM MONADS= { 66 } 
WITH ID_D=168 [
xmlindex:=75;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 67 } 
WITH ID_D=169 [
xmlindex:=76;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 68 } 
WITH ID_D=170 [
xmlindex:=77;
surface_stripped_lowcase:="divided";
wholesurface:="divided ";
]
CREATE OBJECT
FROM MONADS= { 69 } 
WITH ID_D=171 [
xmlindex:=78;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 70 } 
WITH ID_D=172 [
xmlindex:=79;
surface_stripped_lowcase:="light";
wholesurface:="light ";
]
CREATE OBJECT
FROM MONADS= { 71 } 
WITH ID_D=173 [
xmlindex:=80;
surface_stripped_lowcase:="from";
wholesurface:="from ";
]
CREATE OBJECT
FROM MONADS= { 72 } 
WITH ID_D=174 [
xmlindex:=81;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 73 } 
WITH ID_D=175 [
xmlindex:=82;
surface_stripped_lowcase:="darkness";
wholesurface:="darkness. ";
]
CREATE OBJECT
FROM MONADS= { 74 } 
WITH ID_D=176 [
xmlindex:=84;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 75 } 
WITH ID_D=177 [
xmlindex:=85;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 76 } 
WITH ID_D=178 [
xmlindex:=86;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 77 } 
WITH ID_D=179 [
xmlindex:=87;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 78 } 
WITH ID_D=180 [
xmlindex:=88;
surface_stripped_lowcase:="light";
wholesurface:="light ";
]
CREATE OBJECT
FROM MONADS= { 79 } 
WITH ID_D=181 [
xmlindex:=89;
surface_stripped_lowcase:="day";
wholesurface:="Day, ";
]
CREATE OBJECT
FROM MONADS= { 80 } 
WITH ID_D=182 [
xmlindex:=90;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 81 } 
WITH ID_D=183 [
xmlindex:=91;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 82 } 
WITH ID_D=184 [
xmlindex:=92;
surface_stripped_lowcase:="darkness";
wholesurface:="darkness ";
]
CREATE OBJECT
FROM MONADS= { 83 } 
WITH ID_D=185 [
xmlindex:=93;
surface_stripped_lowcase:="he";
wholesurface:="he ";
]
CREATE OBJECT
FROM MONADS= { 84 } 
WITH ID_D=186 [
xmlindex:=94;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 85 } 
WITH ID_D=187 [
xmlindex:=95;
surface_stripped_lowcase:="night";
wholesurface:="Night. ";
]
CREATE OBJECT
FROM MONADS= { 86 } 
WITH ID_D=188 [
xmlindex:=96;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 87 } 
WITH ID_D=189 [
xmlindex:=97;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 88 } 
WITH ID_D=190 [
xmlindex:=98;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 89 } 
WITH ID_D=191 [
xmlindex:=99;
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
]
CREATE OBJECT
FROM MONADS= { 90 } 
WITH ID_D=192 [
xmlindex:=100;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 91 } 
WITH ID_D=193 [
xmlindex:=101;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 92 } 
WITH ID_D=194 [
xmlindex:=102;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 93 } 
WITH ID_D=195 [
xmlindex:=103;
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
]
CREATE OBJECT
FROM MONADS= { 94 } 
WITH ID_D=196 [
xmlindex:=104;
surface_stripped_lowcase:="one";
wholesurface:="one ";
]
CREATE OBJECT
FROM MONADS= { 95 } 
WITH ID_D=197 [
xmlindex:=105;
surface_stripped_lowcase:="day";
wholesurface:="day. ";
]
CREATE OBJECT
FROM MONADS= { 96 } 
WITH ID_D=198 [
xmlindex:=108;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 97 } 
WITH ID_D=199 [
xmlindex:=109;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 98 } 
WITH ID_D=200 [
xmlindex:=110;
surface_stripped_lowcase:="said";
wholesurface:="said, ";
]
CREATE OBJECT
FROM MONADS= { 99 } 
WITH ID_D=201 [
xmlindex:=111;
surface_stripped_lowcase:="let";
wholesurface:="Let ";
]
CREATE OBJECT
FROM MONADS= { 100 } 
WITH ID_D=202 [
xmlindex:=112;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 101 } 
WITH ID_D=203 [
xmlindex:=113;
surface_stripped_lowcase:="be";
wholesurface:="be ";
]
CREATE OBJECT
FROM MONADS= { 102 } 
WITH ID_D=204 [
xmlindex:=114;
surface_stripped_lowcase:="a";
wholesurface:="a ";
]
CREATE OBJECT
FROM MONADS= { 103 } 
WITH ID_D=205 [
xmlindex:=115;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
]
CREATE OBJECT
FROM MONADS= { 104 } 
WITH ID_D=206 [
xmlindex:=116;
surface_stripped_lowcase:="in";
wholesurface:="in ";
]
CREATE OBJECT
FROM MONADS= { 105 } 
WITH ID_D=207 [
xmlindex:=117;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 106 } 
WITH ID_D=208 [
xmlindex:=118;
surface_stripped_lowcase:="midst";
wholesurface:="midst ";
]
CREATE OBJECT
FROM MONADS= { 107 } 
WITH ID_D=209 [
xmlindex:=119;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 108 } 
WITH ID_D=210 [
xmlindex:=120;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 109 } 
WITH ID_D=211 [
xmlindex:=121;
surface_stripped_lowcase:="waters";
wholesurface:="waters, ";
]
CREATE OBJECT
FROM MONADS= { 110 } 
WITH ID_D=212 [
xmlindex:=122;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 111 } 
WITH ID_D=213 [
xmlindex:=123;
surface_stripped_lowcase:="let";
wholesurface:="let ";
]
CREATE OBJECT
FROM MONADS= { 112 } 
WITH ID_D=214 [
xmlindex:=124;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 113 } 
WITH ID_D=215 [
xmlindex:=125;
surface_stripped_lowcase:="divide";
wholesurface:="divide ";
]
CREATE OBJECT
FROM MONADS= { 114 } 
WITH ID_D=216 [
xmlindex:=126;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 115 } 
WITH ID_D=217 [
xmlindex:=127;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 116 } 
WITH ID_D=218 [
xmlindex:=128;
surface_stripped_lowcase:="from";
wholesurface:="from ";
]
CREATE OBJECT
FROM MONADS= { 117 } 
WITH ID_D=219 [
xmlindex:=129;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 118 } 
WITH ID_D=220 [
xmlindex:=130;
surface_stripped_lowcase:="waters";
wholesurface:="waters. ";
]
CREATE OBJECT
FROM MONADS= { 119 } 
WITH ID_D=221 [
xmlindex:=132;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 120 } 
WITH ID_D=222 [
xmlindex:=133;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 121 } 
WITH ID_D=223 [
xmlindex:=134;
surface_stripped_lowcase:="made";
wholesurface:="made ";
]
CREATE OBJECT
FROM MONADS= { 122 } 
WITH ID_D=224 [
xmlindex:=135;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 123 } 
WITH ID_D=225 [
xmlindex:=136;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament, ";
]
CREATE OBJECT
FROM MONADS= { 124 } 
WITH ID_D=226 [
xmlindex:=137;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 125 } 
WITH ID_D=227 [
xmlindex:=138;
surface_stripped_lowcase:="divided";
wholesurface:="divided ";
]
CREATE OBJECT
FROM MONADS= { 126 } 
WITH ID_D=228 [
xmlindex:=139;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 127 } 
WITH ID_D=229 [
xmlindex:=140;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 128 } 
WITH ID_D=230 [
xmlindex:=141;
surface_stripped_lowcase:="which";
wholesurface:="which ";
]
CREATE OBJECT
FROM MONADS= { 129 } 
WITH ID_D=231 [
xmlindex:=142;
surface_stripped_lowcase:="were";
wholesurface:="were ";
]
CREATE OBJECT
FROM MONADS= { 130 } 
WITH ID_D=232 [
xmlindex:=143;
surface_stripped_lowcase:="under";
wholesurface:="under ";
]
CREATE OBJECT
FROM MONADS= { 131 } 
WITH ID_D=233 [
xmlindex:=144;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 132 } 
WITH ID_D=234 [
xmlindex:=145;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
]
CREATE OBJECT
FROM MONADS= { 133 } 
WITH ID_D=235 [
xmlindex:=146;
surface_stripped_lowcase:="from";
wholesurface:="from ";
]
CREATE OBJECT
FROM MONADS= { 134 } 
WITH ID_D=236 [
xmlindex:=147;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 135 } 
WITH ID_D=237 [
xmlindex:=148;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 136 } 
WITH ID_D=238 [
xmlindex:=149;
surface_stripped_lowcase:="which";
wholesurface:="which ";
]
CREATE OBJECT
FROM MONADS= { 137 } 
WITH ID_D=239 [
xmlindex:=150;
surface_stripped_lowcase:="were";
wholesurface:="were ";
]
CREATE OBJECT
FROM MONADS= { 138 } 
WITH ID_D=240 [
xmlindex:=151;
surface_stripped_lowcase:="above";
wholesurface:="above ";
]
CREATE OBJECT
FROM MONADS= { 139 } 
WITH ID_D=241 [
xmlindex:=152;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 140 } 
WITH ID_D=242 [
xmlindex:=153;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament: ";
]
CREATE OBJECT
FROM MONADS= { 141 } 
WITH ID_D=243 [
xmlindex:=154;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 142 } 
WITH ID_D=244 [
xmlindex:=155;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 143 } 
WITH ID_D=245 [
xmlindex:=156;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 144 } 
WITH ID_D=246 [
xmlindex:=157;
surface_stripped_lowcase:="so";
wholesurface:="so. ";
]
CREATE OBJECT
FROM MONADS= { 145 } 
WITH ID_D=247 [
xmlindex:=159;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 146 } 
WITH ID_D=248 [
xmlindex:=160;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 147 } 
WITH ID_D=249 [
xmlindex:=161;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 148 } 
WITH ID_D=250 [
xmlindex:=162;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 149 } 
WITH ID_D=251 [
xmlindex:=163;
surface_stripped_lowcase:="firmament";
wholesurface:="firmament ";
]
CREATE OBJECT
FROM MONADS= { 150 } 
WITH ID_D=252 [
xmlindex:=164;
surface_stripped_lowcase:="heaven";
wholesurface:="Heaven. ";
]
CREATE OBJECT
FROM MONADS= { 151 } 
WITH ID_D=253 [
xmlindex:=165;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 152 } 
WITH ID_D=254 [
xmlindex:=166;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 153 } 
WITH ID_D=255 [
xmlindex:=167;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 154 } 
WITH ID_D=256 [
xmlindex:=168;
surface_stripped_lowcase:="evening";
wholesurface:="evening ";
]
CREATE OBJECT
FROM MONADS= { 155 } 
WITH ID_D=257 [
xmlindex:=169;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 156 } 
WITH ID_D=258 [
xmlindex:=170;
surface_stripped_lowcase:="there";
wholesurface:="there ";
]
CREATE OBJECT
FROM MONADS= { 157 } 
WITH ID_D=259 [
xmlindex:=171;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 158 } 
WITH ID_D=260 [
xmlindex:=172;
surface_stripped_lowcase:="morning";
wholesurface:="morning, ";
]
CREATE OBJECT
FROM MONADS= { 159 } 
WITH ID_D=261 [
xmlindex:=173;
surface_stripped_lowcase:="a";
wholesurface:="a ";
]
CREATE OBJECT
FROM MONADS= { 160 } 
WITH ID_D=262 [
xmlindex:=174;
surface_stripped_lowcase:="second";
wholesurface:="second ";
]
CREATE OBJECT
FROM MONADS= { 161 } 
WITH ID_D=263 [
xmlindex:=175;
surface_stripped_lowcase:="day";
wholesurface:="day. ";
]
CREATE OBJECT
FROM MONADS= { 162 } 
WITH ID_D=264 [
xmlindex:=178;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 163 } 
WITH ID_D=265 [
xmlindex:=179;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 164 } 
WITH ID_D=266 [
xmlindex:=180;
surface_stripped_lowcase:="said";
wholesurface:="said, ";
]
CREATE OBJECT
FROM MONADS= { 165 } 
WITH ID_D=267 [
xmlindex:=181;
surface_stripped_lowcase:="let";
wholesurface:="Let ";
]
CREATE OBJECT
FROM MONADS= { 166 } 
WITH ID_D=268 [
xmlindex:=182;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 167 } 
WITH ID_D=269 [
xmlindex:=183;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 168 } 
WITH ID_D=270 [
xmlindex:=184;
surface_stripped_lowcase:="under";
wholesurface:="under ";
]
CREATE OBJECT
FROM MONADS= { 169 } 
WITH ID_D=271 [
xmlindex:=185;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 170 } 
WITH ID_D=272 [
xmlindex:=186;
surface_stripped_lowcase:="heavens";
wholesurface:="heavens ";
]
CREATE OBJECT
FROM MONADS= { 171 } 
WITH ID_D=273 [
xmlindex:=187;
surface_stripped_lowcase:="be";
wholesurface:="be ";
]
CREATE OBJECT
FROM MONADS= { 172 } 
WITH ID_D=274 [
xmlindex:=188;
surface_stripped_lowcase:="gathered";
wholesurface:="gathered ";
]
CREATE OBJECT
FROM MONADS= { 173 } 
WITH ID_D=275 [
xmlindex:=189;
surface_stripped_lowcase:="together";
wholesurface:="together ";
]
CREATE OBJECT
FROM MONADS= { 174 } 
WITH ID_D=276 [
xmlindex:=190;
surface_stripped_lowcase:="unto";
wholesurface:="unto ";
]
CREATE OBJECT
FROM MONADS= { 175 } 
WITH ID_D=277 [
xmlindex:=191;
surface_stripped_lowcase:="one";
wholesurface:="one ";
]
CREATE OBJECT
FROM MONADS= { 176 } 
WITH ID_D=278 [
xmlindex:=192;
surface_stripped_lowcase:="place";
wholesurface:="place, ";
]
CREATE OBJECT
FROM MONADS= { 177 } 
WITH ID_D=279 [
xmlindex:=193;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 178 } 
WITH ID_D=280 [
xmlindex:=194;
surface_stripped_lowcase:="let";
wholesurface:="let ";
]
CREATE OBJECT
FROM MONADS= { 179 } 
WITH ID_D=281 [
xmlindex:=195;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 180 } 
WITH ID_D=282 [
xmlindex:=196;
surface_stripped_lowcase:="dry";
wholesurface:="dry ";
]
CREATE OBJECT
FROM MONADS= { 181 } 
WITH ID_D=283 [
xmlindex:=197;
surface_stripped_lowcase:="land";
wholesurface:="land ";
]
CREATE OBJECT
FROM MONADS= { 182 } 
WITH ID_D=284 [
xmlindex:=198;
surface_stripped_lowcase:="appear";
wholesurface:="appear: ";
]
CREATE OBJECT
FROM MONADS= { 183 } 
WITH ID_D=285 [
xmlindex:=199;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 184 } 
WITH ID_D=286 [
xmlindex:=200;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 185 } 
WITH ID_D=287 [
xmlindex:=201;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 186 } 
WITH ID_D=288 [
xmlindex:=202;
surface_stripped_lowcase:="so";
wholesurface:="so. ";
]
CREATE OBJECT
FROM MONADS= { 187 } 
WITH ID_D=289 [
xmlindex:=204;
surface_stripped_lowcase:="and";
wholesurface:="And ";
]
CREATE OBJECT
FROM MONADS= { 188 } 
WITH ID_D=290 [
xmlindex:=205;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 189 } 
WITH ID_D=291 [
xmlindex:=206;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 190 } 
WITH ID_D=292 [
xmlindex:=207;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 191 } 
WITH ID_D=293 [
xmlindex:=208;
surface_stripped_lowcase:="dry";
wholesurface:="dry ";
]
CREATE OBJECT
FROM MONADS= { 192 } 
WITH ID_D=294 [
xmlindex:=209;
surface_stripped_lowcase:="land";
wholesurface:="land ";
]
CREATE OBJECT
FROM MONADS= { 193 } 
WITH ID_D=295 [
xmlindex:=210;
surface_stripped_lowcase:="earth";
wholesurface:="Earth; ";
]
CREATE OBJECT
FROM MONADS= { 194 } 
WITH ID_D=296 [
xmlindex:=211;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 195 } 
WITH ID_D=297 [
xmlindex:=212;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 196 } 
WITH ID_D=298 [
xmlindex:=213;
surface_stripped_lowcase:="gathering";
wholesurface:="gathering ";
]
CREATE OBJECT
FROM MONADS= { 197 } 
WITH ID_D=299 [
xmlindex:=214;
surface_stripped_lowcase:="together";
wholesurface:="together ";
]
CREATE OBJECT
FROM MONADS= { 198 } 
WITH ID_D=300 [
xmlindex:=215;
surface_stripped_lowcase:="of";
wholesurface:="of ";
]
CREATE OBJECT
FROM MONADS= { 199 } 
WITH ID_D=301 [
xmlindex:=216;
surface_stripped_lowcase:="the";
wholesurface:="the ";
]
CREATE OBJECT
FROM MONADS= { 200 } 
WITH ID_D=302 [
xmlindex:=217;
surface_stripped_lowcase:="waters";
wholesurface:="waters ";
]
CREATE OBJECT
FROM MONADS= { 201 } 
WITH ID_D=303 [
xmlindex:=218;
surface_stripped_lowcase:="called";
wholesurface:="called ";
]
CREATE OBJECT
FROM MONADS= { 202 } 
WITH ID_D=304 [
xmlindex:=219;
surface_stripped_lowcase:="he";
wholesurface:="he ";
]
CREATE OBJECT
FROM MONADS= { 203 } 
WITH ID_D=305 [
xmlindex:=220;
surface_stripped_lowcase:="seas";
wholesurface:="Seas: ";
]
CREATE OBJECT
FROM MONADS= { 204 } 
WITH ID_D=306 [
xmlindex:=221;
surface_stripped_lowcase:="and";
wholesurface:="and ";
]
CREATE OBJECT
FROM MONADS= { 205 } 
WITH ID_D=307 [
xmlindex:=222;
surface_stripped_lowcase:="god";
wholesurface:="God ";
]
CREATE OBJECT
FROM MONADS= { 206 } 
WITH ID_D=308 [
xmlindex:=223;
surface_stripped_lowcase:="saw";
wholesurface:="saw ";
]
CREATE OBJECT
FROM MONADS= { 207 } 
WITH ID_D=309 [
xmlindex:=224;
surface_stripped_lowcase:="that";
wholesurface:="that ";
]
CREATE OBJECT
FROM MONADS= { 208 } 
WITH ID_D=310 [
xmlindex:=225;
surface_stripped_lowcase:="it";
wholesurface:="it ";
]
CREATE OBJECT
FROM MONADS= { 209 } 
WITH ID_D=311 [
xmlindex:=226;
surface_stripped_lowcase:="was";
wholesurface:="was ";
]
CREATE OBJECT
FROM MONADS= { 210 } 
WITH ID_D=312 [
xmlindex:=227;
surface_stripped_lowcase:="good";
wholesurface:="good. ";
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 210                    |
+------------------------+
---- answer
++++ query CREATING ASV Paragraph objects
CREATE OBJECTS
WITH OBJECT TYPE[paragraph]
CREATE OBJECT
FROM MONADS= { 8-95 } 
WITH ID_D=7 [
xmlindex:=12;
]
CREATE OBJECT
FROM MONADS= { 96-161 } 
WITH ID_D=8 [
xmlindex:=106;
]
CREATE OBJECT
FROM MONADS= { 162-283 } 
WITH ID_D=9 [
xmlindex:=176;
]
GO

++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 3                      |
+------------------------+
---- answer
++++ query CREATING ASV Title objects
CREATE OBJECTS
WITH OBJECT TYPE[title]
CREATE OBJECT
FROM MONADS= { 1-7 } 
WITH ID_D=19 [
xmlindex:=2;
divtype:=book;
]
GO
++++ answer
+------------------------+
| object_count : integer |
+------------------------+
| 1                      |
+------------------------+
---- answer

++++ query GET AGGREGATE FEATURES (1)
GET AGGREGATE FEATURES
COUNT(*)
FROM OBJECTS
[Token]
GO
++++ answer
+-------------------+
| Column1 : integer |
+-------------------+
| 210               |
+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (2)
GET AGGREGATE FEATURES
COUNT(*), COUNT(surface_stripped_lowcase="god")
FROM OBJECTS
[Token]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 210               | 12                |
+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (3)
GET AGGREGATE FEATURES
COUNT(*)
FROM OBJECTS
[Token xmlindex<=105]
GO
++++ answer
+-------------------+
| Column1 : integer |
+-------------------+
| 95                |
+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (4)
GET AGGREGATE FEATURES
COUNT(*), COUNT(surface_stripped_lowcase='the')
FROM OBJECTS
[Token xmlindex<=105 AND xmlindex >= 100]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 6                 | 0                 |
+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (5)
GET AGGREGATE FEATURES
COUNT(*), COUNT(surface_stripped_lowcase='the')
FROM OBJECTS
[Token xmlindex<=105 AND xmlindex >= 100]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 6                 | 0                 |
+-------------------+-------------------+
---- answer


++++ query GET AGGREGATE FEATURES (6)
GET AGGREGATE FEATURES
COUNT(surface_stripped_lowcase='one'), SUM(xmlindex), MIN(xmlindex), MAX(xmlindex)
FROM OBJECTS
[Token xmlindex<=105 AND xmlindex >= 100]
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer |
+-------------------+-------------------+-------------------+-------------------+
| 1                 | 615               | 100               | 105               |
+-------------------+-------------------+-------------------+-------------------+
---- answer


++++ query GET AGGREGATE FEATURES (7)
GET AGGREGATE FEATURES
COUNT(surface_stripped_lowcase='day'), SUM(xmlindex), MIN(xmlindex), MAX(xmlindex)
FROM OBJECTS
[Token xmlindex<=105 OR surface_stripped_lowcase='god']
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer |
+-------------------+-------------------+-------------------+-------------------+
| 2                 | 6299              | 3                 | 222               |
+-------------------+-------------------+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (8)
GET AGGREGATE FEATURES
COUNT(surface_stripped_lowcase='god'), SUM(xmlindex), MIN(xmlindex), MAX(xmlindex), COUNT(surface_stripped_lowcase<>'god')
FROM OBJECTS
[Token surface_stripped_lowcase='god']
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer | Column5 : integer |
+-------------------+-------------------+-------------------+-------------------+-------------------+
| 12                | 1353              | 17                | 222               | 0                 |
+-------------------+-------------------+-------------------+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (9)
GET AGGREGATE FEATURES
COUNT(*)
FROM OBJECTS
[Verse]
GO
++++ answer
+-------------------+
| Column1 : integer |
+-------------------+
| 10                |
+-------------------+
---- answer


++++ query GET AGGREGATE FEATURES (10)
GET AGGREGATE FEATURES
SUM(verse), COUNT(chapter=1)
FROM OBJECTS
[Verse]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 55                | 10                |
+-------------------+-------------------+
---- answer

	
++++ query GET AGGREGATE FEATURES (11)
GET AGGREGATE FEATURES
SUM(verse), COUNT(chapter=1)
FROM OBJECTS
[Verse chapter >= 1]
GO
++++ answer
+-------------------+-------------------+
| Column1 : integer | Column2 : integer |
+-------------------+-------------------+
| 55                | 10                |
+-------------------+-------------------+
---- answer

++++ query GET AGGREGATE FEATURES (12)
GET AGGREGATE FEATURES
SUM(verse), COUNT(chapter=1), COUNT(verse<=5), MAX(verse), MIN(verse), MIN(chapter), MAX(chapter)
FROM OBJECTS
[Verse verse >= 2 AND verse<=8]
GO
++++ answer
+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+
| Column1 : integer | Column2 : integer | Column3 : integer | Column4 : integer | Column5 : integer | Column6 : integer | Column7 : integer |
+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+
| 35                | 7                 | 4                 | 8                 | 2                 | 1                 | 1                 |
+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+-------------------+
---- answer

	  
++++ query illegal UnorderedGroup (1)
SELECT ALL OBJECTS
WHERE
[Verse AS v1
    [UnorderedGroup
         [Token AS r1]
         [Token wholesurface=r1.wholesurface]
    ]
]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'r1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer

++++ query illegal UnorderedGroup (2)
SELECT ALL OBJECTS
WHERE
[Verse AS v1
    [UnorderedGroup
         [Token AS r1]
    ]
]
[Token wholesurface=r1.wholesurface AND self > v1.self]
++++ answer failcompiler
Symbolchecking failed with compiler error
You have used the object reference 'r1' in such as way as to cross
an "export barrier". An export barrier is either an OR construct,
a STAR construct, or an UnorderedGroup construct.
---- answer

++++ query UNORDERED GROUP (1)
SELECT ALL OBJECTS
WHERE	  
[Verse
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' GET wholesurface]
		[Token surface_stripped_lowcase='good' GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 26 { 57-73 } false  //  <  < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 167 { 65 } false (wholesurface="good: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 312 { 210 } false (wholesurface="good. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (2)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
		[Token surface_stripped_lowcase='good' AND self > v1.self GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 26 { 57-73 } false  //  <  < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 167 { 65 } false (wholesurface="good: ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 312 { 210 } false (wholesurface="good. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (3)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
		[Token surface_stripped_lowcase='made' GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 29 { 119-144 } false  //  <  < [ token 222 { 120 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 223 { 121 } false (wholesurface="made ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (4)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 23 { 8-17 } false  //  <  < [ token 113 { 11 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 24 { 18-45 } false  //  <  < [ token 140 { 38 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 25 { 46-56 } false  //  <  < [ token 149 { 47 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 26 { 57-73 } false  //  <  < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  < [ token 177 { 75 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 28 { 96-118 } false  //  <  < [ token 199 { 97 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 29 { 119-144 } false  //  <  < [ token 222 { 120 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 30 { 145-161 } false  //  <  < [ token 248 { 146 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 31 { 162-186 } false  //  <  < [ token 265 { 163 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer
	  
++++ query UNORDERED GROUP (5)
SELECT ALL OBJECTS
WHERE	  
[Verse AS v1
	[UnorderedGroup
		[Token surface_stripped_lowcase='good']
		[Token surface_stripped_lowcase='god' AND self > v1.self GET wholesurface]
	]
]
GO
++++ answer
 //  <  < [ verse 26 { 57-73 } false  //  <  < [ token 167 { 65 } false  //  <  > 
 ]
 > 
 < [ token 160 { 58 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 169 { 67 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 32 { 187-210 } false  //  <  < [ token 312 { 210 } false  //  <  > 
 ]
 > 
 < [ token 290 { 188 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 307 { 205 } false (wholesurface="God ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query IN (integer)
SELECT ALL OBJECTS
WHERE	  
[Verse chapter IN (1) AND verse IN (3)
    [Token GET wholesurface]
]
GO
++++ answer
 //  <  < [ verse 25 { 46-56 } false  //  <  < [ token 148 { 46 } false (wholesurface="And ") //  <  > 
 ]
 > 
 < [ token 149 { 47 } false (wholesurface="God ") //  <  > 
 ]
 > 
 < [ token 150 { 48 } false (wholesurface="said, ") //  <  > 
 ]
 > 
 < [ token 151 { 49 } false (wholesurface="Let ") //  <  > 
 ]
 > 
 < [ token 152 { 50 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 153 { 51 } false (wholesurface="be ") //  <  > 
 ]
 > 
 < [ token 154 { 52 } false (wholesurface="light: ") //  <  > 
 ]
 > 
 < [ token 155 { 53 } false (wholesurface="and ") //  <  > 
 ]
 > 
 < [ token 156 { 54 } false (wholesurface="there ") //  <  > 
 ]
 > 
 < [ token 157 { 55 } false (wholesurface="was ") //  <  > 
 ]
 > 
 < [ token 158 { 56 } false (wholesurface="light. ") //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer

++++ query IN (ENUM)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D)
SELECT ALL OBJECTS
WHERE	  
[title self IN (19)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ENUM) (1)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ENUM) (2)
SELECT ALL OBJECTS
WHERE	  
[title divtype IN (book, chapter)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D) (1)
SELECT ALL OBJECTS
WHERE	  
[title self IN (19)]
GO
++++ answer
 //  <  < [ title 19 { 1-7 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (ID_D) (2)
SELECT ALL OBJECTS
WHERE	  
[token self IN (156, 158)]
GO
++++ answer
 //  <  < [ token 156 { 54 } false  //  <  > 
 ]
 > 
 < [ token 158 { 56 } false  //  <  > 
 ]
 > 
 > 
---- answer

++++ query IN (integer) (2)
SELECT ALL OBJECTS
WHERE	  
[Verse chapter IN (1) AND verse IN (3,5)
    [Token FIRST]
]
GO
++++ answer
 //  <  < [ verse 25 { 46-56 } false  //  <  < [ token 148 { 46 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 < [ verse 27 { 74-95 } false  //  <  < [ token 176 { 74 } false  //  <  > 
 ]
 > 
 > 
 ]
 > 
 > 
---- answer 
